{
  "src": {
    "app": {
      "app.component.css": "",
      "app.component.html": "<app-navbar></app-navbar>\r\n<router-outlet></router-outlet>\r\n<app-footer></app-footer>",
      "app.component.spec.ts": "import { TestBed } from '@angular/core/testing';\r\nimport { AppComponent } from './app.component';\r\n\r\ndescribe('AppComponent', () => {\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [AppComponent],\r\n    }).compileComponents();\r\n  });\r\n\r\n  it('should create the app', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app).toBeTruthy();\r\n  });\r\n\r\n  it(`should have the 'Oncativo-Vende' title`, () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    const app = fixture.componentInstance;\r\n    expect(app.title).toEqual('Oncativo-Vende');\r\n  });\r\n\r\n  it('should render title', () => {\r\n    const fixture = TestBed.createComponent(AppComponent);\r\n    fixture.detectChanges();\r\n    const compiled = fixture.nativeElement as HTMLElement;\r\n    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, Oncativo-Vende');\r\n  });\r\n});\r\n",
      "app.component.ts": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { NavbarComponent } from './components/navbar/navbar.component';\r\nimport { FooterComponent } from \"./components/footer/footer.component\";\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, NavbarComponent, FooterComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.css'\r\n})\r\nexport class AppComponent {\r\n  title = 'Oncativo-Vende';\r\n}\r\n",
      "app.config.ts": "import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';\r\nimport { provideRouter } from '@angular/router';\r\n\r\nimport { routes } from './app.routes';\r\nimport { provideHttpClient } from '@angular/common/http';\r\n\r\nexport const appConfig: ApplicationConfig = {\r\n  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes),provideHttpClient()]\r\n};\r\n",
      "app.routes.ts": "import { Routes } from '@angular/router';\r\nimport { HomeComponent } from './components/home/home.component';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterComponent } from './components/register/register.component';\r\nimport { MyProfileComponent } from './components/my-profile/my-profile.component';\r\nimport { authGuard } from './guards/auth.guard';\r\nimport { loginBlockGuard } from './guards/login-block.guard';\r\nimport { UnauthorizedComponent } from './components/unauthorized/unauthorized.component';\r\nimport { NotFoundComponent } from './components/not-found/not-found.component';\r\nimport { SearchComponent } from './components/search/search.component';\r\nimport { NewPublicationComponent } from './components/new-publication/new-publication.component';\r\nimport { roleGuard } from './guards/role.guard';\r\nimport { PublicationComponent } from './components/publication/publication.component';\r\nimport { SubscriptionsComponent } from './components/subscriptions/subscriptions.component';\r\nimport { PaymentSuccessComponent } from './components/payment-success/payment-success.component';\r\nimport { PaymentFailureComponent } from './components/payment-failure/payment-failure.component';\r\nimport { MyFavoritesComponent } from './components/my-favorites/my-favorites.component';\r\nimport { MyPublicationsComponent } from './components/my-publications/my-publications.component';\r\nimport { EditPublicationComponent } from './components/edit-publication/edit-publication.component';\r\nimport { UsersListComponent } from './components/users-list/users-list.component';\r\nimport { ReportsListComponent } from './components/reports-list/reports-list.component';\r\nimport { PublicationsListComponent } from './components/publications-list/publications-list.component';\r\nimport { FrequentQuestionsComponent } from './components/frequent-questions/frequent-questions.component';\r\nimport { NewEventComponent } from './components/new-event/new-event.component';\r\nimport { EventsListComponent } from './components/events-list/events-list.component';\r\nimport { ChartsUserComponent } from './components/charts-user/charts-user.component';\r\nimport { ChartsPublicationComponent } from './components/charts-publication/charts-publication.component';\r\nimport { ChartsSubscriptionsComponent } from './components/charts-subscriptions/charts-subscriptions.component';\r\n\r\nexport const routes: Routes = [\r\n    { path: 'home', component: HomeComponent },\r\n    { path: 'login', component: LoginComponent, canActivate: [loginBlockGuard] },\r\n    { path: 'register', component: RegisterComponent, canActivate: [loginBlockGuard] },\r\n    { path: 'profile', component: MyProfileComponent, canActivate: [authGuard] },\r\n    { path: 'my-favorites', component: MyFavoritesComponent, canActivate: [authGuard] },\r\n    { path: 'my-publications', component: MyPublicationsComponent, canActivate: [authGuard] },\r\n    { path: 'subscriptions', component: SubscriptionsComponent, canActivate: [authGuard]},\r\n    { path: 'payment-success', component: PaymentSuccessComponent },\r\n    { path: 'payment-failure', component: PaymentFailureComponent },\r\n    { path: 'publication/:id', component: PublicationComponent},\r\n    { path: 'events', component: EventsListComponent},\r\n    { path: 'publication/:id/edit', component: EditPublicationComponent, canActivate: [authGuard, roleGuard], data: { roles: ['PREMIUM','ADMIN'] } },\r\n    { path: 'unauthorized', component: UnauthorizedComponent },\r\n    { path: 'new-publication', component: NewPublicationComponent, canActivate: [authGuard, roleGuard], data: { roles: ['PREMIUM','ADMIN'] } },\r\n    { path: 'admin/new-event', component: NewEventComponent , canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN'] } },\r\n    { path: 'admin/users', component: UsersListComponent, canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN'] } },\r\n    { path: 'admin/publications', component: PublicationsListComponent, canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN'] } },\r\n    { path: 'admin/charts/users', component: ChartsUserComponent, canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN'] } },\r\n    { path: 'admin/charts/publications', component: ChartsPublicationComponent, canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN'] } },\r\n    { path: 'admin/charts/subscriptions', component: ChartsSubscriptionsComponent, canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN'] } },\r\n    { path: 'moderator/reports', component: ReportsListComponent, canActivate: [authGuard, roleGuard], data: { roles: ['ADMIN','MODERADOR'] } },\r\n    { path: 'not-found', component: NotFoundComponent },\r\n    { path: 'search', component: SearchComponent },\r\n    {path: 'faq', component: FrequentQuestionsComponent},\r\n    { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n    { path: '**', redirectTo: 'not-found' }\r\n];\r\n",
      "components": {
        "change-password": {
          "change-password.component.css": "",
          "change-password.component.html": "<!-- Modal visible automáticamente -->\r\n<div *ngIf=\"modalVisible\" class=\"modal fade show d-block\" id=\"changePassword\" tabindex=\"-1\" aria-hidden=\"true\"\r\n    style=\"background-color: rgba(0, 0, 0, 0.5);\">\r\n  <div class=\"modal-dialog modal-dialog-centered\">\r\n    <div class=\"modal-content\">\r\n\r\n     <!-- Header con X para cerrar -->\r\n     <div class=\"modal-header\">\r\n       <button type=\"button\" class=\"btn-close\" (click)=\"onClose()\" aria-label=\"Close\"></button>\r\n     </div>\r\n\r\n     <div class=\"modal-body\">\r\n       <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Contraseña Actual</label>\r\n          <div class=\"position-relative\">\r\n            <input\r\n             [type]=\"showCurrentPassword ? 'text' : 'password'\"\r\n             class=\"form-control\"\r\n             formControlName=\"currentPassword\"\r\n             [ngClass]=\"onValidate('currentPassword')\"\r\n            >\r\n            <i class=\"bi\"\r\n              [ngClass]=\"showCurrentPassword ? 'bi-eye-slash' : 'bi-eye'\"\r\n              (click)=\"toggleCurrentPassword()\"\r\n              style=\"cursor: pointer; position: absolute; right: 32px; top: 20px; transform: translateY(-50%);\"></i>\r\n            <div class=\"invalid-feedback\">{{ showError('currentPassword') }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Nueva Contraseña</label>\r\n          <div class=\"position-relative\">\r\n            <input\r\n             [type]=\"showNewPassword ? 'text' : 'password'\"\r\n             class=\"form-control\"\r\n             formControlName=\"newPassword\"\r\n             [ngClass]=\"onValidate('newPassword')\"\r\n            >\r\n            <i class=\"bi\"\r\n              [ngClass]=\"showNewPassword ? 'bi-eye-slash' : 'bi-eye'\"\r\n              (click)=\"toggleNewPassword()\"\r\n              style=\"cursor: pointer; position: absolute; right: 32px; top: 20px; transform: translateY(-50%);\"></i>\r\n            <div class=\"invalid-feedback\">{{ showError('newPassword') }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Confirmar Nueva Contraseña</label>\r\n          <div class=\"position-relative\">\r\n            <input\r\n             [type]=\"showConfirmPassword ? 'text' : 'password'\"\r\n             class=\"form-control\"\r\n             formControlName=\"confirmNewPassword\"\r\n             [ngClass]=\"onValidate('confirmNewPassword')\"\r\n            >\r\n            <i class=\"bi\"\r\n              [ngClass]=\"showConfirmPassword ? 'bi-eye-slash' : 'bi-eye'\"\r\n              (click)=\"toggleConfirmPassword()\"\r\n              style=\"cursor: pointer; position: absolute; right: 32px; top: 20px; transform: translateY(-50%);\"></i>\r\n            <div class=\"invalid-feedback\">{{ showError('confirmNewPassword') }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">Cancelar</button>\r\n          <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">Guardar</button>\r\n        </div>\r\n\r\n       </form>\r\n     </div>\r\n\r\n    </div>\r\n  </div>\r\n  <div>\r\n",
          "change-password.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ChangePasswordComponent } from './change-password.component';\r\n\r\ndescribe('ChangePasswordComponent', () => {\r\n  let component: ChangePasswordComponent;\r\n  let fixture: ComponentFixture<ChangePasswordComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ChangePasswordComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ChangePasswordComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "change-password.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, inject, Input, Output } from '@angular/core';\r\nimport { AbstractControl, FormControl, FormGroup, ReactiveFormsModule, ValidationErrors, ValidatorFn, Validators } from '@angular/forms';\r\nimport { UsersService } from '../../services/users.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './change-password.component.html',\r\n  styleUrl: './change-password.component.css'\r\n})\r\nexport class ChangePasswordComponent {\r\n\r\n  @Input() email: string = \"\";\r\n  @Output() close = new EventEmitter<void>();\r\n  private readonly userService = inject(UsersService);\r\n\r\n  modalVisible = true;\r\n  showCurrentPassword = false;\r\n  showNewPassword = false;\r\n  showConfirmPassword = false;\r\n\r\n  form = new FormGroup({\r\n    currentPassword: new FormControl('', [Validators.required]),\r\n    newPassword: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(8),\r\n      Validators.maxLength(30),\r\n    ]),\r\n    confirmNewPassword: new FormControl('', [Validators.required, this.passwordValidator()])\r\n  });\r\n\r\n  passwordValidator() : ValidatorFn {\r\n    return (control: AbstractControl): ValidationErrors | null => {\r\n\r\n      const form = control.parent;\r\n      if(!form){\r\n        return null;\r\n      }\r\n      \r\n      return form.get('newPassword')?.value === form.get('confirmNewPassword')?.value\r\n      ? null : { passwordsDifferent: true };\r\n    }\r\n  }\r\n\r\n  toggleCurrentPassword() {\r\n    this.showCurrentPassword = !this.showCurrentPassword;\r\n  }\r\n\r\n  toggleNewPassword() {\r\n    this.showNewPassword = !this.showNewPassword;\r\n  }\r\n\r\n  toggleConfirmPassword() {\r\n    this.showConfirmPassword = !this.showConfirmPassword;\r\n  }\r\n\r\n  onClose(): void {\r\n    this.modalVisible = false;\r\n    this.close.emit();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n\r\n      const changePasswordDto = {\r\n        email: this.email,\r\n        currentPassword: this.form.controls['currentPassword'].value!,\r\n        newPassword: this.form.controls['newPassword'].value!\r\n      };\r\n\r\n      this.userService.changePassword(changePasswordDto).subscribe({\r\n        next: (response) => {\r\n        \r\n            Swal.fire({\r\n            title: 'Contraseña cambiada',\r\n            text: 'La contraseña se ha cambiado correctamente',\r\n            icon: 'success',\r\n            showConfirmButton: false,\r\n            timer: 2000\r\n            });\r\n          this.form.reset();\r\n          this.onClose();\r\n        },\r\n        error: (error) => {\r\n\r\n          if(error.status === 401 && error.error.message === 'Current password is incorrect.') {\r\n            this.form.controls['currentPassword'].setErrors({ incorrectPassword: true });\r\n            return;\r\n          }\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: 'Error al actualizar la contraseña',\r\n            timer: 2000,\r\n            icon: 'error',\r\n            showConfirmButton: false\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    }\r\n  }\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.form.get(controlName);\r\n  \r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n  \r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'minlength':\r\n          return `El valor ingresado es demasiado corto. Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `El valor ingresado es demasiado largo. Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'passwordsDifferent':\r\n          return 'Las contraseñas no coinciden.';\r\n        case 'incorrectPassword':\r\n          return 'La contraseña actual es incorrecta.';\r\n        default:\r\n          return 'Error no identificado en el campo.';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n}\r\n"
        },
        "charts-publication": {
          "charts-publication.component.css": "\r\n.text-white-75 {\r\n  color: rgba(255, 255, 255, 0.75) !important;\r\n}\r\n\r\n.text-white-50 {\r\n  color: rgba(255, 255, 255, 0.5) !important;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.focus-ring-primary:focus {\r\n  outline: 0;\r\n  box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25);\r\n}\r\n\r\n@keyframes countUp {\r\n  from { opacity: 0; transform: translateY(20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.display-4 {\r\n  animation: countUp 0.8s ease-out;\r\n}\r\n\r\n.badge {\r\n  font-weight: 600;\r\n  letter-spacing: 0.025em;\r\n}\r\n\r\n.btn {\r\n  font-weight: 500;\r\n  letter-spacing: 0.025em;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.card-header {\r\n  background: rgba(var(--bs-primary-rgb), 0.05) !important;\r\n  border-bottom: 1px solid rgba(var(--bs-primary-rgb), 0.1) !important;\r\n}\r\n\r\n.progress {\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress-bar {\r\n  border-radius: 10px;\r\n  transition: width 0.6s ease;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.fa-spin {\r\n  animation: spin 1s linear infinite;\r\n}",
          "charts-publication.component.html": "<div class=\"container-fluid py-4\" style=\"background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); min-height: 100vh;\">\r\n  \r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <div>\r\n          <h1 class=\"h2 text-primary fw-bold mb-0\">\r\n            <i class=\"bi bi-file-earmark-text me-2\"></i>\r\n            Dashboard de Publicaciones\r\n          </h1>\r\n          <p class=\"text-muted mb-0\">Panel de control y métricas de publicaciones</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card shadow-sm border-0 overflow-hidden\">\r\n        <div class=\"border-0 py-3\" style=\"background: linear-gradient(135deg, var(--bs-primary) 0%, #002aff 100%);\">\r\n          <h5 class=\"mb-0 text-white fw-semibold\">\r\n            <i class=\"bi bi-funnel-fill me-2 ms-3\"></i>\r\n            Filtros de fecha\r\n          </h5>\r\n        </div>\r\n        <div class=\"card-body bg-light p-4\">\r\n          <form [formGroup]=\"filterForm\" (ngSubmit)=\"onFilterChange()\">\r\n            <div class=\"row align-items-end g-3\">\r\n              <div class=\"col-md-4\">\r\n                <label for=\"fromDate\" class=\"form-label text-primary fw-semibold\">\r\n                  <i class=\"bi bi-calendar-event me-1\"></i>\r\n                  Fecha Desde:\r\n                </label>\r\n                <div class=\"input-group\">\r\n                  <span class=\"input-group-text bg-primary bg-opacity-10 text-primary border-primary border-opacity-25\">\r\n                    <i class=\"bi bi-calendar3\"></i>\r\n                  </span>\r\n                  <input \r\n                    type=\"date\" \r\n                    id=\"fromDate\"\r\n                    class=\"form-control border-primary border-opacity-25 focus-ring-primary\" \r\n                    formControlName=\"from\"\r\n                    (change)=\"onFilterChange()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <label for=\"toDate\" class=\"form-label text-primary fw-semibold\">\r\n                  <i class=\"bi bi-calendar-check me-1\"></i>\r\n                  Fecha Hasta:\r\n                </label>\r\n                <div class=\"input-group\">\r\n                  <span class=\"input-group-text bg-primary bg-opacity-10 text-primary border-primary border-opacity-25\">\r\n                    <i class=\"bi bi-calendar3\"></i>\r\n                  </span>\r\n                  <input \r\n                    type=\"date\" \r\n                    id=\"toDate\"\r\n                    class=\"form-control border-primary border-opacity-25 focus-ring-primary\" \r\n                    formControlName=\"to\"\r\n                    (change)=\"onFilterChange()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"d-flex gap-2\">\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-outline-secondary flex-fill\"\r\n                    (click)=\"clearFilters()\">\r\n                    <i class=\"bi bi-eraser me-1\"></i>\r\n                    Limpiar\r\n                  </button>\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-primary flex-fill position-relative\"\r\n                    (click)=\"loadDashboardData()\"\r\n                    [disabled]=\"loading\">\r\n                    <i class=\"bi bi-arrow-clockwise me-1\" [class.fa-spin]=\"loading\"></i>\r\n                    Actualizar\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"loading\" class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card border-0 shadow-sm\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <div class=\"spinner-border text-primary mb-3\" style=\"width: 3rem; height: 3rem;\" role=\"status\">\r\n            <span class=\"visually-hidden\">Cargando...</span>\r\n          </div>\r\n          <h4 class=\"text-primary mb-2\">Cargando datos del dashboard...</h4>\r\n          <p class=\"text-muted mb-0\">Por favor espera mientras procesamos la información</p>\r\n          <div class=\"progress mt-3 mx-auto\" style=\"width: 200px; height: 4px;\">\r\n            <div class=\"progress-bar bg-primary progress-bar-striped progress-bar-animated\" \r\n                 role=\"progressbar\" style=\"width: 100%\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loading && dashboardData\">\r\n    \r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, var(--bs-primary) 0%, #4c63d2 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Total Publicaciones\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-0 lh-1\">\r\n                  {{ dashboardData.totalPublications | number }}\r\n                </div>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-file-earmark-text-fill\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-arrow-up-right text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #198754 0%, #20c997 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Visitas Totales\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.totalViews | number }}\r\n                </div>\r\n                <small class=\"text-white-75\">\r\n                  <i class=\"bi bi-eye me-1\"></i>Visualizaciones\r\n                </small>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-eye-fill\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-graph-up text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #0dcaf0 0%, #0a58ca 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Precio Promedio\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  ${{ getAveragePrice() | decimalFormat}}\r\n                </div>\r\n                <small class=\"text-white-75\">\r\n                  Precios totales sumados: ${{dashboardData.averagePrice | decimalFormat}}\r\n                </small>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-currency-dollar\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-calculator text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Pub. Activas\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.activePublications | number }}\r\n                </div>\r\n                <div class=\"d-flex align-items-center mb-2\">\r\n                  <div class=\"progress bg-white bg-opacity-25 me-2\" style=\"height: 6px; width: 80px;\">\r\n                    <div class=\"progress-bar bg-white\" \r\n                         [style.width.%]=\"getActivePublicationsPercentage()\">\r\n                    </div>\r\n                  </div>\r\n                  <small class=\"text-white fw-semibold\">{{ getActivePublicationsPercentage() }}%</small>\r\n                </div>\r\n                <small class=\"text-white-75\">\r\n                  <i class=\"bi bi-x-circle me-1\"></i>Inactivas: {{ dashboardData.inactivePublications | number }}\r\n                </small>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-check-circle-fill\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-activity text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-xl-6 col-lg-7 mb-4\">\r\n        <div class=\"card shadow-sm border-0 h-100\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-pie-chart-fill me-2\"></i>\r\n                Estado de Publicaciones\r\n              </h6>\r\n              <div class=\"dropdown\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" type=\"button\" (click)=\"exportActivePublicationsChart()\">\r\n                  <i class=\"bi bi-download me-2\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div class=\"chart-pie pt-2 pb-2\">\r\n              <div id=\"activePublicationsChart\" style=\"height: 300px;\"></div>\r\n            </div>\r\n            <div class=\"row mt-4 text-center\">\r\n              <div class=\"col-6\">\r\n                <div class=\"p-3 bg-success bg-opacity-10 rounded-3\">\r\n                  <i class=\"bi bi-circle-fill text-success me-2\"></i>\r\n                  <strong class=\"text-success\">Activas</strong>\r\n                  <div class=\"h5 mb-0 text-success mt-1\">{{ dashboardData.activePublications | number }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <div class=\"p-3 bg-danger bg-opacity-10 rounded-3\">\r\n                  <i class=\"bi bi-circle-fill text-danger me-2\"></i>\r\n                  <strong class=\"text-danger\">Inactivas</strong>\r\n                  <div class=\"h5 mb-0 text-danger mt-1\">{{ dashboardData.inactivePublications | number }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-6 col-lg-5 mb-4\">\r\n        <div class=\"card shadow-sm border-0 h-100\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-fill me-2\"></i>\r\n                Resumen de Estadísticas\r\n              </h6>\r\n              <button class=\"btn btn-sm btn-outline-success\" (click)=\"exportDataAsCSV()\">\r\n                <i class=\"bi bi-download me-1\"></i> Excel\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-0\">\r\n            <div class=\"list-group list-group-flush\">\r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-file-earmark-text text-primary\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Total Publicaciones</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Publicaciones registradas</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-primary rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.totalPublications | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-eye-fill text-success\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Visitas Totales</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Visualizaciones</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-success rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.totalViews | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-check-circle text-info\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Publicaciones Activas</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">{{ getActivePublicationsPercentage() }}% del total</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-info rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.activePublications | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-tags-fill text-warning\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Categorías Activas</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Diversidad de categorías</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-warning rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.publicationsByCategory.length || 0 }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-12\">\r\n        <div class=\"card shadow-sm border-0\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-line-fill me-2\"></i>\r\n                Publicaciones por Categoría\r\n              </h6>\r\n              <div class=\"d-flex gap-2\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" (click)=\"exportCategoryChart()\">\r\n                  <i class=\"bi bi-download me-1\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div *ngIf=\"dashboardData.publicationsByCategory && dashboardData.publicationsByCategory.length > 0; else noCategoryData\">\r\n              <div id=\"categoryChart\" style=\"height: 400px;\"></div>\r\n            </div>\r\n            <ng-template #noCategoryData>\r\n              <div class=\"text-center py-5\">\r\n                <div class=\"bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n                     style=\"width: 80px; height: 80px;\">\r\n                  <i class=\"bi bi-tags text-muted\" style=\"font-size: 2rem;\"></i>\r\n                </div>\r\n                <h5 class=\"text-muted\">No hay datos de categorías disponibles</h5>\r\n                <p class=\"text-muted mb-3\">No se encontraron datos para el período seleccionado.</p>\r\n                <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n                  <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n                  Recargar datos\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-12\">\r\n        <div class=\"card shadow-sm border-0\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-line-fill me-2\"></i>\r\n                Publicaciones por Tags\r\n              </h6>\r\n              <div class=\"d-flex gap-2\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" (click)=\"exportTagChart()\">\r\n                  <i class=\"bi bi-download me-1\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div *ngIf=\"dashboardData.publicationsByTag && dashboardData.publicationsByTag.length > 0; else noTagData\">\r\n              <div id=\"tagChart\" style=\"height: 400px;\"></div>\r\n            </div>\r\n            <ng-template #noTagData>\r\n              <div class=\"text-center py-5\">\r\n                <div class=\"bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n                     style=\"width: 80px; height: 80px;\">\r\n                  <i class=\"bi bi-hash text-muted\" style=\"font-size: 2rem;\"></i>\r\n                </div>\r\n                <h5 class=\"text-muted\">No hay datos de tags disponibles</h5>\r\n                <p class=\"text-muted mb-3\">No se encontraron datos para el período seleccionado.</p>\r\n                <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n                  <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n                  Recargar datos\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <div class=\"card shadow-sm border-0\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-line-fill me-2\"></i>\r\n                Publicaciones por Localidad\r\n              </h6>\r\n              <div class=\"d-flex gap-2\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" (click)=\"exportLocationChart()\">\r\n                  <i class=\"bi bi-download me-1\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div *ngIf=\"dashboardData.publicationsByLocation && dashboardData.publicationsByLocation.length > 0; else noLocationData\">\r\n              <div id=\"locationChart\" style=\"height: 400px;\"></div>\r\n            </div>\r\n            <ng-template #noLocationData>\r\n              <div class=\"text-center py-5\">\r\n                <div class=\"bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n                     style=\"width: 80px; height: 80px;\">\r\n                  <i class=\"bi bi-map text-muted\" style=\"font-size: 2rem;\"></i>\r\n                </div>\r\n                <h5 class=\"text-muted\">No hay datos de localización disponibles</h5>\r\n                <p class=\"text-muted mb-3\">No se encontraron datos para el período seleccionado.</p>\r\n                <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n                  <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n                  Recargar datos\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loading && !dashboardData\" class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card border-0 shadow-sm\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <div class=\"bg-warning bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n               style=\"width: 80px; height: 80px;\">\r\n            <i class=\"bi bi-exclamation-triangle text-warning\" style=\"font-size: 2rem;\"></i>\r\n          </div>\r\n          <h4 class=\"text-dark mb-2\">No se pudieron cargar los datos</h4>\r\n          <p class=\"text-muted mb-4\">Ha ocurrido un error al cargar la información. Intenta nuevamente o contacta a soporte.</p>\r\n          <div class=\"d-flex gap-2 justify-content-center\">\r\n            <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n              <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n              Reintentar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
          "charts-publication.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ChartsPublicationComponent } from './charts-publication.component';\r\n\r\ndescribe('ChartsPublicationComponent', () => {\r\n  let component: ChartsPublicationComponent;\r\n  let fixture: ComponentFixture<ChartsPublicationComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ChartsPublicationComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ChartsPublicationComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "charts-publication.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { PublicationDashboardDto } from '../../models/PublicationDashboardDto';\r\nimport { DashboardsService } from '../../services/dashboards.service';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\n\r\ndeclare var google: any;\r\n\r\n@Component({\r\n  selector: 'app-charts-publication',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, CommonModule, PipesModule],\r\n  templateUrl: './charts-publication.component.html',\r\n  styleUrl: './charts-publication.component.css'\r\n})\r\nexport class ChartsPublicationComponent implements OnInit {\r\n\r\n  filterForm: FormGroup;\r\n  dashboardData: PublicationDashboardDto | null = null;\r\n  loading = false;\r\n\r\n  private activePublicationsChart: any;\r\n  private categoryChart: any;\r\n  private tagChart: any;\r\n  private locationChart: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dashboardService: DashboardsService\r\n  ) {\r\n    this.filterForm = this.fb.group({\r\n      from: [''],\r\n      to: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    google.charts.load('current', { packages: ['corechart', 'bar'] });\r\n    google.charts.setOnLoadCallback(() => {\r\n      this.loadDashboardData();\r\n    });\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.loading = true;\r\n    const filters = this.filterForm.value;\r\n    \r\n    this.dashboardService.getPublicationDashboard(filters.from, filters.to)\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.dashboardData = data;\r\n          this.loading = false;\r\n          this.drawCharts();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading dashboard data:', error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onFilterChange(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.filterForm.reset();\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  private drawCharts(): void {\r\n    if (!this.dashboardData) return;\r\n\r\n    setTimeout(() => {\r\n      this.drawActivePublicationsChart();\r\n      this.drawCategoryChart();\r\n      this.drawTagChart();\r\n      this.drawLocationChart();\r\n    }, 100);\r\n  }\r\n\r\n  private drawActivePublicationsChart(): void {\r\n    if (!this.dashboardData) return;\r\n\r\n    const data = google.visualization.arrayToDataTable([\r\n      ['Estado', 'Cantidad'],\r\n      ['Publicaciones Activas', this.dashboardData.activePublications],\r\n      ['Publicaciones Inactivas', this.dashboardData.inactivePublications]\r\n    ]);\r\n\r\n    const options = {\r\n      title: 'Distribución de Publicaciones Activas/Inactivas',\r\n      titleTextStyle: {\r\n        fontSize: 16,\r\n        bold: true\r\n      },\r\n      pieHole: 0.3,\r\n      colors: ['#28a745', '#dc3545'],\r\n      legend: {\r\n        position: 'bottom',\r\n        alignment: 'center'\r\n      },\r\n      chartArea: {\r\n        left: 20,\r\n        top: 50,\r\n        width: '90%',\r\n        height: '70%'\r\n      }\r\n    };\r\n\r\n    this.activePublicationsChart = new google.visualization.PieChart(\r\n      document.getElementById('activePublicationsChart')\r\n    );\r\n    this.activePublicationsChart.draw(data, options);\r\n  }\r\n\r\n  private drawCategoryChart(): void {\r\n  if (!this.dashboardData?.publicationsByCategory?.length) return;\r\n\r\n  const raw = this.dashboardData.publicationsByCategory;\r\n  const total = raw.reduce((sum, item) => sum + item.count, 0);\r\n\r\n  const chartData: (string | number)[][] = [['Categoría', 'Cantidad de Publicaciones']];\r\n\r\n  raw.forEach(category => {\r\n    const percentage = ((category.count / total) * 100).toFixed(1);\r\n    const label = `${category.label} (${category.count})`;\r\n    chartData.push([label, category.count]);\r\n  });\r\n\r\n  const data = google.visualization.arrayToDataTable(chartData);\r\n\r\n  const options = {\r\n    titleTextStyle: {\r\n      fontSize: 16,\r\n      bold: true\r\n    },\r\n    pieHole: 0.4,\r\n    colors: ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8', '#6f42c1', '#fd7e14', '#20c997'],\r\n    legend: {\r\n      position: 'right',\r\n      alignment: 'center',\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    chartArea: {\r\n      left: 20,\r\n      top: 50,\r\n      width: '75%',\r\n      height: '80%'\r\n    },\r\n    tooltip: {\r\n      text: 'percentage',\r\n    }\r\n  };\r\n\r\n  this.categoryChart = new google.visualization.PieChart(\r\n    document.getElementById('categoryChart')\r\n  );\r\n  this.categoryChart.draw(data, options);\r\n}\r\n\r\n  private drawTagChart(): void {\r\n  if (!this.dashboardData?.publicationsByTag?.length) return;\r\n\r\n  const data = new google.visualization.DataTable();\r\n  data.addColumn('string', 'Tag');\r\n  data.addColumn('number', 'Cantidad de Publicaciones');\r\n  data.addColumn({ type: 'string', role: 'style' });\r\n  data.addColumn({ type: 'string', role: 'tooltip', p: { html: true } });\r\n\r\n  const tagColorMap: { [label: string]: string } = {\r\n    'nuevo': '#28a745',\r\n    'usado': '#dc3545',\r\n    'envío incluido': '#17a2b8',\r\n    'retiro en mano': '#20c997',\r\n    'punto de encuentro': '#6f42c1',\r\n    'precio negociable': '#ffc107',\r\n    'precio fijo': '#007bff'\r\n  };\r\n\r\n  this.dashboardData.publicationsByTag.forEach(tag => {\r\n    const key = tag.label.toLowerCase().trim();\r\n    const color = tagColorMap[key] || '#6c757d';\r\n\r\n    const tooltip = `\r\n      <div style=\"min-width: 150px; padding: 6px;\">\r\n        <strong>${tag.label}</strong><br/>\r\n        ${tag.count} publicaciones\r\n      </div>\r\n    `;\r\n\r\n    data.addRow([tag.label, tag.count, `color: ${color}`, tooltip]);\r\n  });\r\n\r\n  const options = {\r\n    titleTextStyle: {\r\n      fontSize: 16,\r\n      bold: true\r\n    },\r\n    hAxis: {\r\n      title: 'Tags',\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 11\r\n      }\r\n    },\r\n    vAxis: {\r\n      title: 'Cantidad de Publicaciones',\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      minValue: 0,\r\n      format: '0',\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    legend: { position: 'none' },\r\n    chartArea: {\r\n      left: 60,\r\n      top: 50,\r\n      width: '85%',\r\n      height: '70%'\r\n    },\r\n    bar: {\r\n      groupWidth: '75%'\r\n    },\r\n    tooltip: {\r\n      isHtml: true,\r\n      textStyle: {\r\n        fontSize: 14\r\n      }\r\n    }\r\n  };\r\n\r\n  this.tagChart = new google.visualization.ColumnChart(\r\n    document.getElementById('tagChart')\r\n  );\r\n  this.tagChart.draw(data, options);\r\n}\r\n\r\n\r\n  private drawLocationChart(): void {\r\n  if (!this.dashboardData?.publicationsByLocation?.length) return;\r\n\r\n  const data = new google.visualization.DataTable();\r\n  data.addColumn('string', 'Localidad');\r\n  data.addColumn('number', 'Cantidad de Publicaciones');\r\n  data.addColumn({ type: 'string', role: 'style' });\r\n  data.addColumn({ type: 'number', role: 'annotation' });\r\n  data.addColumn({ type: 'string', role: 'tooltip', p: { html: true } });\r\n\r\n  const colors = [\r\n    '#fd7e14', '#20c997', '#6f42c1', '#007bff', '#28a745',\r\n    '#dc3545', '#ffc107', '#17a2b8', '#343a40'\r\n  ];\r\n\r\n  this.dashboardData.publicationsByLocation.forEach((loc, index) => {\r\n    const color = colors[index % colors.length];\r\n\r\n    const tooltip = `\r\n      <div style=\"min-width: 150px; padding: 6px;\">\r\n        <strong>${loc.label}</strong><br/>\r\n        ${loc.count} publicaciones\r\n      </div>\r\n    `;\r\n\r\n    data.addRow([loc.label, loc.count, `color: ${color}`, loc.count, tooltip]);\r\n  });\r\n\r\n  const options = {\r\n    titleTextStyle: {\r\n      fontSize: 16,\r\n      bold: true\r\n    },\r\n    hAxis: {\r\n      title: 'Cantidad de Publicaciones',\r\n      minValue: 0,\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    vAxis: {\r\n      title: 'Localidades',\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    legend: { position: 'none' },\r\n    chartArea: {\r\n      left: 140,\r\n      top: 50,\r\n      width: '70%',\r\n      height: '80%'\r\n    },\r\n    bar: {\r\n      groupWidth: '75%'\r\n    },\r\n    tooltip: {\r\n      isHtml: true,\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    annotations: {\r\n      textStyle: {\r\n        fontSize: 12,\r\n        color: '#000',\r\n        bold: true\r\n      }\r\n    }\r\n  };\r\n\r\n  this.locationChart = new google.visualization.BarChart(\r\n    document.getElementById('locationChart')\r\n  );\r\n  this.locationChart.draw(data, options);\r\n}\r\n\r\n  exportActivePublicationsChart(): void {\r\n    if (!this.activePublicationsChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.activePublicationsChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `publicaciones_activas_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportCategoryChart(): void {\r\n    if (!this.categoryChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.categoryChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `publicaciones_por_categoria_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportTagChart(): void {\r\n    if (!this.tagChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.tagChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `publicaciones_por_tags_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportLocationChart(): void {\r\n    if (!this.locationChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.locationChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `publicaciones_por_localidad_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  getAveragePrice(): number {\r\n    if (!this.dashboardData || this.dashboardData.averagePrice === null || this.dashboardData.totalPublications === 0) {\r\n      return 0;\r\n    }\r\n    return this.dashboardData.averagePrice / this.dashboardData.totalPublications;\r\n  }\r\n\r\n  exportDataAsCSV(): void {\r\n    if (!this.dashboardData) {\r\n      alert('No hay datos disponibles para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let csvContent = 'Métrica,Valor\\n';\r\n      csvContent += `Total de Publicaciones,${this.dashboardData.totalPublications}\\n`;\r\n      csvContent += `Publicaciones Activas,${this.dashboardData.activePublications}\\n`;\r\n      csvContent += `Publicaciones Inactivas,${this.dashboardData.inactivePublications}\\n`;\r\n      csvContent += `Total de Visitas,${this.dashboardData.totalViews}\\n`;\r\n      csvContent += `Precio Promedio,$${this.dashboardData.averagePrice}\\n`;\r\n      \r\n      if (this.dashboardData.publicationsByCategory?.length > 0) {\r\n        csvContent += '\\nCategoría,Cantidad de Publicaciones\\n';\r\n        this.dashboardData.publicationsByCategory.forEach(category => {\r\n          csvContent += `${category.label},${category.count}\\n`;\r\n        });\r\n      }\r\n\r\n      if (this.dashboardData.publicationsByTag?.length > 0) {\r\n        csvContent += '\\nTag,Cantidad de Publicaciones\\n';\r\n        this.dashboardData.publicationsByTag.forEach(tag => {\r\n          csvContent += `${tag.label},${tag.count}\\n`;\r\n        });\r\n      }\r\n\r\n      if (this.dashboardData.publicationsByLocation?.length > 0) {\r\n        csvContent += '\\nLocalidad,Cantidad de Publicaciones\\n';\r\n        this.dashboardData.publicationsByLocation.forEach(location => {\r\n          csvContent += `${location.label},${location.count}\\n`;\r\n        });\r\n      }\r\n\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      \r\n      if (link.download !== undefined) {\r\n        const url = URL.createObjectURL(blob);\r\n        link.setAttribute('href', url);\r\n        link.setAttribute('download', `dashboard_publicaciones_${new Date().toISOString().split('T')[0]}.csv`);\r\n        link.style.visibility = 'hidden';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar CSV:', error);\r\n      alert('Error al exportar los datos. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  getActivePublicationsPercentage(): number {\r\n    if (!this.dashboardData || this.dashboardData.totalPublications === 0) return 0;\r\n    return Math.round((this.dashboardData.activePublications / this.dashboardData.totalPublications) * 100);\r\n  }\r\n\r\n  formatPrice(price: number): string {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS'\r\n    }).format(price);\r\n  }\r\n\r\n}\r\n"
        },
        "charts-subscriptions": {
          "charts-subscriptions.component.css": "\r\n.text-white-75 {\r\n  color: rgba(255, 255, 255, 0.75) !important;\r\n}\r\n\r\n.text-white-50 {\r\n  color: rgba(255, 255, 255, 0.5) !important;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.focus-ring-primary:focus {\r\n  outline: 0;\r\n  box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25);\r\n}\r\n\r\n@keyframes countUp {\r\n  from { opacity: 0; transform: translateY(20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.display-4 {\r\n  animation: countUp 0.8s ease-out;\r\n}\r\n\r\n.badge {\r\n  font-weight: 600;\r\n  letter-spacing: 0.025em;\r\n}\r\n\r\n.btn {\r\n  font-weight: 500;\r\n  letter-spacing: 0.025em;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.card-header {\r\n  background: rgba(var(--bs-primary-rgb), 0.05) !important;\r\n  border-bottom: 1px solid rgba(var(--bs-primary-rgb), 0.1) !important;\r\n}\r\n\r\n.progress {\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress-bar {\r\n  border-radius: 10px;\r\n  transition: width 0.6s ease;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.fa-spin {\r\n  animation: spin 1s linear infinite;\r\n}",
          "charts-subscriptions.component.html": "<div class=\"container-fluid py-4\" style=\"background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); min-height: 100vh;\">\r\n  \r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <div>\r\n          <h1 class=\"h2 text-primary fw-bold mb-0\">\r\n            <i class=\"bi bi-credit-card me-2\"></i>\r\n            Dashboard de Suscripciones\r\n          </h1>\r\n          <p class=\"text-muted mb-0\">Panel de control y métricas de suscripciones</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card shadow-sm border-0 overflow-hidden\">\r\n        <div class=\"border-0 py-3\" style=\"background: linear-gradient(135deg, var(--bs-primary) 0%, #002aff 100%);\">\r\n          <h5 class=\"mb-0 text-white fw-semibold\">\r\n            <i class=\"bi bi-funnel-fill me-2 ms-3\"></i>\r\n            Filtros de fecha\r\n          </h5>\r\n        </div>\r\n        <div class=\"card-body bg-light p-4\">\r\n          <form [formGroup]=\"filterForm\" (ngSubmit)=\"onFilterChange()\">\r\n            <div class=\"row align-items-end g-3\">\r\n              <div class=\"col-md-4\">\r\n                <label for=\"fromDate\" class=\"form-label text-primary fw-semibold\">\r\n                  <i class=\"bi bi-calendar-event me-1\"></i>\r\n                  Fecha Desde:\r\n                </label>\r\n                <div class=\"input-group\">\r\n                  <span class=\"input-group-text bg-primary bg-opacity-10 text-primary border-primary border-opacity-25\">\r\n                    <i class=\"bi bi-calendar3\"></i>\r\n                  </span>\r\n                  <input \r\n                    type=\"date\" \r\n                    id=\"fromDate\"\r\n                    class=\"form-control border-primary border-opacity-25 focus-ring-primary\" \r\n                    formControlName=\"from\"\r\n                    (change)=\"onFilterChange()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <label for=\"toDate\" class=\"form-label text-primary fw-semibold\">\r\n                  <i class=\"bi bi-calendar-check me-1\"></i>\r\n                  Fecha Hasta:\r\n                </label>\r\n                <div class=\"input-group\">\r\n                  <span class=\"input-group-text bg-primary bg-opacity-10 text-primary border-primary border-opacity-25\">\r\n                    <i class=\"bi bi-calendar3\"></i>\r\n                  </span>\r\n                  <input \r\n                    type=\"date\" \r\n                    id=\"toDate\"\r\n                    class=\"form-control border-primary border-opacity-25 focus-ring-primary\" \r\n                    formControlName=\"to\"\r\n                    (change)=\"onFilterChange()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"d-flex gap-2\">\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-outline-secondary flex-fill\"\r\n                    (click)=\"clearFilters()\">\r\n                    <i class=\"bi bi-eraser me-1\"></i>\r\n                    Limpiar\r\n                  </button>\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-primary flex-fill position-relative\"\r\n                    (click)=\"loadDashboardData()\"\r\n                    [disabled]=\"loading\">\r\n                    <i class=\"bi bi-arrow-clockwise me-1\" [class.fa-spin]=\"loading\"></i>\r\n                    Actualizar\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"loading\" class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card border-0 shadow-sm\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <div class=\"spinner-border text-primary mb-3\" style=\"width: 3rem; height: 3rem;\" role=\"status\">\r\n            <span class=\"visually-hidden\">Cargando...</span>\r\n          </div>\r\n          <h4 class=\"text-primary mb-2\">Cargando datos del dashboard...</h4>\r\n          <p class=\"text-muted mb-0\">Por favor espera mientras procesamos la información</p>\r\n          <div class=\"progress mt-3 mx-auto\" style=\"width: 200px; height: 4px;\">\r\n            <div class=\"progress-bar bg-primary progress-bar-striped progress-bar-animated\" \r\n                 role=\"progressbar\" style=\"width: 100%\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loading && dashboardData\">\r\n    \r\n    <!-- KPIs Section -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, var(--bs-primary) 0%, #4c63d2 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Total Suscripciones\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-0 lh-1\">\r\n                  {{ dashboardData.totalSubscriptions | number }}\r\n                </div>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-credit-card-fill\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-arrow-up-right text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #198754 0%, #20c997 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Ingresos Totales\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-0 lh-1\">\r\n                  ${{ dashboardData.totalRevenue | decimalFormat }}\r\n                </div>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-currency-dollar\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-trending-up text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #0dcaf0 0%, #0a58ca 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Con Descuento\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.withDiscount | number }}\r\n                </div>\r\n                <div class=\"d-flex align-items-center mb-2\">\r\n                  <div class=\"progress bg-white bg-opacity-25 me-2\" style=\"height: 6px; width: 80px;\">\r\n                    <div class=\"progress-bar bg-white\" \r\n                         [style.width.%]=\"getDiscountPercentage()\">\r\n                    </div>\r\n                  </div>\r\n                  <small class=\"text-white fw-semibold\">{{ getDiscountPercentage() }}%</small>\r\n                </div>\r\n                <small class=\"text-white-75\">\r\n                  <i class=\"bi bi-tag me-1\"></i>Sin descuento: {{ dashboardData.withoutDiscount | number }}\r\n                </small>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-percent\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Suscripciones Activas\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.activeSubscriptions | number }}\r\n                </div>\r\n                <small class=\"text-white-75 d-block mb-1\">\r\n                  <i class=\"bi bi-x-circle me-1\"></i>Inactivas: {{ dashboardData.inactiveSubscriptions | number }}\r\n                </small>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <span class=\"badge bg-white bg-opacity-25 text-white px-2 py-1 rounded-pill\" \r\n                        *ngIf=\"dashboardData.activeSubscriptions > dashboardData.inactiveSubscriptions\">\r\n                    <i class=\"bi bi-check-circle-fill me-1\"></i>Más activas\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-activity\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Charts Section -->\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-xl-6 col-lg-7 mb-4\">\r\n        <div class=\"card shadow-sm border-0 h-100\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-pie-chart-fill me-2\"></i>\r\n                Suscripciones Activas vs Inactivas\r\n              </h6>\r\n              <div class=\"dropdown\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" type=\"button\" (click)=\"exportActiveSubscriptionsChart()\">\r\n                  <i class=\"bi bi-download me-2\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div class=\"chart-pie pt-2 pb-2\">\r\n              <div id=\"activeSubscriptionsChart\" style=\"height: 300px;\"></div>\r\n            </div>\r\n            <div class=\"row mt-4 text-center\">\r\n              <div class=\"col-6\">\r\n                <div class=\"p-3 bg-success bg-opacity-10 rounded-3\">\r\n                  <i class=\"bi bi-circle-fill text-success me-2\"></i>\r\n                  <strong class=\"text-success\">Activas</strong>\r\n                  <div class=\"h5 mb-0 text-success mt-1\">{{ dashboardData.activeSubscriptions | number }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <div class=\"p-3 bg-danger bg-opacity-10 rounded-3\">\r\n                  <i class=\"bi bi-circle-fill text-danger me-2\"></i>\r\n                  <strong class=\"text-danger\">Inactivas</strong>\r\n                  <div class=\"h5 mb-0 text-danger mt-1\">{{ dashboardData.inactiveSubscriptions | number }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-6 col-lg-5 mb-4\">\r\n        <div class=\"card shadow-sm border-0 h-100\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-fill me-2\"></i>\r\n                Resumen de Estadísticas\r\n              </h6>\r\n              <button class=\"btn btn-sm btn-outline-success\" (click)=\"exportDataAsCSV()\">\r\n                <i class=\"bi bi-download me-1\"></i> Excel\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-0\">\r\n            <div class=\"list-group list-group-flush\">\r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-credit-card-fill text-primary\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Total Suscripciones</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Suscripciones registradas</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-primary rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.totalSubscriptions | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-currency-dollar text-success\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Ingresos Totales</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Dinero generado con suscripciones</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-success rounded-pill fs-6 px-3 py-2\">\r\n                    ${{ dashboardData.totalRevenue | decimalFormat }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-percent text-info\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Con Descuento</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">{{ getDiscountPercentage() }}% del total</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-info rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.withDiscount | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-check-circle-fill text-warning\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Suscripciones Activas</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Estado actual</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-warning rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.activeSubscriptions | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-12\">\r\n    <div class=\"card shadow-sm border-0\">\r\n      <div class=\"card-header bg-white border-bottom py-3\">\r\n        <div class=\"d-flex align-items-center justify-content-between\">\r\n          <h6 class=\"mb-0 text-primary fw-semibold\">\r\n            <i class=\"bi bi-graph-up me-2\"></i>\r\n            Suscripciones por Mes del año {{ dashboardData.yearAnalize }}\r\n          </h6>\r\n          <div class=\"d-flex gap-2\">\r\n            <button class=\"btn btn-sm btn-outline-primary\" (click)=\"exportMonthlyChart()\">\r\n              <i class=\"bi bi-download me-1\"></i>PNG\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-body p-4\">\r\n        <div *ngIf=\"dashboardData && dashboardData.subscriptionsByMonth && dashboardData.subscriptionsByMonth.length > 0; else noMonthlyData\">\r\n          <div id=\"monthlyChart\" style=\"height: 400px; width: 100%;\"></div>\r\n        </div>\r\n        <ng-template #noMonthlyData>\r\n          <div class=\"text-center py-5\">\r\n            <div class=\"bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n                 style=\"width: 80px; height: 80px;\">\r\n              <i class=\"bi bi-graph-up text-muted\" style=\"font-size: 2rem;\"></i>\r\n            </div>\r\n            <h5 class=\"text-muted\">No hay datos mensuales disponibles</h5>\r\n            <p class=\"text-muted mb-3\">No se encontraron datos para el período seleccionado.</p>\r\n            <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n              <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n              Recargar datos\r\n            </button>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n  <div *ngIf=\"!loading && !dashboardData\" class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card border-0 shadow-sm\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <div class=\"bg-warning bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n               style=\"width: 80px; height: 80px;\">\r\n            <i class=\"bi bi-exclamation-triangle text-warning\" style=\"font-size: 2rem;\"></i>\r\n          </div>\r\n          <h4 class=\"text-dark mb-2\">No se pudieron cargar los datos</h4>\r\n          <p class=\"text-muted mb-4\">Ha ocurrido un error al cargar la información. Intenta nuevamente o contacta a soporte.</p>\r\n          <div class=\"d-flex gap-2 justify-content-center\">\r\n            <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n              <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n              Reintentar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
          "charts-subscriptions.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ChartsSubscriptionsComponent } from './charts-subscriptions.component';\r\n\r\ndescribe('ChartsSubscriptionsComponent', () => {\r\n  let component: ChartsSubscriptionsComponent;\r\n  let fixture: ComponentFixture<ChartsSubscriptionsComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ChartsSubscriptionsComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ChartsSubscriptionsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "charts-subscriptions.component.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { DashboardsService } from '../../services/dashboards.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SubscriptionDashboardDto } from '../../models/SubscriptionDashboardDto';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\n\r\ndeclare var google: any;\r\n\r\n@Component({\r\n  selector: 'app-charts-subscriptions',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, CommonModule, PipesModule],\r\n  templateUrl: './charts-subscriptions.component.html',\r\n  styleUrl: './charts-subscriptions.component.css'\r\n})\r\nexport class ChartsSubscriptionsComponent implements OnInit {\r\n\r\n  filterForm: FormGroup;\r\n  dashboardData: SubscriptionDashboardDto | null = null;\r\n  loading = false;\r\n\r\n  private activeSubscriptionsChart: any;\r\n  private monthlySubscriptionsChart: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dashboardService: DashboardsService\r\n  ) {\r\n    this.filterForm = this.fb.group({\r\n      from: [''],\r\n      to: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    google.charts.load('current', { packages: ['corechart', 'line'] });\r\n    google.charts.setOnLoadCallback(() => {\r\n      this.loadDashboardData();\r\n    });\r\n  }\r\n\r\n  getDiscountPercentage(): number {\r\n    if (!this.dashboardData || this.dashboardData.totalSubscriptions === 0) return 0;\r\n    return Math.round((this.dashboardData.withDiscount / this.dashboardData.totalSubscriptions) * 100);\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.loading = true;\r\n    const filters = this.filterForm.value;\r\n    \r\n    this.dashboardService.getSubscriptionDashboard(filters.from, filters.to)\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.dashboardData = data;\r\n          this.loading = false;\r\n          setTimeout(() => {\r\n            this.drawCharts();\r\n          }, 200);\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading subscription dashboard data:', error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onFilterChange(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.filterForm.reset();\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  private drawCharts(): void {\r\n    if (!this.dashboardData) return;\r\n\r\n    const activeElement = document.getElementById('activeSubscriptionsChart');\r\n    const monthlyElement = document.getElementById('monthlyChart');\r\n\r\n    console.log('Active element:', activeElement);\r\n    console.log('Monthly element:', monthlyElement);\r\n    console.log('Dashboard data:', this.dashboardData);\r\n\r\n    if (activeElement) {\r\n      this.drawActiveSubscriptionsChart();\r\n    } else {\r\n      console.error('Elemento activeSubscriptionsChart no encontrado');\r\n    }\r\n\r\n    if (monthlyElement && this.dashboardData.subscriptionsByMonth?.length > 0) {\r\n      this.drawMonthlySubscriptionsChart();\r\n    } else {\r\n      console.error('Elemento monthlyChart no encontrado o sin datos:', {\r\n        element: monthlyElement,\r\n        hasData: this.dashboardData.subscriptionsByMonth?.length > 0\r\n      });\r\n    }\r\n  }\r\n\r\n  private drawActiveSubscriptionsChart(): void {\r\n    if (!this.dashboardData) return;\r\n\r\n    const data = google.visualization.arrayToDataTable([\r\n      ['Estado', 'Cantidad'],\r\n      ['Suscripciones Activas', this.dashboardData.activeSubscriptions],\r\n      ['Suscripciones Inactivas', this.dashboardData.inactiveSubscriptions]\r\n    ]);\r\n\r\n    const options = {\r\n      titleTextStyle: {\r\n        fontSize: 16,\r\n        bold: true\r\n      },\r\n      pieHole: 0.3,\r\n      colors: ['#28a745', '#dc3545'],\r\n      legend: {\r\n        position: 'bottom',\r\n        alignment: 'center'\r\n      },\r\n      chartArea: {\r\n        left: 20,\r\n        top: 50,\r\n        width: '90%',\r\n        height: '70%'\r\n      }\r\n    };\r\n\r\n    this.activeSubscriptionsChart = new google.visualization.PieChart(\r\n      document.getElementById('activeSubscriptionsChart')\r\n    );\r\n    this.activeSubscriptionsChart.draw(data, options);\r\n  }\r\n\r\nprivate drawMonthlySubscriptionsChart(): void {\r\n  if (!this.dashboardData?.subscriptionsByMonth?.length) {\r\n    console.error('No hay datos mensuales para mostrar');\r\n    return;\r\n  }\r\n\r\n  console.log('Dibujando gráfico mensual con datos:', this.dashboardData.subscriptionsByMonth);\r\n\r\n  const data = new google.visualization.DataTable();\r\n  data.addColumn('string', 'Mes');\r\n  data.addColumn('number', 'Suscripciones');\r\n\r\n  this.dashboardData.subscriptionsByMonth.forEach(monthly => {\r\n    data.addRow([monthly.month, monthly.count]);\r\n    console.log(`Agregando fila: ${monthly.month}, ${monthly.count}`);\r\n  });\r\n\r\n  const options = {\r\n    titleTextStyle: {\r\n      fontSize: 16,\r\n      bold: true\r\n    },\r\n    legend: { position: 'bottom' },\r\n    areaOpacity: 0.2, \r\n    colors: ['#0d6efd'], \r\n    hAxis: {\r\n      title: 'Mes',\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    vAxis: {\r\n      title: 'Cantidad de Suscripciones',\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 12\r\n      },\r\n      minValue: 0,\r\n      format: '0' \r\n    },\r\n    tooltip: {\r\n      isHtml: true, \r\n      trigger: 'focus' \r\n    },\r\n    lineWidth: 3,\r\n    pointSize: 5,\r\n    chartArea: {\r\n      left: 70,\r\n      top: 50,\r\n      width: '85%',\r\n      height: '70%'\r\n    },\r\n    backgroundColor: 'transparent'\r\n  };\r\n\r\n  try {\r\n    this.monthlySubscriptionsChart = new google.visualization.AreaChart(\r\n      document.getElementById('monthlyChart')\r\n    );\r\n    this.monthlySubscriptionsChart.draw(data, options);\r\n    console.log('Gráfico mensual dibujado exitosamente');\r\n  } catch (error) {\r\n    console.error('Error al dibujar el gráfico mensual:', error);\r\n  }\r\n}\r\n  exportActiveSubscriptionsChart(): void {\r\n    if (!this.activeSubscriptionsChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.activeSubscriptionsChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `suscripciones_activas_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportMonthlyChart(): void {\r\n    if (!this.monthlySubscriptionsChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.monthlySubscriptionsChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `suscripciones_mensuales_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportDataAsCSV(): void {\r\n    if (!this.dashboardData) {\r\n      alert('No hay datos disponibles para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let csvContent = 'Métrica,Valor\\n';\r\n      csvContent += `Total de Suscripciones,${this.dashboardData.totalSubscriptions}\\n`;\r\n      csvContent += `Ingresos Totales,${this.dashboardData.totalRevenue}\\n`;\r\n      csvContent += `Suscripciones Activas,${this.dashboardData.activeSubscriptions}\\n`;\r\n      csvContent += `Suscripciones Inactivas,${this.dashboardData.inactiveSubscriptions}\\n`;\r\n      csvContent += `Con Descuento,${this.dashboardData.withDiscount}\\n`;\r\n      csvContent += `Sin Descuento,${this.dashboardData.withoutDiscount}\\n`;\r\n      \r\n      if (this.dashboardData.subscriptionsByMonth?.length > 0) {\r\n        csvContent += '\\nMes,Cantidad de Suscripciones\\n';\r\n        this.dashboardData.subscriptionsByMonth.forEach(monthly => {\r\n          csvContent += `${monthly.month},${monthly.count}\\n`;\r\n        });\r\n      }\r\n\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      \r\n      if (link.download !== undefined) {\r\n        const url = URL.createObjectURL(blob);\r\n        link.setAttribute('href', url);\r\n        link.setAttribute('download', `dashboard_suscripciones_${new Date().toISOString().split('T')[0]}.csv`);\r\n        link.style.visibility = 'hidden';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar CSV:', error);\r\n      alert('Error al exportar los datos. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  getDiscountSubscriptionsPercentage(): number {\r\n    if (!this.dashboardData || this.dashboardData.totalSubscriptions === 0) return 0;\r\n    return Math.round((this.dashboardData.withDiscount / this.dashboardData.totalSubscriptions) * 100);\r\n  }\r\n\r\n  getActiveSubscriptionsPercentage(): number {\r\n    if (!this.dashboardData || this.dashboardData.totalSubscriptions === 0) return 0;\r\n    return Math.round((this.dashboardData.activeSubscriptions / this.dashboardData.totalSubscriptions) * 100);\r\n  }\r\n\r\n  formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat('es-AR', {\r\n      style: 'currency',\r\n      currency: 'ARS'\r\n    }).format(amount);\r\n  }\r\n}"
        },
        "charts-user": {
          "charts-user.component.css": "\r\n.text-white-75 {\r\n  color: rgba(255, 255, 255, 0.75) !important;\r\n}\r\n\r\n.text-white-50 {\r\n  color: rgba(255, 255, 255, 0.5) !important;\r\n}\r\n\r\n.display-4 {\r\n  font-size: 2.5rem;\r\n  font-weight: 700;\r\n}\r\n\r\n.card {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.card:hover {\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.focus-ring-primary:focus {\r\n  outline: 0;\r\n  box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25);\r\n}\r\n\r\n@keyframes countUp {\r\n  from { opacity: 0; transform: translateY(20px); }\r\n  to { opacity: 1; transform: translateY(0); }\r\n}\r\n\r\n.display-4 {\r\n  animation: countUp 0.8s ease-out;\r\n}\r\n\r\n.badge {\r\n  font-weight: 600;\r\n  letter-spacing: 0.025em;\r\n}\r\n\r\n.btn {\r\n  font-weight: 500;\r\n  letter-spacing: 0.025em;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.card-header {\r\n  background: rgba(var(--bs-primary-rgb), 0.05) !important;\r\n  border-bottom: 1px solid rgba(var(--bs-primary-rgb), 0.1) !important;\r\n}\r\n\r\n.progress {\r\n  border-radius: 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.progress-bar {\r\n  border-radius: 10px;\r\n  transition: width 0.6s ease;\r\n}\r\n\r\n@keyframes spin {\r\n  0% { transform: rotate(0deg); }\r\n  100% { transform: rotate(360deg); }\r\n}\r\n\r\n.fa-spin {\r\n  animation: spin 1s linear infinite;\r\n}",
          "charts-user.component.html": "<div class=\"container-fluid py-4\" style=\"background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); min-height: 100vh;\">\r\n  \r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"d-flex justify-content-between align-items-center\">\r\n        <div>\r\n          <h1 class=\"h2 text-primary fw-bold mb-0\">\r\n            <i class=\"bi bi-person me-2\"></i>\r\n            Dashboard de Usuarios\r\n          </h1>\r\n          <p class=\"text-muted mb-0\">Panel de control y métricas de usuarios</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"row mb-4\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card shadow-sm border-0 overflow-hidden\">\r\n        <div class=\"border-0 py-3\" style=\"background: linear-gradient(135deg, var(--bs-primary) 0%, #002aff 100%);\">\r\n          <h5 class=\"mb-0 text-white fw-semibold\">\r\n            <i class=\"bi bi-funnel-fill me-2 ms-3\"></i>\r\n            Filtros de fecha\r\n          </h5>\r\n        </div>\r\n        <div class=\"card-body bg-light p-4\">\r\n          <form [formGroup]=\"filterForm\" (ngSubmit)=\"onFilterChange()\">\r\n            <div class=\"row align-items-end g-3\">\r\n              <div class=\"col-md-4\">\r\n                <label for=\"fromDate\" class=\"form-label text-primary fw-semibold\">\r\n                  <i class=\"bi bi-calendar-event me-1\"></i>\r\n                  Fecha Desde:\r\n                </label>\r\n                <div class=\"input-group\">\r\n                  <span class=\"input-group-text bg-primary bg-opacity-10 text-primary border-primary border-opacity-25\">\r\n                    <i class=\"bi bi-calendar3\"></i>\r\n                  </span>\r\n                  <input \r\n                    type=\"date\" \r\n                    id=\"fromDate\"\r\n                    class=\"form-control border-primary border-opacity-25 focus-ring-primary\" \r\n                    formControlName=\"from\"\r\n                    (change)=\"onFilterChange()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <label for=\"toDate\" class=\"form-label text-primary fw-semibold\">\r\n                  <i class=\"bi bi-calendar-check me-1\"></i>\r\n                  Fecha Hasta:\r\n                </label>\r\n                <div class=\"input-group\">\r\n                  <span class=\"input-group-text bg-primary bg-opacity-10 text-primary border-primary border-opacity-25\">\r\n                    <i class=\"bi bi-calendar3\"></i>\r\n                  </span>\r\n                  <input \r\n                    type=\"date\" \r\n                    id=\"toDate\"\r\n                    class=\"form-control border-primary border-opacity-25 focus-ring-primary\" \r\n                    formControlName=\"to\"\r\n                    (change)=\"onFilterChange()\">\r\n                </div>\r\n              </div>\r\n              <div class=\"col-md-4\">\r\n                <div class=\"d-flex gap-2\">\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-outline-secondary flex-fill\"\r\n                    (click)=\"clearFilters()\">\r\n                    <i class=\"bi bi-eraser me-1\"></i>\r\n                    Limpiar\r\n                  </button>\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-primary flex-fill position-relative\"\r\n                    (click)=\"loadDashboardData()\"\r\n                    [disabled]=\"loading\">\r\n                    <i class=\"bi bi-arrow-clockwise me-1\" [class.fa-spin]=\"loading\"></i>\r\n                    Actualizar\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"loading\" class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card border-0 shadow-sm\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <div class=\"spinner-border text-primary mb-3\" style=\"width: 3rem; height: 3rem;\" role=\"status\">\r\n            <span class=\"visually-hidden\">Cargando...</span>\r\n          </div>\r\n          <h4 class=\"text-primary mb-2\">Cargando datos del dashboard...</h4>\r\n          <p class=\"text-muted mb-0\">Por favor espera mientras procesamos la información</p>\r\n          <div class=\"progress mt-3 mx-auto\" style=\"width: 200px; height: 4px;\">\r\n            <div class=\"progress-bar bg-primary progress-bar-striped progress-bar-animated\" \r\n                 role=\"progressbar\" style=\"width: 100%\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loading && dashboardData\">\r\n    \r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, var(--bs-primary) 0%, #4c63d2 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Total de Usuarios\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-0 lh-1\">\r\n                  {{ dashboardData.totalUsers | number }}\r\n                </div>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-people-fill\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-arrow-up-right text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #198754 0%, #20c997 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Usuarios Premium\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.premiumUsers | number }}\r\n                </div>\r\n                <div class=\"d-flex align-items-center mb-2\">\r\n                  <div class=\"progress bg-white bg-opacity-25 me-2\" style=\"height: 6px; width: 80px;\">\r\n                    <div class=\"progress-bar bg-white\" \r\n                         [style.width.%]=\"getPremiumUsersPercentage()\">\r\n                    </div>\r\n                  </div>\r\n                  <small class=\"text-white fw-semibold\">{{ getPremiumUsersPercentage() }}%</small>\r\n                </div>\r\n                <small class=\"text-white-75\">\r\n                  <i class=\"bi bi-person me-1\"></i>Estándar: {{ dashboardData.standardUsers | number }}\r\n                </small>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-gem\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-star-fill text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #0dcaf0 0%, #0a58ca 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Usuarios Verificados\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.verifiedUsers | number }}\r\n                </div>\r\n                <div class=\"d-flex align-items-center mb-2\">\r\n                  <div class=\"progress bg-white bg-opacity-25 me-2\" style=\"height: 6px; width: 80px;\">\r\n                    <div class=\"progress-bar bg-white\" \r\n                         [style.width.%]=\"getVerifiedUsersPercentage()\">\r\n                    </div>\r\n                  </div>\r\n                  <small class=\"text-white fw-semibold\">{{ getVerifiedUsersPercentage() }}%</small>\r\n                </div>\r\n                <small class=\"text-white-75\">\r\n                  <i class=\"bi bi-x-circle me-1\"></i>No verificados: {{ dashboardData.unverifiedUsers | number }}\r\n                </small>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-patch-check-fill\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-shield-check text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-3 col-md-6 mb-4\">\r\n        <div class=\"card shadow-lg border-0 h-100 overflow-hidden position-relative\">\r\n          <div class=\"card-body p-4\" style=\"background: linear-gradient(135deg, #fd7e14 0%, #ffc107 100%);\">\r\n            <div class=\"d-flex justify-content-between align-items-center text-white\">\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"text-white-50 text-uppercase fw-bold mb-2\" style=\"font-size: 0.75rem; letter-spacing: 0.5px;\">\r\n                  Usuarios Activos\r\n                </div>\r\n                <div class=\"display-4 fw-bold mb-1 lh-1\">\r\n                  {{ dashboardData.activeUsers | number }}\r\n                </div>\r\n                <small class=\"text-white-75 d-block mb-1\">\r\n                  <i class=\"bi bi-person-dash me-1\"></i>Inactivos: {{ dashboardData.inactiveUsers | number }}\r\n                </small>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <span class=\"badge bg-white bg-opacity-25 text-white px-2 py-1 rounded-pill\" \r\n                        *ngIf=\"dashboardData.activeUsers > dashboardData.inactiveUsers\">\r\n                    <i class=\"bi bi-hand-thumbs-up-fill me-1\"></i>Más activos\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              <div class=\"ms-3\">\r\n                <i class=\"bi bi-activity\" style=\"font-size: 3rem; opacity: 0.3;\"></i>\r\n              </div>\r\n            </div>\r\n            <div class=\"position-absolute top-0 end-0 p-3\">\r\n              <i class=\"bi bi-graph-up-arrow text-white-50\" style=\"font-size: 1.2rem;\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row mb-4\">\r\n      <div class=\"col-xl-6 col-lg-7 mb-4\">\r\n        <div class=\"card shadow-sm border-0 h-100\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-pie-chart-fill me-2\"></i>\r\n                Distribución de Usuarios\r\n              </h6>\r\n              <div class=\"dropdown\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" type=\"button\" (click)=\"exportActiveUsersChart()\">\r\n                  <i class=\"bi bi-download me-2\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div class=\"chart-pie pt-2 pb-2\">\r\n              <div id=\"activeUsersChart\" style=\"height: 300px;\"></div>\r\n            </div>\r\n            <div class=\"row mt-4 text-center\">\r\n              <div class=\"col-6\">\r\n                <div class=\"p-3 bg-success bg-opacity-10 rounded-3\">\r\n                  <i class=\"bi bi-circle-fill text-success me-2\"></i>\r\n                  <strong class=\"text-success\">Activos</strong>\r\n                  <div class=\"h5 mb-0 text-success mt-1\">{{ dashboardData.activeUsers | number }}</div>\r\n                </div>\r\n              </div>\r\n              <div class=\"col-6\">\r\n                <div class=\"p-3 bg-danger bg-opacity-10 rounded-3\">\r\n                  <i class=\"bi bi-circle-fill text-danger me-2\"></i>\r\n                  <strong class=\"text-danger\">Inactivos</strong>\r\n                  <div class=\"h5 mb-0 text-danger mt-1\">{{ dashboardData.inactiveUsers | number }}</div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"col-xl-6 col-lg-5 mb-4\">\r\n        <div class=\"card shadow-sm border-0 h-100\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-fill me-2\"></i>\r\n                Resumen de Estadísticas\r\n              </h6>\r\n              <button class=\"btn btn-sm btn-outline-success\" (click)=\"exportDataAsCSV()\">\r\n                <i class=\"bi bi-download me-1\"></i> Excel\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-0\">\r\n            <div class=\"list-group list-group-flush\">\r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-people-fill text-primary\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Total de Usuarios</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Usuarios registrados</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-primary rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.totalUsers | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-gem text-success\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Usuarios Premium</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">{{ getPremiumUsersPercentage() }}% del total</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-success rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.premiumUsers | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-patch-check-fill text-info\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Usuarios Verificados</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">{{ getVerifiedUsersPercentage() }}% del total</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-info rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.verifiedUsers | number }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n              \r\n              <div class=\"list-group-item border-0 py-3\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"d-flex align-items-center\">\r\n                    <div class=\"me-3\">\r\n                      <i class=\"bi bi-geo-alt-fill text-warning\"></i>\r\n                    </div>\r\n                    <div>\r\n                      <strong class=\"text-dark\">Localidades Registradas</strong>\r\n                      <br>\r\n                      <small class=\"text-muted\">Diversidad geográfica</small>\r\n                    </div>\r\n                  </div>\r\n                  <span class=\"badge bg-warning rounded-pill fs-6 px-3 py-2\">\r\n                    {{ dashboardData.usersByLocation.length || 0 }}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"row\">\r\n      <div class=\"col-12\">\r\n        <div class=\"card shadow-sm border-0\">\r\n          <div class=\"card-header bg-white border-bottom py-3\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <h6 class=\"mb-0 text-primary fw-semibold\">\r\n                <i class=\"bi bi-bar-chart-line-fill me-2\"></i>\r\n                Usuarios por Localidad\r\n              </h6>\r\n              <div class=\"d-flex gap-2\">\r\n                <button class=\"btn btn-sm btn-outline-primary\" (click)=\"exportLocationChart()\">\r\n                  <i class=\"bi bi-download me-1\"></i>PNG\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div class=\"card-body p-4\">\r\n            <div *ngIf=\"dashboardData.usersByLocation && dashboardData.usersByLocation.length > 0; else noLocationData\">\r\n              <div id=\"locationChart\" style=\"height: 400px;\"></div>\r\n            </div>\r\n            <ng-template #noLocationData>\r\n              <div class=\"text-center py-5\">\r\n                <div class=\"bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n                     style=\"width: 80px; height: 80px;\">\r\n                  <i class=\"bi bi-map text-muted\" style=\"font-size: 2rem;\"></i>\r\n                </div>\r\n                <h5 class=\"text-muted\">No hay datos de localización disponibles</h5>\r\n                <p class=\"text-muted mb-3\">No se encontraron datos para el período seleccionado.</p>\r\n                <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n                  <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n                  Recargar datos\r\n                </button>\r\n              </div>\r\n            </ng-template>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div *ngIf=\"!loading && !dashboardData\" class=\"row\">\r\n    <div class=\"col-12\">\r\n      <div class=\"card border-0 shadow-sm\">\r\n        <div class=\"card-body text-center py-5\">\r\n          <div class=\"bg-warning bg-opacity-10 rounded-circle d-inline-flex align-items-center justify-content-center mb-3\" \r\n               style=\"width: 80px; height: 80px;\">\r\n            <i class=\"bi bi-exclamation-triangle text-warning\" style=\"font-size: 2rem;\"></i>\r\n          </div>\r\n          <h4 class=\"text-dark mb-2\">No se pudieron cargar los datos</h4>\r\n          <p class=\"text-muted mb-4\">Ha ocurrido un error al cargar la información. Intenta nuevamente o contacta a soporte.</p>\r\n          <div class=\"d-flex gap-2 justify-content-center\">\r\n            <button class=\"btn btn-primary\" (click)=\"loadDashboardData()\">\r\n              <i class=\"bi bi-arrow-clockwise me-1\"></i>\r\n              Reintentar\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
          "charts-user.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ChartsUserComponent } from './charts-user.component';\r\n\r\ndescribe('ChartsUserComponent', () => {\r\n  let component: ChartsUserComponent;\r\n  let fixture: ComponentFixture<ChartsUserComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ChartsUserComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ChartsUserComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "charts-user.component.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { DashboardsService } from '../../services/dashboards.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserDashboardDto } from '../../models/UserDahsboardDto';\r\nimport { interval, Subscription } from 'rxjs';\r\n\r\n\r\ndeclare var google: any;\r\n\r\n@Component({\r\n  selector: 'app-charts-user',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule,CommonModule],\r\n  templateUrl: './charts-user.component.html',\r\n  styleUrl: './charts-user.component.css'\r\n})\r\nexport class ChartsUserComponent implements OnInit {\r\n\r\n  filterForm: FormGroup;\r\n  dashboardData: UserDashboardDto | null = null;\r\n  loading = false;\r\n\r\n\r\n  private activeUsersChart: any;\r\n  private locationChart: any;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private dashboardService: DashboardsService\r\n  ) {\r\n    this.filterForm = this.fb.group({\r\n      from: [''],\r\n      to: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    google.charts.load('current', { packages: ['corechart', 'bar'] });\r\n    google.charts.setOnLoadCallback(() => {\r\n      this.loadDashboardData();\r\n    });\r\n  }\r\n\r\n  loadDashboardData(): void {\r\n    this.loading = true;\r\n    const filters = this.filterForm.value;\r\n    \r\n    this.dashboardService.getUserDashboard(filters.from, filters.to)\r\n      .subscribe({\r\n        next: (data) => {\r\n          this.dashboardData = data;\r\n          this.loading = false;\r\n          this.drawCharts();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading dashboard data:', error);\r\n          this.loading = false;\r\n        }\r\n      });\r\n  }\r\n\r\n  onFilterChange(): void {\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.filterForm.reset();\r\n    this.loadDashboardData();\r\n  }\r\n\r\n  private drawCharts(): void {\r\n    if (!this.dashboardData) return;\r\n\r\n    setTimeout(() => {\r\n      this.drawActiveUsersChart();\r\n      this.drawLocationChart();\r\n    }, 100);\r\n  }\r\n\r\n  private drawActiveUsersChart(): void {\r\n    if (!this.dashboardData) return;\r\n\r\n    const data = google.visualization.arrayToDataTable([\r\n      ['Estado', 'Cantidad'],\r\n      ['Usuarios Activos', this.dashboardData.activeUsers],\r\n      ['Usuarios Inactivos', this.dashboardData.inactiveUsers]\r\n    ]);\r\n\r\n    const options = {\r\n      title: 'Distribución de Usuarios Activos/Inactivos',\r\n      titleTextStyle: {\r\n        fontSize: 16,\r\n        bold: true\r\n      },\r\n      pieHole: 0.3,\r\n      colors: ['#28a745', '#dc3545'],\r\n      legend: {\r\n        position: 'bottom',\r\n        alignment: 'center'\r\n      },\r\n      chartArea: {\r\n        left: 20,\r\n        top: 50,\r\n        width: '90%',\r\n        height: '70%'\r\n      }\r\n    };\r\n\r\n    this.activeUsersChart = new google.visualization.PieChart(\r\n      document.getElementById('activeUsersChart')\r\n    );\r\n    this.activeUsersChart.draw(data, options);\r\n  }\r\n\r\n  private drawLocationChart(): void {\r\n  if (!this.dashboardData?.usersByLocation?.length) return;\r\n\r\n  const data = new google.visualization.DataTable();\r\n  data.addColumn('string', 'Localidad');\r\n  data.addColumn('number', 'Cantidad de Usuarios');\r\n  data.addColumn({ type: 'string', role: 'style' });\r\n  data.addColumn({ type: 'number', role: 'annotation' });\r\n  data.addColumn({ type: 'string', role: 'tooltip', p: { html: true } });\r\n\r\n  const colors = [\r\n    '#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8',\r\n    '#6f42c1', '#fd7e14', '#20c997', '#343a40'\r\n  ];\r\n\r\n  this.dashboardData.usersByLocation.forEach((loc, index) => {\r\n    const color = colors[index % colors.length];\r\n\r\n    const tooltip = `\r\n      <div style=\"min-width: 150px; padding: 6px;\">\r\n        <strong>${loc.location}</strong><br/>\r\n        ${loc.count} usuarios\r\n      </div>\r\n    `;\r\n\r\n    data.addRow([loc.location, loc.count, `color: ${color}`, loc.count, tooltip]);\r\n  });\r\n\r\n  const options = {\r\n    title: 'Usuarios por Localidad',\r\n    titleTextStyle: {\r\n      fontSize: 16,\r\n      bold: true\r\n    },\r\n    hAxis: {\r\n      title: 'Cantidad de Usuarios',\r\n      minValue: 0,\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    vAxis: {\r\n      title: 'Localidades',\r\n      titleTextStyle: {\r\n        fontSize: 14,\r\n        bold: true\r\n      },\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    legend: { position: 'none' },\r\n    chartArea: {\r\n      left: 140,\r\n      top: 50,\r\n      width: '70%',\r\n      height: '80%'\r\n    },\r\n    bar: {\r\n      groupWidth: '75%'\r\n    },\r\n    tooltip: {\r\n      isHtml: true,\r\n      textStyle: {\r\n        fontSize: 12\r\n      }\r\n    },\r\n    annotations: {\r\n      textStyle: {\r\n        fontSize: 12,\r\n        color: '#000',\r\n        bold: true\r\n      }\r\n    }\r\n  };\r\n\r\n  this.locationChart = new google.visualization.BarChart(\r\n    document.getElementById('locationChart')\r\n  );\r\n  this.locationChart.draw(data, options);\r\n}\r\n  exportActiveUsersChart(): void {\r\n    if (!this.activeUsersChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.activeUsersChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `usuarios_activos_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportLocationChart(): void {\r\n    if (!this.locationChart) {\r\n      alert('El gráfico no está disponible para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const imgUri = this.locationChart.getImageURI();\r\n      \r\n      const link = document.createElement('a');\r\n      link.download = `usuarios_por_localidad_${new Date().toISOString().split('T')[0]}.png`;\r\n      link.href = imgUri;\r\n      \r\n      document.body.appendChild(link);\r\n      link.click();\r\n      document.body.removeChild(link);\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar gráfico:', error);\r\n      alert('Error al exportar el gráfico. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  exportDataAsCSV(): void {\r\n    if (!this.dashboardData) {\r\n      alert('No hay datos disponibles para exportar');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      let csvContent = 'Métrica,Valor\\n';\r\n      csvContent += `Total de Usuarios,${this.dashboardData.totalUsers}\\n`;\r\n      csvContent += `Usuarios Activos,${this.dashboardData.activeUsers}\\n`;\r\n      csvContent += `Usuarios Inactivos,${this.dashboardData.inactiveUsers}\\n`;\r\n      csvContent += `Usuarios Premium,${this.dashboardData.premiumUsers}\\n`;\r\n      csvContent += `Usuarios Verificados,${this.dashboardData.verifiedUsers}\\n`;\r\n      csvContent += `Usuarios No Verificados,${this.dashboardData.unverifiedUsers}\\n`;\r\n      csvContent += `Usuarios Estándar,${this.dashboardData.standardUsers}\\n`;\r\n      \r\n      if (this.dashboardData.usersByLocation?.length > 0) {\r\n        csvContent += '\\nLocalidad,Cantidad de Usuarios\\n';\r\n        this.dashboardData.usersByLocation.forEach(location => {\r\n          csvContent += `${location.location},${location.count}\\n`;\r\n        });\r\n      }\r\n\r\n      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n      const link = document.createElement('a');\r\n      \r\n      if (link.download !== undefined) {\r\n        const url = URL.createObjectURL(blob);\r\n        link.setAttribute('href', url);\r\n        link.setAttribute('download', `dashboard_usuarios_${new Date().toISOString().split('T')[0]}.csv`);\r\n        link.style.visibility = 'hidden';\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n      }\r\n      \r\n    } catch (error) {\r\n      console.error('Error al exportar CSV:', error);\r\n      alert('Error al exportar los datos. Intenta nuevamente.');\r\n    }\r\n  }\r\n\r\n  getPremiumUsersPercentage(): number {\r\n    if (!this.dashboardData || this.dashboardData.totalUsers === 0) return 0;\r\n    return Math.round((this.dashboardData.premiumUsers / this.dashboardData.totalUsers) * 100);\r\n  }\r\n\r\n  getVerifiedUsersPercentage(): number {\r\n    if (!this.dashboardData || this.dashboardData.totalUsers === 0) return 0;\r\n    return Math.round((this.dashboardData.verifiedUsers / this.dashboardData.totalUsers) * 100);\r\n  }\r\n}\r\n"
        },
        "edit-publication": {
          "edit-publication.component.css": ".fondo-gris {\r\n  padding: 20px 0;\r\n  min-height: 100vh;\r\n}\r\n\r\n.step-progress {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.step {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.step-circle {\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  background-color: #f8f9fa; \r\n  color: black;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: bold;\r\n  z-index: 1;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.step-circle.active {\r\n  background-color: #198754; \r\n  color: white;\r\n}\r\n\r\n.step-line {\r\n  height: 4px;\r\n  width: 50px;\r\n  background-color: #dee2e6;\r\n  margin: 0 10px;\r\n  z-index: 0;\r\n}",
          "edit-publication.component.html": "@if (isOwner) {\r\n  <div class=\"fondo-gris py-5\">\r\n  <div class=\"container\">\r\n    <div class=\"bg-white rounded shadow p-4\">\r\n\r\n      <div class=\"step-progress\">\r\n        @for (s of [1, 2, 3, 4]; track s; let i = $index) {\r\n          <div class=\"step\">\r\n            <div class=\"step-circle\" [class.active]=\"step === s\">{{ s }}</div>\r\n            @if (i < 3) {\r\n              <div class=\"step-line\"></div>\r\n            }\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <!-- Loading indicator -->\r\n      <div *ngIf=\"isLoading\" class=\"text-center py-5\">\r\n        <div class=\"spinner-border\" role=\"status\">\r\n          <span class=\"visually-hidden\">Cargando...</span>\r\n        </div>\r\n        <p class=\"mt-2 text-muted\">Cargando datos de la publicación...</p>\r\n      </div>\r\n\r\n      <form [formGroup]=\"form\" novalidate *ngIf=\"!isLoading\">\r\n        <!-- PASO 1: Datos principales -->\r\n        <div *ngIf=\"step === 1\">\r\n          <!-- Título -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Título</label>\r\n            <input type=\"text\" class=\"form-control\" formControlName=\"title\" [ngClass]=\"onValidate('title')\">\r\n            <div class=\"invalid-feedback\">{{showError('title')}}</div>\r\n          </div>\r\n\r\n          <!-- Descripción -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Descripción</label>\r\n            <textarea class=\"form-control\" formControlName=\"description\" rows=\"4\" [ngClass]=\"onValidate('description')\"></textarea>\r\n            <div class=\"invalid-feedback\">{{showError('description')}}</div>\r\n          </div>\r\n\r\n          <!-- Fila: Precio + Categorías -->\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 mb-3\">\r\n              <label class=\"form-label\">Precio</label>\r\n              <input type=\"number\" class=\"form-control\" formControlName=\"price\" [ngClass]=\"onValidate('price')\" />\r\n              <div class=\"invalid-feedback\">{{showError('price')}}</div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 mb-3\">\r\n              <label class=\"form-label\">Categorías</label>\r\n              <ng-select\r\n                [items]=\"categories\"\r\n                bindLabel=\"description\"\r\n                bindValue=\"id\"\r\n                [multiple]=\"true\"\r\n                [closeOnSelect]=\"false\"\r\n                placeholder=\"Selecciona categorías\"\r\n                formControlName=\"categories\"\r\n                [ngClass]=\"onValidate('categories')\"\r\n                (change)=\"onCategoriesChange($event)\"\r\n                class=\"w-100\"\r\n              ></ng-select>\r\n              <div class=\"invalid-feedback\">{{showError('categories')}}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Fila completa: Etiquetas -->\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 mb-3\">\r\n              <label class=\"form-label\">Condición</label>\r\n              <ng-select\r\n                [items]=\"conditionOptions\"\r\n                bindLabel=\"description\"\r\n                bindValue=\"id\"\r\n                placeholder=\"Seleccione condición\"\r\n                [ngClass]=\"onValidate('conditionTag')\"\r\n                formControlName=\"conditionTag\"\r\n                class=\"w-100\"\r\n              ></ng-select>\r\n              <div class=\"invalid-feedback\">{{showError('conditionTag')}}</div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 mb-3\">\r\n              <label class=\"form-label\">Tipo de precio</label>\r\n              <ng-select\r\n                [items]=\"priceOptions\"\r\n                bindLabel=\"description\"\r\n                bindValue=\"id\"\r\n                placeholder=\"Seleccione tipo de precio\"\r\n                [ngClass]=\"onValidate('priceTag')\"\r\n                formControlName=\"priceTag\"\r\n                class=\"w-100\"\r\n              ></ng-select>\r\n              <div class=\"invalid-feedback\">{{showError('priceTag')}}</div>\r\n            </div>\r\n\r\n            <div class=\"col-md-4 mb-3\">\r\n              <label class=\"form-label\">Envío</label>\r\n              <ng-select\r\n                [items]=\"shippingOptions\"\r\n                bindLabel=\"description\"\r\n                bindValue=\"id\"\r\n                placeholder=\"Seleccione opción de envío\"\r\n                formControlName=\"shippingTag\"\r\n                [ngClass]=\"onValidate('shippingTag')\"\r\n                class=\"w-100\"\r\n              ></ng-select>\r\n              <div class=\"invalid-feedback\">{{showError('shippingTag')}}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"text-end mt-3 w-100\">\r\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"nextStep()\">Siguiente</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- PASO 2: Ubicación -->\r\n        <div *ngIf=\"step === 2\">\r\n          <h5 class=\"mb-3\">Seleccionar Ubicación</h5>\r\n          <p class=\"text-muted mb-3\">\r\n            Selecciona una localidad en las opciones de debajo para iniciar el mapa y luego\r\n            haz clic en el mapa para seleccionar la ubicación de tu publicación.\r\n            Esta ubicación se mostrará de forma aproximada para proteger tu privacidad.\r\n          </p>\r\n\r\n          <!-- Selector de localidad -->\r\n          <div class=\"mb-3 col-3\">\r\n            <label class=\"mb-2\">Localidad</label>\r\n            <ng-select\r\n              [items]=\"locations\"\r\n              bindLabel=\"description\"\r\n              bindValue=\"id\"\r\n              formControlName=\"location_id\"\r\n              placeholder=\"Seleccione localidad\"\r\n              [ngClass]=\"onValidate('location_id')\"\r\n            >\r\n            </ng-select>\r\n            <div class=\"invalid-feedback\">{{showError('location_id')}}</div>\r\n          </div>\r\n          \r\n          <!-- Contenedor del mapa -->\r\n          <div #mapContainer style=\"height: 400px; width: 100%; border-radius: 8px; border: 1px solid #ddd;\"></div>\r\n\r\n          <div class=\"text-end mt-3\">\r\n            <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"prevStep()\">Anterior</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"nextStep()\">Siguiente</button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- PASO 3: Imágenes -->\r\n        <div *ngIf=\"step === 3\" class=\"row mb-3\">\r\n          <div class=\"col-12 mb-3\">\r\n            <h5>Imágenes de la publicación</h5>\r\n            <p class=\"text-muted\">Puedes mantener las imágenes existentes o cambiarlas por nuevas. (JPG, PNG máximo 5MB)</p>\r\n          </div>\r\n          \r\n          <div class=\"col-4\" *ngFor=\"let img of imageSlots; let i = index; trackBy: trackByIndex\">\r\n            <div class=\"position-relative border rounded p-1 text-center\" style=\"height: 210px;\">\r\n              <div *ngIf=\"img; else emptySlot\">\r\n                <img [src]=\"getImagePreview(img)\" class=\"img-fluid rounded\" style=\"max-height: 180px;\" />\r\n                <button type=\"button\" class=\"btn-close position-absolute top-0 end-0 m-1\" aria-label=\"Close\"\r\n                        (click)=\"removeImageSlot(i)\"></button>\r\n                <!-- Indicador si es imagen existente -->\r\n                <div *ngIf=\"isExistingImage(img)\" class=\"position-absolute bottom-0 start-0 m-1\">\r\n                  <small class=\"badge bg-info\">Existente</small>\r\n                </div>\r\n                <!-- Indicador si es imagen nueva -->\r\n                <div *ngIf=\"isNewImage(img)\" class=\"position-absolute bottom-0 start-0 m-1\">\r\n                  <small class=\"badge bg-success\">Nueva</small>\r\n                </div>\r\n              </div>\r\n              <ng-template #emptySlot>\r\n                <label class=\"d-flex align-items-center justify-content-center h-100 w-100 text-muted\"\r\n                      style=\"cursor: pointer;\">\r\n                  <input type=\"file\" (change)=\"onSlotImageSelected($event, i)\" hidden accept=\"image/jpeg,image/jpg,image/png\" />\r\n                  <span class=\"text-center\">\r\n                    + Agregar imagen<br>\r\n                    <small>(JPG, PNG)</small>\r\n                  </span>\r\n                </label>\r\n              </ng-template>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"text-end mt-3 w-100\">\r\n            @if (!hasAtLeastOneImage()) {\r\n              <div class=\"text-danger mb-2\">\r\n                Debe mantener o cargar al menos una imagen para continuar.\r\n              </div>\r\n            }\r\n            <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"prevStep()\">Anterior</button>\r\n            <button type=\"button\" class=\"btn btn-primary\" (click)=\"nextStep()\" [disabled]=\"!hasAtLeastOneImage()\">\r\n              Siguiente\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- PASO 4: Contactos -->\r\n        <div *ngIf=\"step === 4\" formArrayName=\"contacts\">\r\n          <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <h5 class=\"mb-0\">Información de contacto</h5>\r\n            <small class=\"text-muted\">{{contacts.length}}/10 contactos</small>\r\n          </div>\r\n          <p class=\"text-muted mb-3\">Actualiza tu información de contacto para esta publicación.</p>\r\n          \r\n          <div\r\n            class=\"mb-3\"\r\n            *ngFor=\"let contact of contacts.controls; let i = index\"\r\n            [formGroupName]=\"i\"\r\n          >\r\n            <div class=\"row\">\r\n              <!-- Tipo de contacto -->\r\n              <div class=\"col-md-5 mb-2\">\r\n                <ng-select\r\n                  [items]=\"contactTypes\"\r\n                  bindLabel=\"description\"\r\n                  bindValue=\"id\"\r\n                  placeholder=\"Seleccione tipo de contacto\"\r\n                  formControlName=\"contact_type_id\"\r\n                  class=\"w-100\"\r\n                  (change)=\"onContactTypeChange(i)\"\r\n                >\r\n                </ng-select>\r\n              </div>\r\n\r\n              <!-- Valor del contacto -->\r\n              <div class=\"col-md-5 mb-2\">\r\n                <input\r\n                  class=\"form-control\"\r\n                  [attr.placeholder]=\"getPlaceholder(i)\"\r\n                  formControlName=\"contact_value\"\r\n                />\r\n                <small *ngIf=\"getHelpText(i)\" class=\"form-text text-muted\">\r\n                  {{ getHelpText(i) }}\r\n                </small>\r\n                <div *ngIf=\"contact.get('contact_value')?.invalid && contact.get('contact_value')?.touched\" class=\"text-danger\">\r\n                  {{ showErrorAt('contacts', i, 'contact_value') }}\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-md-2 mb-2 d-flex align-items-start\">\r\n                <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeContact(i)\">X</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-outline-primary mb-3\" \r\n            (click)=\"addContact()\"\r\n            [disabled]=\"contacts.length >= 10\"\r\n          >\r\n            <i class=\"fas fa-plus me-1\"></i>\r\n            Agregar contacto\r\n          </button>\r\n          \r\n          <div *ngIf=\"contacts.length >= 10\" class=\"alert alert-warning\">\r\n            <small>Has alcanzado el límite máximo de 10 contactos.</small>\r\n          </div>\r\n          \r\n          <div class=\"text-end mt-3 w-100\">\r\n            <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"prevStep()\">Anterior</button>\r\n            <button type=\"button\" class=\"btn btn-success\" (click)=\"submit()\">\r\n              <i class=\"fas fa-save me-1\"></i>\r\n              Actualizar Publicación\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>\r\n}",
          "edit-publication.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { EditPublicationComponent } from './edit-publication.component';\r\n\r\ndescribe('EditPublicationComponent', () => {\r\n  let component: EditPublicationComponent;\r\n  let fixture: ComponentFixture<EditPublicationComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [EditPublicationComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(EditPublicationComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "edit-publication.component.ts": "import { Component, NgZone, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { FileService } from '../../services/file.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport Swal from 'sweetalert2';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport * as L from 'leaflet';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { UserGet } from '../../models/UserGet';\r\n\r\n@Component({\r\n  selector: 'app-edit-publication',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, NgSelectModule],\r\n  templateUrl: './edit-publication.component.html',\r\n  styleUrls: ['./edit-publication.component.css']\r\n})\r\nexport class EditPublicationComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;\r\n  \r\n  publicationId!: number;\r\n  step = 1;\r\n  form: FormGroup;\r\n  private map!: L.Map;\r\n  private marker!: L.Marker;\r\n  isOwner: boolean = false;\r\n\r\n  uploadedImagePaths: string[] = [];\r\n  existingImages: string[] = [];\r\n  isLoading = true;\r\n\r\n  locations: { id: number; description: string }[] = [];\r\n  categories: { id: number; description: string }[] = [];\r\n  tags: { id: number; description: string }[] = [];\r\n  contactTypes: { id: number; description: string }[] = [];\r\n  imageSlots: (File | string | null)[] = [null, null, null];\r\n  selectedImages: File[] = [];\r\n  userData!: UserGet;\r\n  user: UserGet = new UserGet();\r\n\r\n  conditionOptions = [\r\n    { id: 1, description: \"Nuevo\" },\r\n    { id: 2, description: \"Usado\" }\r\n  ];\r\n\r\n  priceOptions = [\r\n    { id: 4, description: \"Precio negociable\" },\r\n    { id: 5, description: \"Precio fijo\" }\r\n  ];\r\n\r\n  shippingOptions = [\r\n    { id: 3, description: \"Envío incluido\" },\r\n    { id: 6, description: \"Retiro en mano\" },\r\n    { id: 7, description: \"Punto de encuentro\" }\r\n  ];\r\n\r\n  locationCoordinates: { [key: number]: [number, number] } = {\r\n    1: [-31.9135, -63.6823], // Oncativo\r\n    2: [-32.0418, -63.5714], // Oliva\r\n    3: [-31.8431, -63.7454], // Manfredi\r\n    4: [-31.7773, -63.8028], // Laguna Larga\r\n    5: [-31.6824, -63.8852], // Pilar\r\n    6: [-31.6536, -63.9105], // Río Segundo\r\n    7: [-31.5645, -63.5399], // Villa del Rosario\r\n  };\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private publicationService: PublicationsService,\r\n    private fileService: FileService,\r\n    private userService: UsersService,\r\n    private utilsService: UtilsService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private authService: AuthService,\r\n  ) {\r\n    this.form = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n      description: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(500)]],\r\n      price: [null, [Validators.required, Validators.min(1)]],\r\n      location_id: [null, Validators.required],\r\n      categories: [null, Validators.required],\r\n      conditionTag: [null, Validators.required],\r\n      priceTag: [null, Validators.required],\r\n      shippingTag: [[], Validators.required],\r\n      latitude: [null, Validators.required],\r\n      longitude: [null, Validators.required],\r\n      contacts: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    const userId = this.authService.getUser().id;\r\n    this.publicationId = Number(this.route.snapshot.paramMap.get('id'));\r\n\r\n    this.publicationService.isSameUserPublication(this.publicationId, userId)\r\n      .subscribe(isSame => {\r\n        this.isOwner = isSame;\r\n        if (!this.isOwner) {\r\n          this.checkAdmin();\r\n          if (!this.isOwner) {\r\n            this.router.navigate(['unauthorized']);\r\n          }\r\n        }\r\n        this.loadUserData(userId);\r\n        this.loadSelectData().then(() => {\r\n          this.loadPublicationData();\r\n        });\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.form.get('location_id')?.valueChanges.subscribe((locationId) => {\r\n      if (locationId && this.locationCoordinates[locationId]) {\r\n        const newCoords = this.locationCoordinates[locationId];\r\n        \r\n        this.form.patchValue({\r\n          latitude: newCoords[0],\r\n          longitude: newCoords[1]\r\n        });\r\n        \r\n        if (this.map) {\r\n          this.map.remove(); \r\n          this.map = undefined as any;\r\n        }\r\n        \r\n        setTimeout(() => {\r\n          if (this.mapContainer && this.mapContainer.nativeElement) {\r\n            this.initMapWithCoords(newCoords);\r\n          }\r\n        }, 100);\r\n      }\r\n    });\r\n  }\r\n\r\n  initMapWithCoords(coords: [number, number]): void {\r\n    if (this.mapContainer && this.mapContainer.nativeElement) {\r\n      const container = this.mapContainer.nativeElement;\r\n      \r\n      try {\r\n        this.map = L.map(container).setView(coords, 13);\r\n\r\n        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n          attribution: '© OpenStreetMap contributors'\r\n        }).addTo(this.map);\r\n\r\n        const customIcon = L.divIcon({\r\n          className: 'custom-marker',\r\n          html: '<div style=\"background-color: #007bff; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.3);\"></div>',\r\n          iconSize: [20, 20],\r\n          iconAnchor: [10, 10]\r\n        });\r\n\r\n        this.marker = L.marker(coords, {\r\n          icon: customIcon,\r\n          draggable: true\r\n        }).addTo(this.map);\r\n\r\n        setTimeout(() => {\r\n          if (this.map) {\r\n            this.map.invalidateSize();\r\n          }\r\n        }, 100);\r\n\r\n        this.map.on('click', (e: L.LeafletMouseEvent) => {\r\n          const { lat, lng } = e.latlng;\r\n          this.updateMarkerPosition(lat, lng);\r\n        });\r\n\r\n        this.marker.on('dragend', (e: L.DragEndEvent) => {\r\n          const { lat, lng } = e.target.getLatLng();\r\n          this.updateMarkerPosition(lat, lng);\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('Error initializing map:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getCategoryIdsByNames(categoryNames: string[]): number[] {\r\n    return categoryNames.map(name => {\r\n      const category = this.categories.find(cat => cat.description === name);\r\n      return category ? category.id : null;\r\n    }).filter((id): id is number => id !== null);\r\n  }\r\n\r\n  private getTagIdByName(tagName: string): number | null {\r\n    const tagMapping: { [key: string]: number } = {\r\n      'Nuevo': 1,\r\n      'Usado': 2,\r\n      'Envío incluido': 3,\r\n      'Precio negociable': 4,\r\n      'Precio fijo': 5,\r\n      'Retiro en mano': 6,\r\n      'Punto de encuentro': 7\r\n    };\r\n    \r\n    return tagMapping[tagName] || null;\r\n  }\r\n\r\n  private getContactTypeIdByName(contactTypeName: string): number | null {\r\n    const contactType = this.contactTypes.find(ct => ct.description === contactTypeName);\r\n    return contactType ? contactType.id : null;\r\n  }\r\n\r\n  private getLocationIdByName(locationName: string): number | null {\r\n    const location = this.locations.find(loc => loc.description === locationName);\r\n    return location ? location.id : null;\r\n  }\r\n\r\n  loadPublicationData(): void {\r\n    this.publicationService.getPublicationById(this.publicationId).subscribe({\r\n      next: (publication) => {\r\n        console.log('Datos de la publicación:', publication);\r\n        this.populateForm(publication);\r\n        this.isLoading = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar la publicación:', error);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'No se pudo cargar la publicación',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        }).then(() => {\r\n          this.router.navigate(['/home']);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  populateForm(publication: any): void {\r\n    const categoryIds = this.getCategoryIdsByNames(publication.categories || []);\r\n    const locationId = this.getLocationIdByName(publication.location);\r\n\r\n    this.form.patchValue({\r\n      title: publication.title,\r\n      description: publication.description,\r\n      price: publication.price,\r\n      location_id: locationId,\r\n      categories: categoryIds,\r\n      latitude: parseFloat(publication.latitude), \r\n      longitude: parseFloat(publication.longitude) \r\n    });\r\n\r\n    if (publication.tags && publication.tags.length > 0) {\r\n      publication.tags.forEach((tagName: string) => {\r\n        const tagId = this.getTagIdByName(tagName);\r\n        \r\n        if (tagId) {\r\n          if ([1, 2].includes(tagId)) { // Condición\r\n            this.form.patchValue({ conditionTag: tagId });\r\n          } else if ([4, 5].includes(tagId)) { // Precio\r\n            this.form.patchValue({ priceTag: tagId });\r\n          } else if ([3, 6, 7].includes(tagId)) { // Envío\r\n            this.form.patchValue({ shippingTag: tagId });\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // Cargar contactos con mapeo de tipos\r\n    this.contacts.clear();\r\n    if (publication.contacts && publication.contacts.length > 0) {\r\n      publication.contacts.forEach((contact: any) => {\r\n        const contactTypeId = this.getContactTypeIdByName(contact.contact_type);\r\n        \r\n        if (contactTypeId) {\r\n          const contactForm = this.fb.group({\r\n            contact_type_id: [contactTypeId, Validators.required],\r\n            contact_value: [contact.contact_value, Validators.required]\r\n          });\r\n          this.contacts.push(contactForm);\r\n          \r\n          // Aplicar validaciones específicas por tipo\r\n          setTimeout(() => {\r\n            this.onContactTypeChange(this.contacts.length - 1);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      this.addContact();\r\n    }\r\n\r\n    // Cargar imágenes existentes\r\n    if (publication.images && publication.images.length > 0) {\r\n      this.existingImages = publication.images;\r\n      publication.images.forEach((imagePath: string, index: number) => {\r\n        if (index < 3) {\r\n          this.imageSlots[index] = imagePath;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Inicializar mapa con coordenadas existentes\r\n    setTimeout(() => {\r\n      this.initMap();\r\n    }, 500);\r\n  }\r\n\r\n  loadUserData(userId: number): void {\r\n    this.userService.getUserById(userId).subscribe({\r\n      next: (userData: UserGet) => {\r\n        this.user = userData;\r\n      }\r\n    });\r\n  }\r\n\r\n  initMap(): void {\r\n    const locationId = this.form.get('location_id')?.value;\r\n    const lat = this.form.get('latitude')?.value;\r\n    const lng = this.form.get('longitude')?.value;\r\n    \r\n    let coords: [number, number];\r\n    \r\n    if (locationId && this.locationCoordinates[locationId]) {\r\n      coords = this.locationCoordinates[locationId];\r\n    } else if (lat && lng) {\r\n      coords = [lat, lng];\r\n    } else {\r\n      coords = [-31.9135, -63.6823]; \r\n    }\r\n\r\n    this.initMapWithCoords(coords);\r\n  }\r\n\r\n  updateMarkerPosition(lat: number, lng: number): void {\r\n    this.marker.setLatLng([lat, lng]);\r\n    this.form.patchValue({\r\n      latitude: lat,\r\n      longitude: lng\r\n    });\r\n  }\r\n\r\n  trackByIndex(index: number, item: any): any {\r\n    return index;\r\n  }\r\n\r\n  checkAdmin(): void {\r\n    if (this.authService.hasRole('ADMIN')) {\r\n      this.isOwner = true;\r\n    } else {\r\n      this.isOwner = false;\r\n    }\r\n  }\r\n\r\n  loadSelectData(): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      const promises = [\r\n        this.utilsService.getLocations().toPromise(),\r\n        this.publicationService.getCategories().toPromise(),\r\n        this.utilsService.getContactsTypes().toPromise()\r\n      ];\r\n\r\n      Promise.all(promises).then(([locations, categories, contactTypes]) => {\r\n        this.locations = locations || [];\r\n        this.categories = categories || [];\r\n        this.contactTypes = contactTypes || [];\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  get contacts(): FormArray {\r\n    return this.form.get('contacts') as FormArray;\r\n  }\r\n\r\n  addContact(): void {\r\n    if (this.contacts.length >= 10) {\r\n      Swal.fire({\r\n        icon: 'warning',\r\n        title: 'Límite alcanzado',\r\n        text: 'No puedes agregar más de 10 contactos.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n      return;\r\n    }\r\n\r\n    let contactForm;\r\n    \r\n    if (this.contacts.length === 0) {\r\n      contactForm = this.fb.group({\r\n        contact_type_id: [5, Validators.required],\r\n        contact_value: [this.user.email, Validators.required]\r\n      });\r\n    } else {\r\n      contactForm = this.fb.group({\r\n        contact_type_id: [null, Validators.required],\r\n        contact_value: ['', Validators.required]\r\n      });\r\n    }\r\n\r\n    this.contacts.push(contactForm);\r\n  }\r\n\r\n  removeContact(index: number): void {\r\n    this.contacts.removeAt(index);\r\n  }\r\n\r\n  onContactTypeChange(index: number): void {\r\n    const control = this.contacts.at(index);\r\n    const tipo = control.get('contact_type_id')?.value;\r\n\r\n    control.get('contact_value')?.clearValidators();\r\n\r\n    switch (tipo) {\r\n      case 1: // Whatsapp\r\n        control.get('contact_value')?.setValidators([\r\n          Validators.required,\r\n          Validators.pattern(/^[0-9]{7,15}$/)\r\n        ]);\r\n        break; \r\n      case 2: // Facebook\r\n        control.get('contact_value')?.setValidators([\r\n          Validators.required,\r\n          Validators.pattern(/^https?:\\/\\/.+$/)\r\n        ]);\r\n        break;\r\n      case 3: // Teléfono\r\n        control.get('contact_value')?.setValidators([\r\n          Validators.required,\r\n          Validators.pattern(/^[0-9]{7,15}$/)\r\n        ]);\r\n        break;\r\n      case 4: // Instagram\r\n        control.get('contact_value')?.setValidators([\r\n          Validators.required,\r\n          Validators.pattern(/^[a-zA-Z0-9._]+$/)\r\n        ]);\r\n        break;\r\n      case 5: // Email\r\n        control.get('contact_value')?.setValidators([\r\n          Validators.required,\r\n          Validators.email\r\n        ]);\r\n        break;\r\n      default:\r\n        control.get('contact_value')?.setValidators(Validators.required);\r\n    }\r\n\r\n    control.get('contact_value')?.updateValueAndValidity();\r\n  }\r\n\r\n  getPlaceholder(index: number): string {\r\n    const tipo = this.contacts.at(index).get('contact_type_id')?.value;\r\n    switch (tipo) {\r\n      case 1: return 'Ej: 3511234567';\r\n      case 2: return 'Ej: https://facebook.com/usuario';\r\n      case 3: return 'Ej: 3544123456';\r\n      case 4: return 'Ej: nombre.usuario';\r\n      case 5: return 'Ej: usuario@dominio.com';\r\n      default: return '';\r\n    }\r\n  }\r\n\r\n  getHelpText(index: number): string | null {\r\n    const tipo = this.contacts.at(index).get('contact_type_id')?.value;\r\n    switch (tipo) {\r\n      case 4: return 'No incluyas el @, solo el nombre de usuario.';\r\n      case 2: return 'Incluye el enlace completo a tu perfil.';\r\n      case 1:\r\n      case 3: return 'Solo números, sin espacios ni símbolos.';\r\n      default: return null;\r\n    }\r\n  }\r\n\r\n  showErrorAt(arrayName: string, index: number, controlName: string): string {\r\n    const array = this.form.get(arrayName) as FormArray;\r\n    const control = array.at(index).get(controlName);\r\n\r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'email':\r\n          return 'Formato de correo electrónico inválido.';\r\n        case 'pattern':\r\n          return 'El formato ingresado no es válido.';\r\n        default:\r\n          return 'Error no identificado en el campo.';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  onCategoriesChange(selected: any[]) {\r\n    if (selected.length > 2) {\r\n      selected.pop();\r\n      this.form.get('categories')?.setValue(selected);\r\n    }\r\n  }\r\n\r\n  nextStep(): void {\r\n    if (this.step === 1) {\r\n      const requiredFields = ['title', 'description', 'price', 'categories', 'conditionTag', 'priceTag', 'shippingTag'];\r\n      const allValid = requiredFields.every(field => this.form.get(field)?.valid);\r\n\r\n      if (allValid) {\r\n        this.step++;\r\n        setTimeout(() => {\r\n          this.initMap();\r\n        }, 100);\r\n      } else {\r\n        requiredFields.forEach(field => this.form.get(field)?.markAsTouched());\r\n        console.warn('Faltan campos obligatorios en el paso 1');\r\n      }\r\n\r\n    } else if (this.step === 2) {\r\n      const latitude = this.form.get('latitude')?.value;\r\n      const longitude = this.form.get('longitude')?.value;\r\n      const locationIdValid = this.form.get('location_id')?.valid;\r\n\r\n      if (latitude && longitude && locationIdValid) {\r\n        this.step++;\r\n      } else {\r\n        this.form.get('location_id')?.markAsTouched();\r\n        Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Ubicación requerida',\r\n          text: 'Por favor, selecciona una ubicación válida en las opciones disponibles.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    } else if (this.step === 3) {\r\n      if (this.hasAtLeastOneImage()) {\r\n        this.uploadNewImages();\r\n      } else {\r\n        this.step++;\r\n      }\r\n    }\r\n  }\r\n\r\n  prevStep(): void {\r\n    if (this.step > 1) {\r\n      this.step--;\r\n    }\r\n  }\r\n\r\n  hasAtLeastOneImage(): boolean {\r\n    return this.imageSlots.some(img => img != null);\r\n  }\r\n\r\n  uploadNewImages(): void {\r\n    const userId = this.authService.getUser().id;\r\n    const newFiles = this.imageSlots.filter((f): f is File => f instanceof File);\r\n    \r\n    if (newFiles.length === 0) {\r\n      // No hay nuevas imágenes, mantener las existentes\r\n      this.uploadedImagePaths = this.existingImages;\r\n      this.step++;\r\n      return;\r\n    }\r\n\r\n    const uploadPromises = newFiles.map((file, index) =>\r\n      this.fileService.uploadPublicationPic(this.publicationId, userId, index + 1, file).toPromise()\r\n    );\r\n\r\n    Promise.all(uploadPromises)\r\n      .then(urls => {\r\n        const newUrls = urls.filter((url): url is string => typeof url === 'string');\r\n        \r\n        // Combinar imágenes existentes con nuevas\r\n        this.uploadedImagePaths = [];\r\n        this.imageSlots.forEach(slot => {\r\n          if (typeof slot === 'string') {\r\n            // Es una imagen existente\r\n            this.uploadedImagePaths.push(slot);\r\n          } else if (slot instanceof File) {\r\n            // Es una nueva imagen, encontrar su URL subida\r\n            const newUrlIndex = newFiles.indexOf(slot);\r\n            if (newUrlIndex !== -1 && newUrls[newUrlIndex]) {\r\n              this.uploadedImagePaths.push(newUrls[newUrlIndex]);\r\n            }\r\n          }\r\n        });\r\n        \r\n        this.step++;\r\n      })\r\n      .catch(err => {\r\n        console.error('Error al subir imágenes', err);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'Error al subir imágenes, intenta nuevamente.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      });\r\n  }\r\n\r\n  submit(): void {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      Swal.fire({\r\n        icon: 'warning',\r\n        title: 'Campos incompletos',\r\n        text: 'Completa todos los campos requeridos antes de actualizar.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n      return;\r\n    }\r\n\r\n    const contacts = this.contacts.controls.map(ctrl => ({\r\n      contact_type_id: ctrl.get('contact_type_id')?.value,\r\n      contact_value: ctrl.get('contact_value')?.value\r\n    }));\r\n\r\n    // Usar imágenes subidas o existentes\r\n    const finalImages = this.uploadedImagePaths.length > 0 ? this.uploadedImagePaths : \r\n    this.imageSlots.filter(img => typeof img === 'string') as string[];\r\n\r\n    const publication = {\r\n      title: this.form.value.title,\r\n      description: this.form.value.description,\r\n      price: this.form.value.price,\r\n      location_id: this.form.value.location_id,\r\n      categories: this.form.value.categories,\r\n      tags: [this.form.value.conditionTag, this.form.value.priceTag, this.form.value.shippingTag],\r\n      images: finalImages,\r\n      latitude: this.form.value.latitude,\r\n      longitude: this.form.value.longitude,\r\n      contacts: contacts\r\n    };\r\n\r\n    console.log('Datos de la publicación a actualizar:', publication);\r\n\r\n    this.publicationService.updatePublication(this.publicationId, publication).subscribe({\r\n      next: res => {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: '¡Actualizado!',\r\n          text: 'Publicación actualizada con éxito',\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n        }).then(() => {\r\n          this.router.navigate(['/publication', this.publicationId]);\r\n        });\r\n      },\r\n      error: err => {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error al actualizar la publicación',\r\n          text: err.error.message || 'Ocurrió un error inesperado. Inténtalo de nuevo más tarde.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getImagePreview(item: File | string | null): string {\r\n    if (item instanceof File) {\r\n      return URL.createObjectURL(item);\r\n    } else if (typeof item === 'string') {\r\n      return item; // URL de imagen existente\r\n    }\r\n    return '';\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    }\r\n  }\r\n\r\nonSlotImageSelected(event: any, index: number): void {\r\n  const file: File = event.target.files[0];\r\n  if (file) {\r\n    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n    if (!allowedTypes.includes(file.type)) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Formato no válido',\r\n        text: 'Solo se permiten archivos JPG, JPEG y PNG.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n      event.target.value = '';\r\n      return;\r\n    }\r\n\r\n    const maxSize = 5 * 1024 * 1024; \r\n    if (file.size > maxSize) {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Archivo muy grande',\r\n        text: 'El archivo no puede ser mayor a 5MB.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n      event.target.value = '';\r\n      return;\r\n    }\r\n\r\n    this.imageSlots[index] = file;\r\n  }\r\n}\r\n\r\n  removeImageSlot(index: number): void {\r\n    this.imageSlots[index] = null;\r\n  }\r\n\r\n  isExistingImage(img: File | string | null): boolean {\r\n    return typeof img === 'string';\r\n  }\r\n\r\n\r\n  isNewImage(img: File | string | null): boolean {\r\n    return img instanceof File;\r\n  }\r\n\r\n  hasImage(img: File | string | null): boolean {\r\n    return img !== null;\r\n  }\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.form.get(controlName);\r\n\r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'email':\r\n          return 'Formato de correo electrónico inválido.';\r\n        case 'minlength':\r\n          return `El valor ingresado es demasiado corto. Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `El valor ingresado es demasiado largo. Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'min':\r\n          return `El valor es menor que el mínimo permitido (${control.errors['min'].min}).`;\r\n        case 'pattern':\r\n          return 'El formato ingresado no es válido.';\r\n        case 'requiredTrue':\r\n          return 'Debe aceptar el campo requerido para continuar.';\r\n        case 'date':\r\n          return 'La fecha ingresada es inválida.';\r\n        default:\r\n          return 'Error no identificado en el campo.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n}"
        },
        "events-list": {
          "events-list.component.css": ".events-container {\r\n  max-width: 100%;\r\n}\r\n\r\n.event-card {\r\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\r\n  background-color: #fff;\r\n  height: 350px; \r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.event-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;\r\n}\r\n\r\n.event-card .row {\r\n  flex: 1;\r\n  height: 100%;\r\n}\r\n\r\n.event-image-container {\r\n  width: 100%;\r\n  height: 250px;\r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #f8f9fa;\r\n  position: relative;\r\n}\r\n\r\n.event-image {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  object-fit: contain;\r\n  transition: transform 0.3s ease;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.event-card:hover .event-image {\r\n  transform: translate(-50%, -50%) scale(1.05);\r\n}\r\n\r\n.event-content {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  padding: 1rem !important;\r\n}\r\n\r\n.event-title {\r\n  color: #333;\r\n  font-weight: 600;\r\n  line-height: 1.3;\r\n  margin-bottom: 0.75rem;\r\n  max-height: 2.6em;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.event-description {\r\n  font-size: 0.9rem;\r\n  line-height: 1.4;\r\n  flex-grow: 1;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n  max-height: 5.6em; \r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-info {\r\n  border-top: 1px solid #e9ecef;\r\n  padding-top: 0.75rem;\r\n  margin-top: auto;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.user-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  object-fit: cover;\r\n  border: 2px solid #e9ecef;\r\n}\r\n\r\n.user-initials {\r\n  width: 40px;\r\n  height: 40px;\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  border: 2px solid #e9ecef;\r\n}\r\n\r\n.user-name {\r\n  color: #333;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.user-username {\r\n  font-size: 0.8rem;\r\n  margin-top: -2px;\r\n}\r\n\r\n.verified-badge {\r\n  font-weight: bold;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.user-rating {\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.rating-stars .filled-star {\r\n  color: #ffc107;\r\n}\r\n\r\n.rating-stars .empty-star {\r\n  color: #e9ecef;\r\n}\r\n\r\n.event-dates {\r\n  margin-top: 0.5rem;\r\n  padding-top: 0.5rem;\r\n  border-top: 1px solid #f1f3f5;\r\n  flex-shrink: 0;\r\n}\r\n\r\n\r\n.finalize-event-btn {\r\n  font-size: 0.8rem;\r\n  padding: 0.4rem 0.8rem;\r\n  transition: all 0.2s ease;\r\n  border-radius: 20px;\r\n  flex-shrink: 0;\r\n}\r\n\r\n.finalize-event-btn:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 2px 4px rgba(220, 53, 69, 0.2);\r\n}\r\n\r\n\r\n@media (max-width: 768px) {\r\n  .event-card {\r\n    height: auto;\r\n    min-height: 320px;\r\n  }\r\n  \r\n  .event-image-container {\r\n    height: 150px;\r\n  }\r\n  \r\n  .event-content {\r\n    min-height: auto;\r\n  }\r\n  \r\n  .event-title {\r\n    font-size: 1.1rem;\r\n  }\r\n  \r\n  .event-description {\r\n    font-size: 0.85rem;\r\n    max-height: 4.2em;\r\n  }\r\n  \r\n  .user-avatar,\r\n  .user-initials {\r\n    width: 35px;\r\n    height: 35px;\r\n  }\r\n  \r\n  .user-initials {\r\n    font-size: 0.7rem;\r\n  }\r\n\r\n  .finalize-event-btn {\r\n    font-size: 0.75rem;\r\n    padding: 0.3rem 0.6rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .event-card {\r\n    height: auto;\r\n  }\r\n  \r\n  .event-card .row {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .event-image-container {\r\n    height: 180px;\r\n  }\r\n  \r\n  .event-content {\r\n    padding: 1rem !important;\r\n  }\r\n}\r\n\r\n.spinner-border-sm {\r\n  width: 1rem;\r\n  height: 1rem;\r\n}\r\n\r\n.btn-outline-primary:hover {\r\n  transform: translateY(-1px);\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.fa-calendar-times {\r\n  opacity: 0.5;\r\n}\r\n\r\n.fondo-gris {\r\n  background-color: #f8f9fa;\r\n  min-height: 100vh;\r\n}",
          "events-list.component.html": "<div class=\"fondo-gris py-5\">\r\n  <div class=\"container\">\r\n    <h2 class=\"mb-4 text-primary\">Últimos Eventos</h2>\r\n    <div class=\"bg-white rounded shadow p-4\">\r\n      \r\n      <div *ngIf=\"loading\" class=\"text-center py-5\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Cargando eventos...</span>\r\n        </div>\r\n        <p class=\"mt-2 text-muted\">Cargando eventos...</p>\r\n      </div>\r\n\r\n      <div *ngIf=\"!loading && displayedEvents.length > 0\" class=\"events-container\">\r\n        <div *ngFor=\"let event of displayedEvents\" class=\"event-card mb-4 border rounded p-3 shadow-sm\">\r\n          <div class=\"row g-0\">\r\n            <div class=\"col-md-4\">\r\n              <div class=\"event-image-container\">\r\n                <img\r\n                  [src]=\"event.image_url || getDefaultImage()\"\r\n                  [alt]=\"'assets/Utils/new.png'\"\r\n                  class=\"event-image rounded\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-8\">\r\n              <div class=\"event-content p-3\">\r\n                <div class=\"d-flex justify-content-between align-items-start mb-2\">\r\n                  <h5 class=\"event-title mb-0\">{{ event.title }}</h5>\r\n                 @if (authService.hasRole(\"ADMIN\")){\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn btn-outline-danger btn-sm finalize-event-btn ms-2\"\r\n                    (click)=\"finalizeEvent(event.id)\"\r\n                    title=\"Finalizar evento\">\r\n                    <i class=\"bi bi-calendar2-x\"></i>\r\n                    Finalizar\r\n                  </button>\r\n                }\r\n                </div>\r\n\r\n                <p class=\"event-description text-muted mb-3\" *ngIf=\"event.description\">\r\n                  {{ event.description }}\r\n                </p>\r\n\r\n                <div class=\"user-info d-flex align-items-center mb-2\">\r\n                  <div *ngIf=\"getUserAvatar(event.user); else userInitials\" class=\"me-2\">\r\n                    <img\r\n                      [src]=\"getUserAvatar(event.user)\"\r\n                      [alt]=\"getUserDisplayName(event.user)\"\r\n                      class=\"user-avatar rounded-circle\"\r\n                    />\r\n                  </div>\r\n                  <ng-template #userInitials>\r\n                    <div class=\"user-initials rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-2\">\r\n                      {{ getInitials(event.user) }}\r\n                    </div>\r\n                  </ng-template>\r\n                  <div class=\"user-details\">\r\n                    <span class=\"user-name fw-medium\">\r\n                      {{ getUserDisplayName(event.user) }}\r\n                      <span *ngIf=\"event.user.verified\" class=\"bi bi-patch-check-fill text-info ms-1\" title=\"Usuario verificado\"></span>\r\n                    </span>\r\n                    <div class=\"user-username text-muted small\">\r\n                      &#64;{{ event.user.username }}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"user-rating ms-auto\">\r\n                    <small class=\"text-muted\">\r\n                    <i class=\"bi bi-calendar-event me-1\"></i>\r\n                    <span *ngIf=\"event.start_date && event.end_date && event.start_date !== event.end_date\">\r\n                      Del {{ formatDate(event.start_date) }} al {{ formatDate(event.end_date) }}\r\n                    </span>\r\n                    <span *ngIf=\"event.start_date && (!event.end_date || event.start_date === event.end_date)\">\r\n                      {{ formatDate(event.start_date) }}\r\n                    </span>\r\n                  </small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"!loading && hasMoreEvents\" class=\"text-center mt-4\">\r\n        <button type=\"button\" class=\"btn btn-outline-primary\" [disabled]=\"loadingMore\" (click)=\"loadMoreEvents()\">\r\n          <span *ngIf=\"loadingMore\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n          {{ loadingMore ? 'Cargando...' : 'Ver más eventos' }}\r\n        </button>\r\n      </div>\r\n\r\n      <div *ngIf=\"!loading && displayedEvents.length === 0\" class=\"text-center py-5\">\r\n        <div class=\"text-muted\">\r\n          <i class=\"fas fa-calendar-times fa-3x mb-3\"></i>\r\n          <h5>No hay eventos disponibles</h5>\r\n          <p>Aún no se han creado eventos.</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div *ngIf=\"!loading && allEvents.length > 0\" class=\"text-center mt-4\">\r\n        <small class=\"text-muted\">\r\n          Mostrando {{ displayedEvents.length }} de {{ allEvents.length }} eventos\r\n        </small>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
          "events-list.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { EventsListComponent } from './events-list.component';\r\n\r\ndescribe('EventsListComponent', () => {\r\n  let component: EventsListComponent;\r\n  let fixture: ComponentFixture<EventsListComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [EventsListComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(EventsListComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "events-list.component.ts": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { EventGet } from '../../models/EventGet';\r\nimport Swal from 'sweetalert2';\r\nimport { AuthService } from '../../services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-events-list',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './events-list.component.html',\r\n  styleUrls: ['./events-list.component.css']\r\n})\r\nexport class EventsListComponent implements OnInit {\r\n  allEvents: EventGet[] = [];\r\n  displayedEvents: EventGet[] = [];\r\n  itemsPerPage = 5;\r\n  hasMoreEvents = false;\r\n  loading = false;\r\n  loadingMore = false;\r\n\r\n  private readonly eventsService = inject(EventsService);\r\n  readonly authService = inject(AuthService); \r\n  \r\n\r\n  ngOnInit(): void {\r\n    this.loadEvents();\r\n  }\r\n\r\n  loadEvents(): void {\r\n    this.loading = true;\r\n    this.eventsService.getEvents().subscribe({\r\n      next: (events: EventGet[]) => {\r\n        this.allEvents = events;\r\n        this.displayedEvents = this.allEvents.slice(0, this.itemsPerPage);\r\n        this.hasMoreEvents = this.allEvents.length > this.itemsPerPage;\r\n        this.loading = false;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al cargar eventos:', err);\r\n        this.loading = false;\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'No se pudieron cargar los eventos.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  loadMoreEvents(): void {\r\n    this.loadingMore = true;\r\n    \r\n    setTimeout(() => {\r\n      const currentLength = this.displayedEvents.length;\r\n      const nextItems = this.allEvents.slice(currentLength, currentLength + this.itemsPerPage);\r\n      \r\n      this.displayedEvents = [...this.displayedEvents, ...nextItems];\r\n      this.hasMoreEvents = this.displayedEvents.length < this.allEvents.length;\r\n      this.loadingMore = false;\r\n    }, 500); \r\n  }\r\n\r\n  getDefaultImage(): string {\r\n    return 'assets/secondary.png'; \r\n  }\r\n\r\n  finalizeEvent(id: number): void {\r\n    Swal.fire({\r\n      title: '¿Está seguro de que desea finalizar este evento?',\r\n      text: \"Esta acción no se puede deshacer.\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, finalizar evento',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.eventsService.finalizeEvent(id).subscribe({\r\n          next: (response: any) => {\r\n            if (response === true || response) {\r\n              Swal.fire({\r\n                icon: 'success',\r\n                title: 'Evento finalizado',\r\n                text: 'El evento se ha finalizado correctamente.',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n              }).then(() => {\r\n                this.loadEvents(); \r\n              });\r\n            } else {\r\n              Swal.fire({\r\n                icon: 'error',\r\n                title: 'Error',\r\n                text: 'No se pudo finalizar el evento.',\r\n                showConfirmButton: false,\r\n                timer: 1500\r\n              });\r\n            }\r\n          },\r\n          error: (err) => {\r\n            console.error('Error al finalizar el evento:', err);\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: 'Ocurrió un error al finalizar el evento.',\r\n              showConfirmButton: false,\r\n              timer: 1500\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  formatDate(dateString?: string): string {\r\n    if (!dateString) return '';\r\n    \r\n    const dateParts = dateString.split('-');\r\n    if (dateParts.length === 3) {\r\n      const [day, month, year] = dateParts;\r\n      const formattedDate = `${year}-${month}-${day}`;\r\n      const date = new Date(formattedDate);\r\n      \r\n      if (!isNaN(date.getTime())) {\r\n        return date.toLocaleDateString('es-ES', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n          year: 'numeric'\r\n        });\r\n      }\r\n    }\r\n    \r\n    return dateString;\r\n  }\r\n\r\n  getUserDisplayName(user: any): string {\r\n    return `${user.name} ${user.surname}`;\r\n  }\r\n\r\n  getUserAvatar(user: any): string {\r\n    return user.avatar_url || '';\r\n  }\r\n\r\n  getInitials(user: any): string {\r\n    const firstLetterName = user.name ? user.name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = user.surname ? user.surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n\r\n}"
        },
        "footer": {
          "footer.component.css": ".footer {\r\n  background: linear-gradient(135deg, #212529 0%, #343a40 100%);\r\n  margin-top: 0;\r\n}\r\n\r\n\r\n.footer-spacer {\r\n  height: 80px;\r\n  background: inherit;\r\n  background: #f8f9fa;\r\n}\r\n\r\n.footer-bottom {\r\n  background-color: rgba(0, 0, 0, 0.3) !important;\r\n  border-top: 1px solid rgba(255, 255, 255, 0.1);\r\n}\r\n\r\n.hover-link {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.hover-link:hover {\r\n  opacity: 1 !important;\r\n  color: var(--bs-primary) !important;\r\n  transform: translateX(5px);\r\n}\r\n\r\n.social-links a {\r\n  transition: all 0.3s ease;\r\n  display: inline-block;\r\n}\r\n\r\n.social-links a:hover {\r\n  color: var(--bs-primary) !important;\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.text-primary {\r\n  color: #007bff !important;\r\n}\r\n\r\n/* Responsive adjustments */\r\n@media (max-width: 768px) {\r\n  .footer .container {\r\n    padding-left: 1rem;\r\n    padding-right: 1rem;\r\n  }\r\n  \r\n  .col-md-6.text-md-end {\r\n    text-align: start !important;\r\n    margin-top: 0.5rem;\r\n  }\r\n}\r\n\r\n.footer h5,\r\n.footer h6 {\r\n  font-weight: 600;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.footer ul li {\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.footer ul li:hover {\r\n  transform: translateX(3px);\r\n}\r\n\r\n/* Icon styling */\r\n.footer .bi {\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.footer a:hover .bi {\r\n  color: var(--bs-primary);\r\n}",
          "footer.component.html": "<!-- Spacer para eliminar espacio en blanco -->\r\n<!-- <div class=\"footer-spacer\"></div>-->\r\n\r\n<!-- Footer -->\r\n<footer class=\"footer bg-dark text-light\">\r\n  <div class=\"container py-3\">\r\n    <div class=\"row\">\r\n      <!-- Columna 1: Logo y descripción -->\r\n      <div class=\"col-lg-5 col-md-6 mb-4\">\r\n        <h5 class=\"text-primary mb-3\">\r\n          <i class=\"bi bi-shop me-2\"></i>Oncativo Vende\r\n        </h5>\r\n        <p class=\"text-light opacity-75\">\r\n          Tu plataforma de confianza para comprar y vender en Oncativo y localidades cercanas. \r\n          Conectamos a la comunidad con los mejores productos.\r\n        </p>\r\n        <div class=\"social-links mt-3\">\r\n          <a href=\"https://www.facebook.com/ulii.lara/\" class=\"text-light me-3\" title=\"Facebook\">\r\n            <i class=\"bi bi-facebook fs-5\"></i>\r\n          </a>\r\n          <a href=\"https://www.instagram.com/uliseslara13/\" class=\"text-light me-3\" title=\"Instagram\">\r\n            <i class=\"bi bi-instagram fs-5\"></i>\r\n          </a>\r\n          <a href=\"https://x.com/UlisesLara13\" class=\"text-light me-3\" title=\"X\">\r\n            <i class=\"bi bi-twitter-x fs-5\"></i>\r\n          </a>\r\n          <a href=\"https:wa.me/3572605121\" class=\"text-light\" title=\"WhatsApp\">\r\n            <i class=\"bi bi-whatsapp fs-5\"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Columna 2: Enlaces útiles -->\r\n      <div class=\"col-lg-3 col-md-6 mb-4\">\r\n        <h6 class=\"text-primary mb-3\">Navegación</h6>\r\n        <ul class=\"list-unstyled\">\r\n          <li class=\"mb-2\">\r\n            <a class=\"text-light text-decoration-none opacity-75 hover-link\" style=\"cursor: pointer;\" (click)=\"goToHome()\">\r\n              <i class=\"bi bi-house me-1\"></i>Inicio\r\n            </a>\r\n          </li>\r\n          <li class=\"mb-2\">\r\n            <a class=\"text-light text-decoration-none opacity-75 hover-link\" style=\"cursor: pointer;\" (click)=\"goToPublications()\">\r\n              <i class=\"bi bi-search me-1\"></i>Buscar\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n\r\n      <!-- Columna 3: Soporte -->\r\n      <div class=\"col-lg-4 col-md-6 mb-4\">\r\n        <h6 class=\"text-primary mb-3\">Soporte y Legal</h6>\r\n        <ul class=\"list-unstyled\">\r\n          <li class=\"mb-2\">\r\n            <a routerLink=\"/help\" class=\"text-light text-decoration-none opacity-75 hover-link\" style=\"cursor: pointer;\" (click)=\"goToFaq()\">\r\n              <i class=\"bi bi-question-circle me-1\"></i>Preguntas Frecuentes\r\n            </a>\r\n          </li>\r\n          <li class=\"mb-2\">\r\n            <a class=\"text-light text-decoration-none opacity-75 hover-link\" style=\"cursor: pointer;\" (click)=\"showTermsAndConditions()\">\r\n              <i class=\"bi bi-file-text me-1\"></i>Términos y Condiciones\r\n            </a>\r\n          </li>\r\n        </ul>\r\n        \r\n        <!-- Información de contacto -->\r\n        <div class=\"mt-4\">\r\n          <h6 class=\"text-primary mb-2\">Contacto</h6>\r\n          <p class=\"text-light opacity-75 mb-1\">\r\n            <i class=\"bi bi-geo-alt me-1\"></i>Oncativo, Córdoba, Argentina\r\n          </p>\r\n          <p class=\"text-light opacity-75 mb-1\">\r\n            <i class=\"bi bi-envelope me-1\"></i> oncativovende&#64;gmail.com\r\n          </p>\r\n          <p class=\"text-light opacity-75\">\r\n            <i class=\"bi bi-phone me-1\"></i>+54 9 3572 60 51 21\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Copyright -->\r\n  <div class=\"footer-bottom bg-black py-3\">\r\n    <div class=\"container\">\r\n      <div class=\"row align-items-center\">\r\n        <div class=\"col-md-6\">\r\n          <p class=\"text-light opacity-75 mb-0\">\r\n            © {{ currentYear }} <strong>Oncativo Vende S.A.</strong> Todos los derechos reservados.\r\n          </p>\r\n        </div>\r\n        <div class=\"col-md-6 text-md-end\">\r\n          <p class=\"text-light opacity-75 mb-0\">\r\n            Hecho con <i class=\"bi bi-heart-fill text-danger\"></i> en Oncativo\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</footer>",
          "footer.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { FooterComponent } from './footer.component';\r\n\r\ndescribe('FooterComponent', () => {\r\n  let component: FooterComponent;\r\n  let fixture: ComponentFixture<FooterComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [FooterComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(FooterComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "footer.component.ts": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule],\r\n  templateUrl: './footer.component.html',\r\n  styleUrl: './footer.component.css'\r\n})\r\nexport class FooterComponent {\r\n  currentYear = new Date().getFullYear();\r\n\r\n  constructor(private router: Router) {}\r\n\r\n  goToPublications() {\r\n    this.router.navigate(['/search']).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  goToHome() {\r\n    this.router.navigate(['/home']).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n    goToFaq() {\r\n    this.router.navigate(['/faq']).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  showTermsAndConditions() {\r\n    Swal.fire({\r\n      title: 'Términos y Condiciones - Oncativo Vende',\r\n      html: `\r\n        <div style=\"text-align: justify; max-height: 450px; overflow-y: auto; padding: 10px; font-size: 14px; line-height: 1.4;\">\r\n          <p><strong>Bienvenido a Oncativo Vende</strong> proporcionado por <strong>Oncativo Vende S.A.</strong> Nos complace ofrecerle acceso al Servicio, sujeto a estos términos y condiciones y a la Política de Privacidad correspondiente.</p>\r\n          \r\n          <h6><strong>Aceptación de Términos</strong></h6>\r\n          <p>Al acceder y utilizar el Servicio, usted expresa su consentimiento y acuerdo con los Términos de Servicio y la Política de Privacidad. Si no está de acuerdo, no utilice el Servicio.</p>\r\n          \r\n          <h6><strong>Descripción del Servicio</strong></h6>\r\n          <p>Oncativo Vende es una plataforma digital que permite a los usuarios suscribirse para publicar productos o servicios para que otros usuarios interesados puedan contactarlos. No intervenimos en las operaciones comerciales ni en los términos pactados entre las partes. Solo facilitamos el contacto entre oferentes y potenciales compradores.</p>\r\n          \r\n          <h6><strong>Requisitos de Usuario</strong></h6>\r\n          <p>Al suscribirse, el usuario declara ser mayor de edad y tener capacidad legal para contratar. El acceso al Servicio está condicionado al cumplimiento de estos Términos. Nos reservamos el derecho de rechazar o cancelar suscripciones por incumplimientos.</p>\r\n          \r\n          <h6><strong>Derechos de la Empresa</strong></h6>\r\n          <p>Oncativo Vende S.A. se reserva todos los derechos no expresamente otorgados en este documento. Esto incluye la posibilidad de modificar, suspender o eliminar funciones, así como cancelar o suspender cuentas sin previo aviso en caso de incumplimiento.</p>\r\n          \r\n          <h6><strong>Funcionamiento del Servicio</strong></h6>\r\n          <p>El Servicio permite publicar avisos clasificados mediante una suscripción mensual, semestral o anual. Los usuarios interesados contactarán directamente con el anunciante. La Compañía no garantiza que se concreten las operaciones ni se responsabiliza por la calidad, estado, cumplimiento o veracidad de los avisos.</p>\r\n          \r\n          <h6><strong>Transacciones</strong></h6>\r\n          <p>No se gestionan pagos ni entregas entre las partes. Toda transacción es responsabilidad exclusiva del vendedor y del comprador.</p>\r\n          \r\n          <h6><strong>Seguridad de Cuenta</strong></h6>\r\n          <p>El acceso es mediante una clave personal, única e intransferible. Oncativo Vende nunca pedirá los datos completos de la cuenta por email o mensaje. El uso indebido de las credenciales es responsabilidad del usuario.</p>\r\n          \r\n          <h6><strong>Cancelación</strong></h6>\r\n          <p>El usuario puede cancelar su suscripción en cualquier momento sin penalidades. En caso de incumplimiento, Oncativo Vende S.A. puede dar de baja la cuenta.</p>\r\n          \r\n          <h6><strong>Propiedad Intelectual</strong></h6>\r\n          <p>El contenido, diseño y desarrollo del software está protegido por la Ley 11.723 de Propiedad Intelectual. Está prohibida su reproducción o modificación sin autorización expresa.</p>\r\n          \r\n          <h6><strong>Protección de Datos</strong></h6>\r\n          <p>El tratamiento de datos personales se realiza según la Política de Privacidad. La información se protege con medidas de seguridad adecuadas y no se comparte con terceros sin consentimiento, salvo requerimiento legal.</p>\r\n        </div>\r\n      `,\r\n      width: '700px',\r\n      showConfirmButton: false,\r\n      showCancelButton: true,\r\n      cancelButtonText: 'Cerrar',\r\n      showCloseButton: true,\r\n      cancelButtonColor: '#6c757d',\r\n      showClass: {\r\n        popup: 'animate__animated animate__fadeInDown'\r\n      },\r\n      hideClass: {\r\n        popup: 'animate__animated animate__fadeOutUp'\r\n      }\r\n    });\r\n  }\r\n}"
        },
        "frequent-questions": {
          "frequent-questions.component.css": "/* faq.component.css */\r\n\r\n.faq-section {\r\n  min-height: 100vh;\r\n}\r\n\r\n.cursor-pointer {\r\n  cursor: pointer;\r\n}\r\n\r\n.faq-item {\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.faq-item:hover .card {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;\r\n}\r\n\r\n.card-header:hover {\r\n  background-color: #f8f9fa !important;\r\n}\r\n\r\n.toggle-icon i {\r\n  transition: transform 0.3s ease;\r\n  color: var(--bs-primary);\r\n  font-size: 1.1rem;\r\n}\r\n\r\n.toggle-icon i.rotated {\r\n  transform: rotate(180deg);\r\n}\r\n\r\n.collapse-content {\r\n  max-height: 0;\r\n  overflow: hidden;\r\n  transition: max-height 0.4s ease-out;\r\n}\r\n\r\n.collapse-content.expanded {\r\n  max-height: 500px;\r\n  transition: max-height 0.4s ease-in;\r\n}\r\n\r\n.collapse-content .card-body {\r\n  padding-top: 1.25rem !important;\r\n  padding-bottom: 1.25rem !important;\r\n}\r\n\r\n.answer-content {\r\n  color: #6c757d;\r\n  line-height: 1.6;\r\n  font-size: 0.95rem;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n.answer-content strong {\r\n  color: var(--bs-primary);\r\n}\r\n\r\n.answer-content a {\r\n  color: var(--bs-primary);\r\n  text-decoration: none;\r\n}\r\n\r\n.answer-content a:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.transition-transform {\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .display-5 {\r\n    font-size: 2rem;\r\n  }\r\n  \r\n  .faq-item .card-header {\r\n    padding: 1rem !important;\r\n  }\r\n  \r\n  .faq-item h5 {\r\n    font-size: 1rem;\r\n  }\r\n}\r\n\r\n.card-header:focus {\r\n  outline: 2px solid var(--bs-primary);\r\n  outline-offset: 2px;\r\n}\r\n\r\n.btn:focus {\r\n  box-shadow: 0 0 0 0.25rem rgba(var(--bs-primary-rgb), 0.25);\r\n}",
          "frequent-questions.component.html": "<!-- faq.component.html -->\r\n<section class=\"faq-section py-5\">\r\n  <div class=\"container\">\r\n    <!-- Header -->\r\n    <div class=\"text-center mb-5\">\r\n      <h2 class=\"display-5 fw-bold text-primary mb-3\">¿Tenés dudas? ¡Te ayudamos!</h2>\r\n      <p class=\"lead text-muted\">Encontrá respuestas a las preguntas más frecuentes</p>\r\n    </div>\r\n\r\n    <!-- FAQ Accordion -->\r\n    <div class=\"row justify-content-center\">\r\n      <div class=\"col-lg-8\">\r\n        <div class=\"faq-accordion\">\r\n          <div \r\n            class=\"faq-item mb-3\" \r\n            *ngFor=\"let faq of faqs; trackBy: trackByFn\"\r\n          >\r\n            <div class=\"card border-0 shadow-sm\">\r\n              <div \r\n                class=\"card-header bg-white border-0 py-3 cursor-pointer\"\r\n                (click)=\"toggleFAQ(faq.id)\"\r\n                [attr.aria-expanded]=\"faq.isExpanded\"\r\n                role=\"button\"\r\n                tabindex=\"0\"\r\n                (keydown.enter)=\"toggleFAQ(faq.id)\"\r\n                (keydown.space)=\"toggleFAQ(faq.id)\"\r\n              >\r\n                <div class=\"d-flex align-items-center justify-content-between\">\r\n                  <h5 class=\"mb-0 fw-semibold text-dark\">{{ faq.question }}</h5>\r\n                  <div class=\"toggle-icon\">\r\n                    <i \r\n                      class=\"fas fa-chevron-down transition-transform\"\r\n                      [class.rotated]=\"faq.isExpanded\"\r\n                    ></i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              \r\n              <div \r\n                class=\"collapse-content\"\r\n                [class.expanded]=\"faq.isExpanded\"\r\n              >\r\n                <div class=\"card-body pt-0 pb-3\">\r\n                  <div class=\"answer-content\" [innerHTML]=\"faq.answer\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Contact Section -->\r\n    <div class=\"row justify-content-center mt-5\">\r\n      <div class=\"col-lg-8\">\r\n        <div class=\"card border-0 shadow-sm bg-primary text-white\">\r\n          <div class=\"card-body text-center py-4\">\r\n            <h4 class=\"fw-bold mb-3\">¿Todavía tenés dudas?</h4>\r\n            <p class=\"mb-3\">Estamos aquí para ayudarte. Contactanos y te responderemos a la brevedad.</p>\r\n            <div class=\"d-flex flex-column flex-sm-row gap-3 justify-content-center\">\r\n              <a \r\n                href=\"mailto:oncativovende@gmail.com\" \r\n                class=\"btn btn-light btn-lg fw-semibold\"\r\n              >\r\n                <i class=\"fas fa-envelope me-2\"></i>\r\n                oncativovende&#64;gmail.com\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</section>",
          "frequent-questions.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { FrequentQuestionsComponent } from './frequent-questions.component';\r\n\r\ndescribe('FrequentQuestionsComponent', () => {\r\n  let component: FrequentQuestionsComponent;\r\n  let fixture: ComponentFixture<FrequentQuestionsComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [FrequentQuestionsComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(FrequentQuestionsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "frequent-questions.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { Faq } from '../../models/Faq';\r\n\r\n@Component({\r\n  selector: 'app-frequent-questions',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  templateUrl: './frequent-questions.component.html',\r\n  styleUrl: './frequent-questions.component.css'\r\n})\r\nexport class FrequentQuestionsComponent {\r\n  faqs: Faq[] = [\r\n    {\r\n      id: 1,\r\n      question: '¿Cómo creo mi clave?',\r\n      answer: 'Ingresá al sitio, seleccioná <strong>\"Ingresar\"</strong> luego <strong>\"Crear cuenta\"</strong> y completá los datos solicitados. El proceso es rápido y seguro.',\r\n      isExpanded: false\r\n    },\r\n    {\r\n      id: 2,\r\n      question: '¿Cómo desbloqueo mi usuario?',\r\n      answer: 'Escribinos a <strong><a href=\"mailto:oncativovende@gmail.com\">oncativovende@gmail.com</a></strong> indicando tu nombre de usuario y nombre completo. Te ayudaremos a resolver el problema.',\r\n      isExpanded: false\r\n    },\r\n    {\r\n      id: 3,\r\n      question: '¿A qué mail puedo escribir para sugerencias o reclamos?',\r\n      answer: 'Para sugerencias o reclamos escribí a <strong><a href=\"mailto:oncativovende@gmail.com\">oncativovende@gmail.com</a></strong>',\r\n      isExpanded: false\r\n    },\r\n    {\r\n      id: 4,\r\n      question: '¿Cómo puedo eliminar mi cuenta?',\r\n      answer: 'Ingresá a tu cuenta , una vez dentro dirigite a la sección de <strong>\"Mi perfil\"</strong> Luego selecciona la opción de <strong>\"Eliminar cuenta\"</strong>.Tu cuenta se borrará junto con tus datos personales.',\r\n      isExpanded: false\r\n    },\r\n    {\r\n      id: 5,\r\n      question: '¿Qué medios de pago aceptan?',\r\n      answer: 'Aceptamos múltiples medios de pago a través de Mercado Pago. Podés abonar con: <strong>tarjetas de crédito</strong>, <strong>débito</strong>, y <strong>dinero en cuenta de mercado pago</strong>. <br> El proceso es seguro y rápido. Una vez elegido el producto, serás redirigido automáticamente al Checkout de Mercado Pago donde podrás seleccionar tu método preferido.',\r\n      isExpanded: false\r\n    },\r\n    {\r\n      id: 6,\r\n      question: '¿Qué necesito para publicar?',\r\n      answer: 'Solo necesitás <strong>registrarte</strong>, <strong>elegir una suscripción activa</strong> y <strong>cargar tu producto</strong>. ¡Es así de simple!',\r\n      isExpanded: false\r\n    },\r\n    {\r\n      id: 7,\r\n      question: '¿Cómo funciona Oncativo Vende?',\r\n      answer: 'Te suscribís, publicás lo que vendés, y los compradores te contactan directamente. <strong>¡Vos coordinás la entrega!</strong> Nosotros solo facilitamos el encuentro.',\r\n      isExpanded: false\r\n    }\r\n  ];\r\n\r\n  toggleFAQ(id: number): void {\r\n    this.faqs = this.faqs.map(faq => ({\r\n      ...faq,\r\n      isExpanded: faq.id === id ? !faq.isExpanded : false\r\n    }));\r\n  }\r\n\r\n  trackByFn(index: number, item: Faq): number {\r\n    return item.id;\r\n  }\r\n}\r\n"
        },
        "home": {
          "home.component.css": "\r\n  .fondo-gris{\r\n    background-color: #f8f9fa;\r\n    padding-bottom: 2rem;\r\n  }\r\n\r\n  .fondo-carrusel {\r\n    mask-image: linear-gradient(#f8f9fa 80%, transparent);\r\n  }\r\n\r\n  .card-custom {\r\n    border: 1px solid #dee2e6; \r\n    transition: box-shadow 0.3s ease;\r\n    height: 100%;\r\n    cursor: pointer;\r\n    text-align: center;\r\n  }\r\n  \r\n  .card-custom:hover {\r\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.582);\r\n  }\r\n\r\n  .card-carousel-wrapper {\r\n    position: relative;\r\n  }\r\n  \r\n  .card-carousel {\r\n    display: flex;\r\n    gap: 1rem;\r\n    overflow-x: auto;\r\n    scroll-behavior: smooth;\r\n    padding: 1rem 0;\r\n  }\r\n  \r\n  .card-carousel::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n  \r\n  .card-carousel .card {\r\n    min-width: 250px;\r\n    flex: 0 0 auto;\r\n  }\r\n  \r\n  .card-custom-size {\r\n    width: 250px;\r\n    height: 380px;\r\n    display: flex;\r\n    border: 1px solid #dee2e6; \r\n    transition: box-shadow 0.3s ease;\r\n    cursor: pointer;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n  }\r\n\r\n    .card-custom-size:hover {\r\n    box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.582);\r\n  }\r\n  \r\n  .card-custom-size img {\r\n    height: 150px;\r\n    object-fit: contain;\r\n  }\r\n\r\n  .card-custom-size .card-title:hover {\r\n  color: #007bff; \r\n  text-decoration: underline;\r\n  cursor: pointer; \r\n}\r\n  \r\n.carousel-arrow {\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%); \r\n  background-color: rgba(255, 255, 255, 0.8);\r\n  color: var(--bs-primary); \r\n  border: none;\r\n  padding: 10px;\r\n  width: 40px; \r\n  height: 40px; \r\n  border-radius: 50%; \r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 10;\r\n  transition: box-shadow 0.3s ease;\r\n}\r\n\r\n.carousel-arrow:hover {\r\n  box-shadow: 0 0.3rem 1rem rgba(0, 0, 0, 0.582);\r\n}\r\n  \r\n.left-arrow {\r\n  left: -50px; /* Ajusta para que quede fuera del contenedor a la izquierda */\r\n}\r\n\r\n.right-arrow {\r\n  right: -50px; /* Ajusta para que quede fuera del contenedor a la derecha */\r\n}\r\n\r\n.category-card {\r\n  transition: all 0.2s ease;\r\n  border: 1px solid #e9ecef !important;\r\n}\r\n\r\n.category-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1) !important;\r\n  border-color: #007bff !important;\r\n}\r\n\r\n.category-image-container {\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.category-image {\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.category-card:hover .category-image {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.category-name {\r\n  background-color: white;\r\n}\r\n\r\n.category-name h6 {\r\n  color: #212529;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .category-image {\r\n    height: 100px !important;\r\n  }\r\n  \r\n  .category-name {\r\n    padding: 0.75rem !important;\r\n  }\r\n  \r\n  .category-name h6 {\r\n    font-size: 0.85rem;\r\n  }\r\n}\r\n\r\n.events-container {\r\n  max-width: 100%;\r\n}\r\n\r\n.event-card {\r\n  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\r\n  background-color: #fff;\r\n  height: 350px; \r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.event-card:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;\r\n}\r\n\r\n.event-card .row {\r\n  flex: 1; \r\n  height: 100%;\r\n}\r\n\r\n.event-image-container {\r\n  width: 100%;\r\n  height: 250px; \r\n  overflow: hidden;\r\n  display: flex;\r\n  align-items: center; \r\n  justify-content: center; \r\n  background-color: #f8f9fa;\r\n  position: relative;\r\n}\r\n\r\n.event-image {\r\n  max-width: 100%;\r\n  max-height: 100%;\r\n  object-fit: contain;\r\n  transition: transform 0.3s ease;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n}\r\n\r\n.event-card:hover .event-image {\r\n  transform: translate(-50%, -50%) scale(1.05);\r\n}\r\n\r\n.event-content {\r\n  height: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between; \r\n  padding: 1rem !important;\r\n}\r\n\r\n.event-title {\r\n  color: #333;\r\n  font-weight: 600;\r\n  line-height: 1.3;\r\n  margin-bottom: 0.75rem;\r\n  max-height: 2.6em; \r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n\r\n.event-description {\r\n  font-size: 0.9rem;\r\n  line-height: 1.4;\r\n  flex-grow: 1;\r\n  white-space: pre-wrap;\r\n  word-wrap: break-word;\r\n  max-height: 5.6em; \r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.user-info {\r\n  border-top: 1px solid #e9ecef;\r\n  padding-top: 0.75rem;\r\n  margin-top: auto;\r\n  flex-shrink: 0; \r\n}\r\n\r\n.user-avatar {\r\n  width: 40px;\r\n  height: 40px;\r\n  object-fit: cover;\r\n  border: 2px solid #e9ecef;\r\n}\r\n\r\n.user-initials {\r\n  width: 40px;\r\n  height: 40px;\r\n  font-size: 0.8rem;\r\n  font-weight: 600;\r\n  border: 2px solid #e9ecef;\r\n}\r\n\r\n.user-name {\r\n  color: #333;\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.user-username {\r\n  font-size: 0.8rem;\r\n  margin-top: -2px;\r\n}\r\n\r\n.verified-badge {\r\n  font-weight: bold;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.user-rating {\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.rating-stars .filled-star {\r\n  color: #ffc107;\r\n}\r\n\r\n.rating-stars .empty-star {\r\n  color: #e9ecef;\r\n}\r\n\r\n.event-dates {\r\n  margin-top: 0.5rem;\r\n  padding-top: 0.5rem;\r\n  border-top: 1px solid #f1f3f5;\r\n  flex-shrink: 0; \r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .event-card {\r\n    height: auto; \r\n    min-height: 300px;\r\n  }\r\n  \r\n  .event-image-container {\r\n    height: 150px; \r\n  }\r\n  \r\n  .event-content {\r\n    min-height: auto;\r\n  }\r\n  \r\n  .event-title {\r\n    font-size: 1.1rem;\r\n  }\r\n  \r\n  .event-description {\r\n    font-size: 0.85rem;\r\n    max-height: 4.2em;\r\n  }\r\n  \r\n  .user-avatar,\r\n  .user-initials {\r\n    width: 35px;\r\n    height: 35px;\r\n  }\r\n  \r\n  .user-initials {\r\n    font-size: 0.7rem;\r\n  }\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .event-card {\r\n    height: auto;\r\n  }\r\n  \r\n  .event-card .row {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .event-image-container {\r\n    height: 180px;\r\n  }\r\n  \r\n  .event-content {\r\n    padding: 1rem !important;\r\n  }\r\n}\r\n\r\n.spinner-border-sm {\r\n  width: 1rem;\r\n  height: 1rem;\r\n}\r\n\r\n.btn-outline-primary:hover {\r\n  transform: translateY(-1px);\r\n  transition: transform 0.2s ease;\r\n}\r\n\r\n.fa-calendar-times {\r\n  opacity: 0.5;\r\n}\r\n",
          "home.component.html": "<div class=\"fondo-gris\">\r\n    <div>\r\n      <!-- Carrusel -->\r\n      <div id=\"carouselExampleIndicators\" class=\"carousel slide\" data-bs-ride=\"carousel\">\r\n        \r\n        <!-- Indicadores -->\r\n        <div class=\"carousel-indicators\">\r\n          <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"0\" class=\"active\"></button>\r\n          <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"1\"></button>\r\n          <button type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide-to=\"2\"></button>\r\n        </div>\r\n  \r\n        <!-- Slides -->\r\n        <div class=\"carousel-inner\">\r\n          <div class=\"carousel-item active\">\r\n            <img src=\"assets/carru4.png\" class=\"d-block w-100 fondo-carrusel\" style=\"height: 700px; object-fit: fill; cursor: pointer;\" alt=\"Promo 1\" routerLink=\"/faq\">\r\n          </div>\r\n          <div class=\"carousel-item\">\r\n            <img src=\"assets/carru5.png\" class=\"d-block w-100 fondo-carrusel\" style=\"height: 700px; object-fit: fill; cursor: pointer;\" alt=\"Promo 2\" routerLink=\"/subscriptions\">\r\n          </div>\r\n          <div class=\"carousel-item\">\r\n            <img src=\"assets/carru3.png\" class=\"d-block w-100 fondo-carrusel\" style=\"height: 700px; object-fit: fill; cursor: pointer;\" alt=\"Promo 3\" routerLink=\"/search\">\r\n          </div>\r\n        </div>\r\n  \r\n        <!-- Flechas -->\r\n        <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide=\"prev\">\r\n          <span class=\"carousel-control-prev-icon\"></span>\r\n        </button>\r\n        <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselExampleIndicators\" data-bs-slide=\"next\">\r\n          <span class=\"carousel-control-next-icon\"></span>\r\n        </button>\r\n      </div>\r\n  \r\n      <!-- Cards de Categorías -->\r\n      <div class=\"container mt-4\">\r\n        <div class=\"row row-cols-1 row-cols-md-5 g-3\">\r\n      \r\n          <div class=\"col\">\r\n            <div class=\"card card-custom text-center p-3 h-100\" (click)=\"onTagAndCategoryChange('Usado','Vehículos')\">\r\n              <img src=\"assets/Utils/cars.webp\" class=\"d-block mx-auto\" style=\"width: 100px; height: 100px; object-fit: cover;\" alt=\"\">\r\n                <h5>Vehículos usados</h5>\r\n                <hr>\r\n                Descubrí autos, motos y bicicletas de segunda mano en excelente estado. Tu próximo vehículo te está esperando al mejor precio.\r\n            </div>\r\n          </div>\r\n      \r\n          <div class=\"col\">\r\n            <div class=\"card card-custom text-center p-3 h-100\" (click)=\"onCategoryChange('Electrónica')\">\r\n              <img src=\"assets/Utils/electronic.webp\" class=\"d-block mx-auto\" style=\"width: 100px; height: 100px; object-fit: scale-down;\" alt=\"\">\r\n              <h5>Electrónica</h5>\r\n              <hr>\r\n              Dispositivos electrónicos de última generación. Desde smartphones hasta electrodomésticos, ¡todo lo que necesitas!\r\n            </div>\r\n          </div>\r\n      \r\n          <div class=\"col\">\r\n            <div class=\"card card-custom text-center p-3 h-100\" (click)=\"onCategoryChange('Entretenimiento')\" >\r\n              <img src=\"assets/Utils/entre.jpg\" class=\"d-block mx-auto\" style=\"width: 100px; height: 100px; object-fit:scale-down;\" alt=\"\">\r\n              <h5>Entretenimiento</h5>\r\n              <hr>\r\n              Disfruta de la mejor experiencia de entretenimiento con nuestros productos. Desde consolas de videojuegos hasta equipos de sonido.\r\n            </div>\r\n          </div>\r\n      \r\n          <div class=\"col\">\r\n            <div class=\"card card-custom text-center p-3 h-100\" (click)=\"onPriceChange('20000')\">\r\n              <img src=\"assets/Utils/20k.png\" class=\"d-block mx-auto\" style=\"width: 100px; height: 100px; object-fit: scale-down;\" alt=\"\">\r\n              <h5>Menos de $20.000</h5>\r\n              <hr>\r\n              Encuentra productos increíbles a precios accesibles. Todo lo que necesitas por menos de $20.000.\r\n            </div>\r\n          </div>\r\n      \r\n          <div class=\"col\">\r\n            <div class=\"card card-custom text-center p-3 h-100\"(click)=\"onTagChange('Nuevo')\" >\r\n              <img src=\"assets/Utils/new.png\" class=\"d-block mx-auto\" style=\"width: 100px; height: 100px; object-fit: scale-down;\" alt=\"\">\r\n              <h5>Productos Nuevos</h5>\r\n              <hr>\r\n              Productos nuevos y de calidad para todos los gustos.\r\n            </div>\r\n          </div>\r\n      \r\n        </div>\r\n      </div>\r\n\r\n      <!-- Carrusel horizontal de productos -->\r\n      <div class=\"container mt-5 mb-5\">\r\n        <div class=\"bg-white p-3 rounded border 1px solid shadow\">\r\n          <div class=\"d-flex justify-content-between align-items-center mb-2\">\r\n          <h4 class=\"mb-0\">Últimas Publicaciones</h4>\r\n            <a (click)=\"seeMore()\" class=\"text-secondary small text-decoration-none\" style=\"cursor: pointer;\">\r\n              Ver más <i class=\"bi bi-chevron-right small\"></i>\r\n            </a>\r\n        </div>\r\n          <div class=\"card-carousel-wrapper position-relative\">\r\n            <button class=\"carousel-arrow left-arrow\" (click)=\"scrollLeft()\">\r\n              <i class=\"bi bi-chevron-left\"></i>\r\n            </button>\r\n            <div class=\"card-carousel\" #carouselContainer>\r\n              <div class=\"card card-custom-size\" *ngFor=\"let pub of publications\" (click)=\"goToPublication(pub.id)\">\r\n                                  <div class=\"position-relative overflow-hidden\">\r\n                    <img\r\n                      [src]=\"pub.images && pub.images.length > 0 ? pub.images[0] : 'assets/not-found.jpg'\"\r\n                      class=\"card-img-top publication-image\"\r\n                      alt=\"Imagen de publicación\"\r\n                      style=\"height: 200px; object-fit: contain;\"\r\n                    />\r\n                    <!-- Badge de precio -->\r\n                    <div class=\"position-absolute top-0 end-0 m-3\">\r\n                      <span class=\"badge bg-dark bg-opacity-75 text-white fs-6 px-3 py-2 rounded-pill\">\r\n                        ${{ pub.price | decimalFormat }}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                <div class=\"card-body\">\r\n                  <p class=\"card-title text-truncate\">{{ pub.title }}</p>\r\n                  <p class=\"text-secondary small\">Por {{pub.user.name}} {{pub.user.surname}} \r\n                    @if (pub.user.verified) {<i class=\"bi bi-patch-check-fill text-info\"></i> }</p>\r\n                  <span *ngFor=\"let tag of pub.tags\" \r\n                    [ngClass]=\"getTagClass(tag)\" \r\n                    class=\"badge-tag d-inline-block me-1\">\r\n                    {{ tag }}\r\n                  </span>\r\n                  <p class=\"text-secondary small mt-3\">\r\n                    <i class=\"bi bi-geo-alt-fill me-1 text-primary\"></i>{{ pub.location }}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <button class=\"carousel-arrow right-arrow\" (click)=\"scrollRight()\">\r\n              <i class=\"bi bi-chevron-right\"></i>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Sección de Último Evento -->\r\n      <div class=\"container mt-5 mb-5\">\r\n        <div class=\"bg-white p-4 rounded shadow\">\r\n          <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <h4 class=\"mb-0\"><i class=\"bi bi-newspaper\"></i> Última Noticia</h4>\r\n            <a (click)=\"goToEvents()\" class=\"text-secondary small text-decoration-none\" style=\"cursor: pointer;\">\r\n              Ver todos los eventos <i class=\"bi bi-chevron-right small\"></i>\r\n            </a>\r\n          </div>\r\n          \r\n          <!-- Loading -->\r\n          <div *ngIf=\"loadingEvent\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Cargando evento...</span>\r\n            </div>\r\n            <p class=\"mt-2 text-muted\">Cargando último evento...</p>\r\n          </div>\r\n\r\n          <!-- Evento -->\r\n          <div *ngIf=\"!loadingEvent && lastEvent\" class=\"event-card border rounded p-3 shadow-sm\">\r\n            <div class=\"row g-0\">\r\n              <div class=\"col-md-4\">\r\n                <div class=\"event-image-container\">\r\n                  <img\r\n                    [src]=\"lastEvent.image_url || getDefaultEventImage()\"\r\n                    [alt]=\"lastEvent.title\"\r\n                    class=\"event-image rounded w-100\"\r\n                    style=\"height: 200px; object-fit: cover;\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"col-md-8\">\r\n                <div class=\"event-content p-3\">\r\n                  <h5 class=\"event-title mb-2\">{{ lastEvent.title }}</h5>\r\n\r\n                  <p class=\"event-description text-muted mb-3\" *ngIf=\"lastEvent.description\">\r\n                    {{ lastEvent.description }}\r\n                  </p>\r\n\r\n                  <div class=\"user-info d-flex align-items-center mb-2\">\r\n                    <div *ngIf=\"getUserAvatar(lastEvent.user); else userInitials\" class=\"me-2\">\r\n                      <img\r\n                        [src]=\"getUserAvatar(lastEvent.user)\"\r\n                        [alt]=\"getUserDisplayName(lastEvent.user)\"\r\n                        class=\"user-avatar rounded-circle\"\r\n                        style=\"width: 40px; height: 40px; object-fit: cover;\"\r\n                      />\r\n                    </div>\r\n                    <ng-template #userInitials>\r\n                      <div class=\"user-initials rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-2\"\r\n                          style=\"width: 40px; height: 40px; font-size: 14px;\">\r\n                        {{ getInitials(lastEvent.user) }}\r\n                      </div>\r\n                    </ng-template>\r\n                    <div class=\"user-details\">\r\n                      <span class=\"user-name fw-medium\">\r\n                        {{ getUserDisplayName(lastEvent.user) }}\r\n                        <span *ngIf=\"lastEvent.user.verified\" class=\"bi bi-patch-check-fill text-info ms-1\" title=\"Usuario verificado\"></span>\r\n                      </span>\r\n                      <div class=\"user-username text-muted small\">\r\n                        &#64;{{ lastEvent.user.username }}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div class=\"user-rating ms-auto\">\r\n                      <small class=\"text-muted\">\r\n                      <i class=\"bi bi-calendar-event me-1\"></i>\r\n                      <span *ngIf=\"lastEvent.start_date && lastEvent.end_date && lastEvent.start_date !== lastEvent.end_date\">\r\n                        Del {{ formatDate(lastEvent.start_date) }} al {{ formatDate(lastEvent.end_date) }}\r\n                      </span>\r\n                      <span *ngIf=\"lastEvent.start_date && (!lastEvent.end_date || lastEvent.start_date === lastEvent.end_date)\">\r\n                        {{ formatDate(lastEvent.start_date) }}\r\n                      </span>\r\n                    </small>\r\n                    </div>\r\n                  </div>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- Sin eventos -->\r\n          <div *ngIf=\"!loadingEvent && !lastEvent\" class=\"text-center py-4\">\r\n            <div class=\"text-muted\">\r\n              <i class=\"bi bi-calendar-x fa-2x mb-3\"></i>\r\n              <h6>No hay eventos disponibles</h6>\r\n              <p class=\"small\">Aún no se han creado eventos.</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Sección de Categorías -->\r\n      <div class=\"container mt-5 mb-5\">\r\n        <div class=\"bg-white p-4 rounded shadow\">\r\n          <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <h4 class=\"mb-0\">Todas nuestras Categorías</h4>\r\n          </div>\r\n          \r\n          <div class=\"row g-3\">\r\n            <div class=\"col-6 col-md-4 col-lg-3\" *ngFor=\"let category of categories\">\r\n              <div class=\"category-card border rounded-3 overflow-hidden h-100\" \r\n                   (click)=\"onCategoryChange(category.name)\"\r\n                   style=\"cursor: pointer; transition: all 0.2s ease;\">\r\n                <div class=\"category-image-container\">\r\n                  <img [src]=\"category.image\" \r\n                       class=\"d-block mx-auto\" \r\n                       [alt]=\"category.name\"\r\n                       style=\"width: 100px; height: 100px; object-fit: scale-down;\">\r\n                </div>\r\n                <div class=\"category-name p-3 text-center\">\r\n                  <h6 class=\"mb-0 fw-semibold\">{{ category.name }}</h6>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</div>",
          "home.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { HomeComponent } from './home.component';\r\n\r\ndescribe('HomeComponent', () => {\r\n  let component: HomeComponent;\r\n  let fixture: ComponentFixture<HomeComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [HomeComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(HomeComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "home.component.ts": "import { Component, ElementRef, inject, ViewChild, OnInit } from '@angular/core';\r\nimport { PublicationGet } from '../../models/PublicationGet';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { EventGet } from '../../models/EventGet';\r\nimport { CommonModule } from '@angular/common';\r\nimport { DecimalFormatPipe } from '../../pipes/decimal-format.pipe';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport { Router } from '@angular/router';\r\nimport { RouterModule } from '@angular/router';\r\nimport { Category } from '../../models/Category';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  standalone: true,\r\n  imports: [CommonModule, PipesModule, RouterModule],\r\n  templateUrl: './home.component.html',\r\n  styleUrl: './home.component.css'\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  publications: PublicationGet[] = [];\r\n  lastEvent: EventGet | null = null;\r\n  loadingEvent = false;\r\n  \r\n  categories: Category[] = [\r\n    {\r\n      name: 'Vehículos',\r\n      image: 'assets/Utils/cars-2.webp'\r\n    },\r\n    {\r\n      name: 'Deportes y fitness',\r\n      image: 'assets/Utils/sports.webp'\r\n    },\r\n    {\r\n      name: 'Hogar y muebles',\r\n      image: 'assets/Utils/home.webp'\r\n    },\r\n    {\r\n      name: 'Electrónica',\r\n      image: 'assets/Utils/electronic.webp'\r\n    },\r\n    {\r\n      name: 'Indumentaria',\r\n      image: 'assets/Utils/clothes.webp'\r\n    },\r\n    {\r\n      name: 'Juguetes y juegos',\r\n      image: 'assets/Utils/toys.webp'\r\n    },\r\n    {\r\n      name: 'Varios',\r\n      image: 'assets/Utils/various.jpg'\r\n    },\r\n    {\r\n      name: 'Entretenimiento',\r\n      image: 'assets/Utils/entre.jpg'\r\n    },\r\n    {\r\n      name: 'Arte',\r\n      image: 'assets/Utils/art.webp'\r\n    },\r\n    {\r\n      name: 'Herramientas',\r\n      image: 'assets/Utils/tools.webp'\r\n    }\r\n  ];\r\n\r\n  private readonly publicationService = inject(PublicationsService);\r\n  private readonly eventsService = inject(EventsService);\r\n  private readonly router = inject(Router);\r\n  @ViewChild('carouselContainer', { static: false }) carouselContainer!: ElementRef;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadLast10Publications();\r\n    this.loadLastEvent();\r\n  }\r\n\r\n  loadLast10Publications(): void {\r\n    this.publicationService.getLast10Publications().subscribe({\r\n      next: (publications: PublicationGet[]) => {\r\n        this.publications = publications;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar las últimas 10 publicaciones:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadLastEvent(): void {\r\n    this.loadingEvent = true;\r\n    this.eventsService.getLastEvent().subscribe({\r\n      next: (event: EventGet) => {\r\n        this.lastEvent = event;\r\n        this.loadingEvent = false;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar el último evento:', error);\r\n        this.loadingEvent = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  scrollLeft() {\r\n    this.carouselContainer.nativeElement.scrollBy({ left: -800, behavior: 'smooth' });\r\n  }\r\n\r\n  scrollRight() {\r\n    this.carouselContainer.nativeElement.scrollBy({ left: 800, behavior: 'smooth' });\r\n  }\r\n\r\n  goToPublication(id: number): void {\r\n    this.publicationService.addView(id).subscribe({\r\n      next: () => {\r\n        this.router.navigate(['/publication', id]).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  goToEvents(): void {\r\n    this.router.navigate(['/events']).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  onCategoryChange(categorySelected: string) {\r\n    this.router.navigate(['/search'], {\r\n      queryParams: {\r\n        category: categorySelected\r\n      }\r\n    });\r\n  }\r\n\r\n  onTagAndCategoryChange(tag: string, categorySelected: string) {\r\n    this.router.navigate(['/search'], {\r\n      queryParams: {\r\n        tag: tag,\r\n        category: categorySelected\r\n      }\r\n    });\r\n  }\r\n\r\n  onPriceChange(maxPrice: string) {\r\n    this.router.navigate(['/search'], {\r\n      queryParams: {\r\n        maxPrice: maxPrice\r\n      }\r\n    });\r\n  }\r\n\r\n  seeMore() {\r\n    this.router.navigate(['/search']).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  onTagChange(tag: string) {\r\n    this.router.navigate(['/search'], {\r\n      queryParams: {\r\n        tag: tag\r\n      }\r\n    });\r\n  }\r\n\r\n  getTagClass(tag: string): string {\r\n    const tagColorMap: { [key: string]: string } = {\r\n      'Nuevo': 'bg-success',\r\n      'Usado': 'bg-danger',\r\n      'Envío incluido': 'bg-primary',\r\n      'Retiro en mano': 'bg-secondary',\r\n      'Punto de encuentro': 'bg-info',\r\n      'Precio fijo': 'bg-dark',\r\n      'Precio negociable': 'bg-warning',\r\n    };\r\n\r\n    return `badge rounded-pill ${tagColorMap[tag] || 'bg-secondary'}`;\r\n  }\r\n\r\n  getDefaultEventImage(): string {\r\n    return 'assets/secondary.png'; \r\n  }\r\n\r\n  formatDate(dateString?: string): string {\r\n    if (!dateString) return '';\r\n         \r\n    const dateParts = dateString.split('-');\r\n    if (dateParts.length === 3) {\r\n      const [day, month, year] = dateParts;\r\n      const formattedDate = `${year}-${month}-${day}`;\r\n      const date = new Date(formattedDate);\r\n             \r\n      if (!isNaN(date.getTime())) {\r\n        return date.toLocaleDateString('es-ES', {\r\n          day: '2-digit',\r\n          month: '2-digit',\r\n          year: 'numeric'\r\n        });\r\n      }\r\n    }\r\n         \r\n    return dateString;\r\n  }\r\n\r\n  getUserDisplayName(user: any): string {\r\n    return `${user.name} ${user.surname}`;\r\n  }\r\n\r\n  getUserAvatar(user: any): string {\r\n    return user.avatar_url || '';\r\n  }\r\n\r\n  getInitials(user: any): string {\r\n    const firstLetterName = user.name ? user.name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = user.surname ? user.surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n}"
        },
        "login": {
          "login.component.css": "/* Fuente global */\r\n* {\r\n    font-family: 'Poppins', sans-serif;\r\n  }\r\n  \r\n  /* Estructura general */\r\n  .container-fluid {\r\n    display: flex;\r\n    height: 80vh;\r\n    padding: 0;\r\n\r\n  }\r\n  \r\n  /* Columna izquierda con fondo y ola */\r\n  .gradient-bg {\r\n    position: relative;\r\n    background-color: #f8f9fa;\r\n    color: white;\r\n    overflow: hidden;\r\n  }\r\n  \r\n  /* Ola en la parte inferior */\r\n  .gradient-bg .wave {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    line-height: 0;\r\n  }\r\n  \r\n  /* Columna derecha */\r\n  .bg-light {\r\n    background-color: #f8f9fa;\r\n  }\r\n  \r\n  .col-md-6 {\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  \r\n  /* Título */\r\n  .welcome-text {\r\n    font-weight: 600;\r\n    font-size: 2.5rem;\r\n    color: var(--color-secundario);\r\n    text-align: center;\r\n    margin-bottom: 1rem;\r\n    z-index: 1;\r\n  }\r\n  \r\n  /* Formulario */\r\n  form {\r\n    max-width: 400px;\r\n    width: 100%;\r\n    background-color: white;\r\n    padding: 2rem;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  /* Inputs enfocados */\r\n  form input:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(30, 60, 114, 0.25);\r\n    border-color: #000000;\r\n  }\r\n  \r\n  /* Botones */\r\n  button {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n  \r\n  .wave {\r\n    background-color: #f8f9fa;\r\n  }",
          "login.component.html": "<!-- Contenedor principal -->\r\n<div class=\"container-fluid\">\r\n  \r\n  <!-- Columna izquierda con ola y mensaje de bienvenida -->\r\n  <div class=\"col-md-6 gradient-bg d-flex justify-content-center align-items-center\">\r\n    <h1 class=\"welcome-text\">\r\n      ¡Bienvenido!<br />Nos alegra verte de nuevo\r\n    </h1>\r\n  </div>\r\n\r\n  <!-- Columna derecha: Login -->\r\n  @if (!showRecoveryForm && !showCodeVerification) {\r\n    <div class=\"col-md-6 bg-light d-flex justify-content-center align-items-center\">\r\n      <form [formGroup]=\"reactiveForm\" (ngSubmit)=\"login()\" autocomplete=\"on\">\r\n        <small class=\"text-end d-block mb-3\">¿No tienes cuenta? <a [routerLink]=\"'/register'\">Crear cuenta</a></small>\r\n        \r\n        <div class=\"mb-3\">\r\n          <label for=\"email\" class=\"form-label\">E-mail o usuario</label>\r\n          <input type=\"email\" id=\"email\" class=\"form-control\" formControlName=\"email\" autocomplete=\"email\" [ngClass]=\"onValidate('email', reactiveForm)\" />\r\n          <div class=\"invalid-feedback d-block mt-1 text-start\">{{showError('email', reactiveForm)}}</div>\r\n        </div>\r\n        \r\n        <div class=\"mb-3\">\r\n          <label for=\"password\" class=\"form-label\">Contraseña</label>\r\n          <input type=\"password\" id=\"password\" class=\"form-control\" formControlName=\"password\" autocomplete=\"current-password\" [ngClass]=\"onValidate('password', reactiveForm)\" />\r\n          <div class=\"invalid-feedback d-block mt-1 text-start\">{{showError('password', reactiveForm)}}</div>\r\n        </div>\r\n        \r\n        <button type=\"submit\" class=\"btn btn-primary w-100\" [disabled]=\"!reactiveForm.valid\">Ingresar</button>\r\n        \r\n        <a class=\"text-center d-block\" style=\"font-size: 0.8rem; cursor: pointer;\" (click)=\"showRecoveryForm = true\">¿Olvidaste tu contraseña?</a>\r\n      </form>\r\n    </div>\r\n  }\r\n\r\n  <!-- Columna derecha: Recuperación por email -->\r\n  @if (showRecoveryForm && !showCodeVerification) {\r\n    <div class=\"col-md-6 bg-light d-flex justify-content-center align-items-center\">\r\n      <form [formGroup]=\"recoveryForm\" (ngSubmit)=\"recoverPassword()\">\r\n        <div class=\"mb-3\">\r\n          <label for=\"recEmail\" class=\"form-label\">Ingresa tu e-mail</label>\r\n          <input type=\"email\" id=\"recEmail\" class=\"form-control\" formControlName=\"recEmail\" autocomplete=\"email\" [ngClass]=\"onValidate('recEmail', recoveryForm)\" />\r\n          <div class=\"invalid-feedback d-block mt-1 text-start\">{{showError('recEmail', recoveryForm)}}</div>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-primary w-100\" [disabled]=\"!recoveryForm.valid\">Enviar enlace de recuperación</button>\r\n        \r\n        <a href=\"#\" class=\"text-center d-block mt-2\" style=\"font-size: 0.8rem;\" (click)=\"showRecoveryForm = false\">← Volver al inicio de sesión</a>\r\n      </form>\r\n    </div>\r\n  }\r\n\r\n  @if (showCodeVerification) {\r\n    <div class=\"col-md-6 bg-light d-flex justify-content-center align-items-center\">\r\n      <form [formGroup]=\"codeForm\" (ngSubmit)=\"confirmRecoveryCode()\">\r\n        <p class=\"text-center mb-3\">\r\n          Código enviado. Ingresalo aquí (expira en {{ minutes }}:{{ seconds | number: '2.0' }})\r\n        </p>\r\n\r\n        <div class=\"mb-3\">\r\n          <div class=\"d-flex justify-content-between\">\r\n            <ng-container *ngFor=\"let i of codeControls\">\r\n              <input\r\n                type=\"text\"\r\n                maxlength=\"1\"\r\n                class=\"form-control text-center mx-1\"\r\n                [formControlName]=\"'code' + i\"\r\n                style=\"width: 40px;\"\r\n                [ngClass]=\"onValidateCode()\"\r\n                (input)=\"focusNext($event, i)\"\r\n                (keydown)=\"onKeyDown($event, i)\"\r\n                (paste)=\"onPaste($event, i)\"\r\n                autocomplete=\"off\"\r\n                inputmode=\"numeric\" />\r\n            </ng-container>\r\n          </div>\r\n          <div class=\"invalid-feedback d-block mt-1 text-start\">{{showCodeError()}}</div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"newPassword\" class=\"form-label\">Nueva contraseña</label>\r\n          <input type=\"password\" id=\"newPassword\" class=\"form-control\" formControlName=\"newPassword\" [ngClass]=\"onValidate('newPassword', codeForm)\" />\r\n          <div class=\"invalid-feedback d-block mt-1 text-start\">{{showError('newPassword', codeForm)}}</div>\r\n        </div>\r\n\r\n        <div class=\"mb-3\">\r\n          <label for=\"repeatPassword\" class=\"form-label\">Repetir contraseña</label>\r\n          <input type=\"password\" id=\"repeatPassword\" class=\"form-control\" formControlName=\"repeatPassword\" [ngClass]=\"onValidate('repeatPassword', codeForm)\" />\r\n          <div class=\"invalid-feedback d-block mt-1 text-start\">{{showError('repeatPassword', codeForm)}}</div>\r\n        </div>\r\n\r\n        <button type=\"submit\" class=\"btn btn-success w-100\" [disabled]=\"codeForm.invalid\">Cambiar contraseña</button>\r\n\r\n        <a href=\"#\" class=\"text-center d-block mt-2\" style=\"font-size: 0.8rem;\" (click)=\"cancelVerification()\">← Cancelar y volver al inicio</a>\r\n      </form>\r\n    </div>\r\n  }\r\n\r\n</div>\r\n\r\n<!-- Ola SVG abajo -->\r\n<div class=\"wave\">\r\n  <svg viewBox=\"0 0 500 150\" preserveAspectRatio=\"none\" style=\"height: 150px; width: 100%;\">\r\n    <path d=\"M0.00,49.98 C120.00,150.00 380.00,-50.00 500.00,49.98 L500.00,150.00 L0.00,150.00 Z\" style=\"stroke: none; fill: url(#gradient);\"></path>\r\n    <defs>\r\n      <linearGradient id=\"gradient\" x1=\"0\" x2=\"0\" y1=\"1\" y2=\"0\">\r\n        <stop offset=\"0%\" style=\"stop-color: var(--bs-primary); stop-opacity: 1;\" />\r\n        <stop offset=\"100%\" style=\"stop-color: #034AA6; stop-opacity: 1;\" />\r\n      </linearGradient>\r\n    </defs>\r\n  </svg>\r\n</div>",
          "login.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { LoginComponent } from './login.component';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [LoginComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "login.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { LoginUser } from '../../models/LoginUser';\r\nimport Swal from 'sweetalert2';\r\nimport { ValidatorService } from '../../services/validator.service';\r\nimport { RecoveryEmailPost } from '../../models/RecoveryEmailPost';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, ReactiveFormsModule,RouterModule],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.css'\r\n})\r\nexport class LoginComponent {\r\n\r\n  private readonly router = inject(Router);\r\n  private readonly apiService = inject(UsersService);\r\n  private readonly authService = inject(AuthService);\r\n  private readonly validatorService = inject(ValidatorService);\r\n\r\n  errorLog: boolean = false;\r\n  showRecoveryForm: boolean = false;\r\n  recoveryEmailSentAt: Date | null = null;\r\n  showCodeVerification = false;\r\n  minutes: number = 15;\r\n  seconds: number = 0;\r\n  interval: any;\r\n  codeControls = [0, 1, 2, 3, 4, 5];\r\n\r\n  reactiveForm = new FormGroup({\r\n    email: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(5),\r\n      Validators.maxLength(50)],\r\n    [this.validatorService.validateNotBanned()]),\r\n    password: new FormControl('', [\r\n      Validators.required,\r\n      Validators.minLength(8),\r\n    ]),\r\n  });\r\n\r\n  recoveryForm = new FormGroup({\r\n    recEmail: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(50), Validators.email],[this.validatorService.validateNotBanned(), this.validatorService.validateNotUniqueEmail()]),\r\n  });\r\n\r\n  codeForm = new FormGroup({\r\n    code0: new FormControl('', [Validators.required, Validators.pattern('[0-9]')]),\r\n    code1: new FormControl('', [Validators.required, Validators.pattern('[0-9]')]),\r\n    code2: new FormControl('', [Validators.required, Validators.pattern('[0-9]')]),\r\n    code3: new FormControl('', [Validators.required, Validators.pattern('[0-9]')]),\r\n    code4: new FormControl('', [Validators.required, Validators.pattern('[0-9]')]),\r\n    code5: new FormControl('', [Validators.required, Validators.pattern('[0-9]')]),\r\n    newPassword: new FormControl('', [Validators.required, Validators.minLength(8)]),\r\n    repeatPassword: new FormControl('', [Validators.required])\r\n  }, { validators: [this.validatorService.matchFields('newPassword', 'repeatPassword')] });\r\n\r\n  showError(controlName: string, form: FormGroup): string {\r\n  const control = form.get(controlName);\r\n  if (control && control.errors && (control.touched || control.dirty)) {\r\n    const [errorKey] = Object.keys(control.errors);\r\n\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'email':\r\n          return 'Formato de correo electrónico inválido.';\r\n        case 'minlength':\r\n          return `Valor ingresado demasiado corto. Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `Valor ingresado demasiado largo. Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'emailNotTaken':\r\n          return 'El correo electrónico no está asociado a ningún usuario registrado.';\r\n        case 'userBanned':\r\n          return 'Tu cuenta ha sido suspendida. Contacta al administrador para más información.';\r\n        case 'matchFields':\r\n          return 'Las contraseñas no coinciden.';\r\n        case 'pattern':\r\n          return 'El código debe contener solo números.';\r\n        default:\r\n          return 'Error no identificado en el campo.';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  showCodeError(): string {\r\n    for (const i of this.codeControls) {\r\n      const controlName = 'code' + i;\r\n      const control = this.codeForm.get(controlName);\r\n      if (control && control.errors && (control.touched || control.dirty)) {\r\n        const [errorKey] = Object.keys(control.errors);\r\n        switch (errorKey) {\r\n          case 'required':\r\n            return 'Debes completar todos los dígitos del código.';\r\n          case 'pattern':\r\n            return 'El código debe contener solo números.';\r\n          default:\r\n            return 'Error en el código ingresado.';\r\n        }\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  onValidateCode() {\r\n    return {};\r\n    }\r\n\r\n\r\n  onValidate(controlName: string, form: FormGroup) {\r\n    const control = form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    };\r\n  }\r\n\r\nfocusNext(event: any, index: number) {\r\n  const input = event.target;\r\n  const value = input.value;\r\n  \r\n  if (value && index < 5) {\r\n    const nextInput = document.querySelector(`input[formControlName=\"code${index + 1}\"]`) as HTMLInputElement;\r\n    if (nextInput) {\r\n      nextInput.focus();\r\n    }\r\n  }\r\n\r\n  if (!value && index > 0) {\r\n    const prevInput = document.querySelector(`input[formControlName=\"code${index - 1}\"]`) as HTMLInputElement;\r\n    if (prevInput) {\r\n      prevInput.focus();\r\n    }\r\n  }\r\n}\r\n\r\nonKeyDown(event: KeyboardEvent, index: number) {\r\n  const input = event.target as HTMLInputElement;\r\n  \r\n  if (event.key === 'Backspace' && !input.value && index > 0) {\r\n    const prevInput = document.querySelector(`input[formControlName=\"code${index - 1}\"]`) as HTMLInputElement;\r\n    if (prevInput) {\r\n      prevInput.focus();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  \r\n  if (event.key === 'ArrowLeft' && index > 0) {\r\n    const prevInput = document.querySelector(`input[formControlName=\"code${index - 1}\"]`) as HTMLInputElement;\r\n    if (prevInput) {\r\n      prevInput.focus();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  \r\n  if (event.key === 'ArrowRight' && index < 5) {\r\n    const nextInput = document.querySelector(`input[formControlName=\"code${index + 1}\"]`) as HTMLInputElement;\r\n    if (nextInput) {\r\n      nextInput.focus();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n  \r\n  if (!/[0-9]/.test(event.key) && !['Backspace', 'Delete', 'Tab', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\r\n    event.preventDefault();\r\n  }\r\n}\r\n\r\nonPaste(event: ClipboardEvent, index: number) {\r\n  event.preventDefault();\r\n  const pasteData = event.clipboardData?.getData('text') || '';\r\n  const digits = pasteData.replace(/\\D/g, '');\r\n  \r\n  if (digits.length > 0) {\r\n    for (let i = 0; i < digits.length && (index + i) < 6; i++) {\r\n      const controlName = `code${index + i}`;\r\n      this.codeForm.get(controlName)?.setValue(digits[i]);\r\n    }\r\n    \r\n    const nextIndex = Math.min(index + digits.length, 5);\r\n    const nextInput = document.querySelector(`input[formControlName=\"code${nextIndex}\"]`) as HTMLInputElement;\r\n    if (nextInput) {\r\n      nextInput.focus();\r\n    }\r\n  }\r\n}\r\n\r\n  async login() {\r\n    this.authService.verifyLogin(this.reactiveForm.value as LoginUser).subscribe({\r\n      next: async (data) => {\r\n        await this.authService.login(data);\r\n        this.errorLog = false;\r\n        this.router.navigate(['/home']);\r\n      \r\n      },\r\n      error: (error) => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'Usuario o contraseña incorrectos.',\r\n          icon: 'error',\r\n          timer: 1500,\r\n          showConfirmButton: false\r\n        });\r\n        this.errorLog = true;\r\n        this.cleanForm();\r\n      },\r\n    });\r\n  }\r\n\r\n  cleanForm() {\r\n    this.reactiveForm.reset();\r\n  }\r\n\r\ngetFirstInvalidCodeControl(): string {\r\n  for (const i of this.codeControls) {\r\n    const controlName = 'code' + i;\r\n    const control = this.codeForm.get(controlName);\r\n    if (control && control.invalid && (control.dirty || control.touched)) {\r\n      return controlName;\r\n    }\r\n  }\r\n  return this.codeControls.length > 0 ? 'code0' : ''; \r\n}\r\n\r\nstartTimer() {\r\n  this.minutes = 15;\r\n  this.seconds = 0;\r\n  this.interval = setInterval(() => {\r\n    if (this.seconds > 0) {\r\n      this.seconds--;\r\n    } else {\r\n      if (this.minutes > 0) {\r\n        this.minutes--;\r\n        this.seconds = 59;\r\n      } else {\r\n        clearInterval(this.interval);\r\n        Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Código expirado',\r\n          text: 'El tiempo para ingresar el código ha expirado. Intenta recuperarlo nuevamente.',\r\n        });\r\n        this.showCodeVerification = false;\r\n        this.showRecoveryForm = true;\r\n      }\r\n    }\r\n  }, 1000);\r\n}\r\n\r\n  recoverPassword() {\r\n  if (this.recoveryForm.invalid) return;\r\n\r\n  const dto: RecoveryEmailPost = {\r\n    emailOrUsername: this.recoveryForm.value.recEmail!\r\n  };\r\n\r\n  this.authService.recoverPassword(dto).subscribe({\r\n    next: () => {\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Correo enviado',\r\n        text: 'Hemos enviado un enlace de recuperación a tu correo.',\r\n        timer: 2500,\r\n        showConfirmButton: false,\r\n      });\r\n      this.showRecoveryForm = false;\r\n      this.showCodeVerification = true;\r\n      this.startTimer();\r\n    },\r\n    error: () => {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'No se pudo enviar el correo. Verifica el e-mail ingresado.',\r\n        timer: 2500,\r\n        showConfirmButton: false,\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nconfirmRecoveryCode() {\r\n  if (this.codeForm.invalid) return;\r\n\r\n  const code = Array.from({ length: 6 }, (_, i) => this.codeForm.get('code' + i)?.value).join('');\r\n  const newPassword = this.codeForm.value.newPassword!;\r\n  const repeatPassword = this.codeForm.value.repeatPassword!;\r\n\r\n  if (newPassword !== repeatPassword) {\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Error',\r\n      text: 'Las contraseñas no coinciden.',\r\n      timer: 2000,\r\n      showConfirmButton: false\r\n    });\r\n    return;\r\n  }\r\n\r\n  const dto: { emailOrUsername: string; code: string; newPassword: string } = {\r\n    emailOrUsername: this.recoveryForm.value.recEmail!,\r\n    code,\r\n    newPassword\r\n  };\r\n\r\n  this.authService.resetPassword(dto).subscribe({\r\n    next: () => {\r\n      clearInterval(this.interval);\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Contraseña restablecida',\r\n        text: 'Tu contraseña ha sido actualizada exitosamente.',\r\n        timer: 2000,\r\n        showConfirmButton: false\r\n      }).then(() => {\r\n        this.router.navigate(['/login']);\r\n      });\r\n      this.showCodeVerification = false;\r\n      this.codeForm.reset();\r\n      this.reactiveForm.reset();\r\n    },\r\n    error: () => {\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Error',\r\n        text: 'El código ingresado es incorrecto o ha expirado.',\r\n        timer: 2000,\r\n        showConfirmButton: false\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\ncancelVerification() {\r\n  clearInterval(this.interval);\r\n  this.showCodeVerification = false;\r\n  this.showRecoveryForm = false;\r\n  this.codeForm.reset();\r\n}\r\n}"
        },
        "my-favorites": {
          "my-favorites.component.css": ".card-img-top {\r\n  height: 200px;\r\n  object-fit: cover;\r\n}\r\n\r\n.card-body p {\r\n  margin-bottom: 0.5rem;\r\n}\r\n\r\n.pub-card {\r\n  cursor: pointer;\r\n  transition: background-color 0.2s;\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.pub-card:hover {\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.eliminar-text {\r\n  cursor: pointer;\r\n  font-weight: 500;\r\n}\r\n\r\n.eliminar-text:hover {\r\n  text-decoration: underline;\r\n}\r\n\r\n.pub-title {\r\n  transition: color 0.2s, text-decoration 0.2s;\r\n}\r\n\r\n.clickable-area:hover .pub-title {\r\n  color: var(--bs-primary);\r\n  text-decoration: underline;\r\n}\r\n\r\n.eliminar-text {\r\n  cursor: pointer;\r\n}",
          "my-favorites.component.html": "<div class=\"fondo-gris py-4 min-vh-100\">\r\n  <div class=\"container\">\r\n    <h2 class=\"mb-4 text-primary\">Favoritos</h2>\r\n\r\n    <div *ngIf=\"favorites.length === 0\" class=\"text-center mt-2 bg-white p-5 rounded shadow\">\r\n      <img src=\"assets/Utils/favorites.png\" alt=\"Sin favoritos\" width=\"100\" />\r\n      <p class=\"mt-3 fs-5\">No tienes favoritos aún</p>\r\n      <p>Agrega publicaciones a favoritos presionando el <i class=\"bi bi-heart\"></i> en las publicaciones.</p>\r\n    </div>\r\n\r\n    <div *ngIf=\"favorites.length > 0\" class=\"d-flex flex-column gap-3\">\r\n<div \r\n  class=\"pub-card bg-white rounded shadow-sm p-3 d-flex align-items-start justify-content-between\"\r\n  *ngFor=\"let pub of displayedFavorites\"\r\n  (click)=\"goToPublication(pub.id)\"\r\n>\r\n  <!-- Zona interactiva (hover afecta título) -->\r\n    <div class=\"d-flex align-items-start clickable-area\">\r\n        <img \r\n        [src]=\"pub.images[0] || 'assets/Publications/0-notfound.jpg'\" \r\n        alt=\"Imagen publicación\"\r\n        class=\"me-3 rounded\"\r\n        style=\"width: 100px; height: 100px; object-fit: cover;\"\r\n        />\r\n\r\n        <div class=\"flex-grow-1\">\r\n        <h6 class=\"mb-2 pub-title\">{{ pub.title }}</h6>\r\n        <h4 class=\"mb-2\">$ {{ pub.price | decimalFormat }}</h4>\r\n        <p class=\"text-muted mb-0\"><i class=\"bi bi-geo-alt me-1\"></i>{{ pub.location }}</p>\r\n        </div>\r\n    </div>\r\n\r\n    <small \r\n        class=\"text-primary eliminar-text\" \r\n        (click)=\"removeFavorite(pub); $event.stopPropagation()\"\r\n    >\r\n        Eliminar\r\n    </small>\r\n    </div>\r\n\r\n    <div *ngIf=\"displayedFavorites.length < favorites.length\" class=\"text-center mt-4\">\r\n        <button class=\"btn btn-outline-primary\" (click)=\"showMore()\">Ver más</button>\r\n    </div>\r\n    </div>\r\n</div>\r\n  <div\r\n  #liveToast\r\n  class=\"toast align-items-center border-0 position-fixed\"\r\n  role=\"alert\"\r\n  aria-live=\"assertive\"\r\n  aria-atomic=\"true\"\r\n  style=\"bottom: 1rem; left: 50%; transform: translateX(-50%); min-width: 300px;\"\r\n>\r\n  <div class=\"d-flex\">\r\n    <div class=\"toast-body\">{{ toastMessage }}</div>\r\n    <button\r\n      type=\"button\"\r\n      class=\"btn-close btn-close-white me-2 m-auto\"\r\n      data-bs-dismiss=\"toast\"\r\n      aria-label=\"Close\"\r\n      (click)=\"hideToast()\"\r\n    ></button>\r\n  </div>\r\n</div>\r\n",
          "my-favorites.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { MyFavoritesComponent } from './my-favorites.component';\r\n\r\ndescribe('MyFavoritesComponent', () => {\r\n  let component: MyFavoritesComponent;\r\n  let fixture: ComponentFixture<MyFavoritesComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [MyFavoritesComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(MyFavoritesComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "my-favorites.component.ts": "import { Component, ElementRef, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { PublicationGet } from '../../models/PublicationGet';\r\nimport { FavoriteService } from '../../services/favorite.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Toast } from 'bootstrap';\r\nimport { PublicationsService } from '../../services/publications.service';\r\n\r\n@Component({\r\n  selector: 'app-my-favorites',\r\n  standalone: true,\r\n  imports: [CommonModule,PipesModule],\r\n  templateUrl: './my-favorites.component.html',\r\n  styleUrl: './my-favorites.component.css'\r\n})\r\nexport class MyFavoritesComponent implements OnInit {\r\n\r\n  favorites: PublicationGet[] = [];\r\n  showCount = 5;\r\n  toastMessage = '';\r\n  toastInstance: any;\r\n  displayedFavorites = this.favorites.slice(0, this.showCount);\r\n  private readonly favoriteService = inject(FavoriteService);\r\n  private readonly authService = inject(AuthService);\r\n  private readonly publicationService = inject(PublicationsService);\r\n  private readonly router = inject(Router);\r\n  @ViewChild('liveToast', { static: false }) toastElement!: ElementRef<HTMLDivElement>;\r\n\r\n  ngOnInit(): void {\r\n    this.loadFavorites();\r\n  }\r\n\r\n  loadFavorites(): void {\r\n    const userId = this.authService.getUser().id;\r\n    this.favoriteService.getFavoritesByUser(userId).subscribe({\r\n      next: (res: PublicationGet[]) => {\r\n        this.favorites = res;\r\n        this.displayedFavorites = this.favorites.slice(0, this.showCount);\r\n      },\r\n      error: (error) => {\r\n        this.favorites = [];\r\n        this.displayedFavorites = [];\r\n        console.error('Error loading favorites:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  showMore() {\r\n    this.showCount += 5;\r\n    this.displayedFavorites = this.favorites.slice(0, this.showCount);\r\n  }\r\n\r\n  goToPublication(id: number): void {\r\n    this.publicationService.addView(id).subscribe({\r\n      next: () => {\r\n        this.router.navigate(['/publication', id]).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  removeFavorite(pubToRemove: PublicationGet) {\r\n  const userId = this.authService.getUser().id;\r\n  const dto = {\r\n    publication_id: pubToRemove.id,\r\n    user_id: userId,\r\n  };\r\n\r\n  this.favoriteService.deleteFavorite(dto).subscribe({\r\n    next: () => {\r\n      this.favorites = this.favorites.filter(pub => pub !== pubToRemove);\r\n      this.displayedFavorites = this.favorites.slice(0, this.showCount);\r\n      this.showToast('Eliminaste el producto de Mis favoritos', false);\r\n    },\r\n    error: () => {\r\n      this.showToast('Error al eliminar favorito', false);\r\n    }\r\n  });\r\n}\r\n\r\n  showToast(message: string, success: boolean) {\r\n    this.toastMessage = message;\r\n  \r\n    const toastEl = this.toastElement.nativeElement;\r\n  \r\n    toastEl.classList.remove('bg-success', 'bg-dark', 'text-white');\r\n  \r\n    if (success) {\r\n      toastEl.classList.add('bg-success', 'text-white'); // fondo verde\r\n    } else {\r\n      toastEl.classList.add('bg-dark', 'text-white');    // fondo negro\r\n    }\r\n  \r\n    if (!this.toastInstance) {\r\n      this.toastInstance = new Toast(toastEl);\r\n    }\r\n  \r\n    this.toastInstance.show();\r\n  }\r\n  \r\n  hideToast() {\r\n    if (this.toastInstance) {\r\n      this.toastInstance.hide();\r\n    }\r\n  }\r\n\r\n}\r\n"
        },
        "my-profile": {
          "my-profile.component.css": ".fondo-gris {\r\n  min-height: 100vh;\r\n}\r\n\r\n.perfil-card {\r\n  border: none;\r\n  border-radius: 1rem;\r\n  overflow: hidden;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n}\r\n\r\n.perfil-card .card-header {\r\n  background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-primary-dark, #0a58ca) 100%) !important;\r\n  border: none;\r\n  position: relative;\r\n}\r\n\r\n.avatar-perfil {\r\n  width: 120px;\r\n  height: 120px;\r\n  border-radius: 50%;\r\n  background-color: white;\r\n  border: 4px solid rgba(255, 255, 255, 0.3);\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  overflow: hidden;\r\n  position: relative;\r\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\r\n}\r\n\r\n.avatar-perfil:hover {\r\n  transform: scale(1.05);\r\n  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.img-avatar {\r\n  width: 100%;\r\n  height: 100%;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n}\r\n\r\n.avatar-initials {\r\n  font-size: 2.5rem;\r\n  color: black;\r\n  text-transform: uppercase;\r\n}\r\n\r\n.avatar-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0;\r\n  transition: opacity 0.3s ease;\r\n  border-radius: 50%;\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.avatar-perfil:hover .avatar-overlay {\r\n  opacity: 1;\r\n}\r\n\r\n.info-item {\r\n  padding: 0.75rem;\r\n  border-radius: 0.5rem;\r\n  border: 1px solid var(--bs-border-color);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.info-item:hover {\r\n  border-color: var(--bs-primary);\r\n  box-shadow: 0 2px 8px rgba(var(--bs-primary-rgb), 0.1);\r\n}\r\n\r\n.info-label {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.25rem;\r\n  color: var(--bs-gray-700);\r\n  font-size: 0.9rem;\r\n}\r\n\r\n.info-value {\r\n  font-size: 1rem;\r\n  color: var(--bs-gray-900);\r\n  padding-left: 1.5rem;\r\n}\r\n\r\n.rating-container {\r\n  border: 1px solid var(--bs-border-color);\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.rating-container:hover {\r\n  border-color: var(--bs-primary);\r\n  box-shadow: 0 2px 8px rgba(var(--bs-primary-rgb), 0.1);\r\n}\r\n\r\n.bi-star-fill {\r\n  color: #ffc107;\r\n}\r\n\r\n.bi-star-half {\r\n  color: #ffc107;\r\n}\r\n\r\n.bi-star {\r\n  color: var(--bs-gray-300);\r\n}\r\n\r\n.btn {\r\n  border-radius: 0.75rem;\r\n  font-weight: 500;\r\n  padding: 0.75rem 1.5rem;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.btn-primary {\r\n  background: linear-gradient(135deg, var(--bs-primary) 0%, var(--bs-primary-dark, #0a58ca) 100%);\r\n  border: none;\r\n  box-shadow: 0 4px 15px rgba(var(--bs-primary-rgb), 0.3);\r\n}\r\n\r\n.btn-primary:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 6px 20px rgba(var(--bs-primary-rgb), 0.4);\r\n}\r\n\r\n.btn-outline-primary:hover {\r\n  transform: translateY(-2px);\r\n  box-shadow: 0 4px 15px rgba(var(--bs-primary-rgb), 0.2);\r\n}\r\n\r\n.btn-secondary {\r\n  background-color: var(--bs-gray-600);\r\n  border-color: var(--bs-gray-600);\r\n}\r\n\r\n.btn-secondary:hover {\r\n  transform: translateY(-2px);\r\n  background-color: var(--bs-gray-700);\r\n  border-color: var(--bs-gray-700);\r\n}\r\n\r\n.subscription-badge {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  padding: 0.5rem 1rem;\r\n  border-radius: 2rem;\r\n  font-size: 0.9rem;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n}\r\n\r\n.subscription-badge.bronce {\r\n  background-color: #cd7f32;\r\n  color: white;\r\n  box-shadow: 0 2px 8px rgba(205, 127, 50, 0.3);\r\n}\r\n\r\n.subscription-badge.plata {\r\n  background-color: #c0c0c0;\r\n  color: #333;\r\n  box-shadow: 0 2px 8px rgba(192, 192, 192, 0.3);\r\n}\r\n\r\n.subscription-badge.oro {\r\n  background-color: #ffd700;\r\n  color: #333;\r\n  box-shadow: 0 2px 8px rgba(255, 215, 0, 0.3);\r\n}\r\n\r\n.subscription-badge.sin-suscripcion {\r\n  background-color: var(--bs-gray-500);\r\n  color: white;\r\n  box-shadow: 0 2px 8px rgba(108, 117, 125, 0.3);\r\n}\r\n\r\n.btn-sm {\r\n  padding: 0.375rem 0.75rem;\r\n  font-size: 0.875rem;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.perfil-card {\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n@media (max-width: 576px) {\r\n  .perfil-card {\r\n    margin: 1rem;\r\n  }\r\n  \r\n  .avatar-perfil {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n  \r\n  .avatar-initials {\r\n    font-size: 2rem;\r\n  }\r\n  \r\n  .card-header {\r\n    padding: 2rem 1rem !important;\r\n  }\r\n}\r\n\r\n.btn:focus,\r\n.avatar-perfil:focus {\r\n  outline: 2px solid var(--bs-primary);\r\n  outline-offset: 2px;\r\n}\r\n\r\n.info-item,\r\n.rating-container {\r\n  cursor: default;\r\n}\r\n\r\n.subscription-container .btn:hover {\r\n  transform: translateY(-1px);\r\n}",
          "my-profile.component.html": "<div class=\"container-fluid d-flex justify-content-center align-items-start fondo-gris\" style=\"min-height: 100vh; padding: 2rem 1rem;\">\r\n  <div class=\"card perfil-card shadow-lg col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5\">\r\n    \r\n    <!-- Header del perfil -->\r\n    <div class=\"card-header bg-primary text-white text-center py-4 position-relative\">\r\n      <div class=\"position-absolute top-0 end-0 p-3\">\r\n        <i class=\"bi bi-pencil-square text-white\" \r\n           style=\"cursor: pointer; font-size: 1.2rem;\" \r\n           (click)=\"openEditProfileModal()\" \r\n           title=\"Editar perfil\"></i>\r\n      </div>\r\n      \r\n      <!-- Avatar -->\r\n      <div class=\"avatar-perfil mx-auto mb-3 position-relative\" \r\n           (click)=\"onChangeAvatar()\" \r\n           style=\"cursor: pointer;\">\r\n        <img *ngIf=\"user.avatar_url; else initials\" \r\n            [src]=\"'http://localhost:8080/Profiles/' + user.id + '-profile-picture.jpg'\"\r\n             alt=\"Avatar\" \r\n             class=\"img-avatar\">\r\n        <ng-template #initials>\r\n          <div class=\"avatar-initials\">\r\n            {{ getInitials(user.name, user.surname) }}\r\n          </div>\r\n        </ng-template>\r\n        <div class=\"avatar-overlay\">\r\n          <i class=\"bi bi-camera-fill\"></i>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Nombre completo con verificación -->\r\n      <div class=\"d-flex align-items-center justify-content-center mb-1\">\r\n        <h3 class=\"mb-0 fw-bold me-2\">{{ user.name }} {{ user.surname }}</h3>\r\n        @if (user.verified) {\r\n        <i class=\"bi bi-patch-check-fill text-info\" \r\n           style=\"font-size: 1.2rem;\" \r\n           title=\"Usuario verificado\"></i>\r\n        }\r\n      </div>\r\n      <p class=\"mb-0 opacity-75\">\r\n        <i class=\"bi bi-geo-alt me-1\"></i>{{ user.location }}\r\n      </p>\r\n    </div>\r\n    \r\n    <!-- Cuerpo del perfil -->\r\n    <div class=\"card-body p-4\">\r\n      \r\n      <!-- Información básica -->\r\n      <div class=\"row g-3 mb-4\">\r\n        <div class=\"col-12\">\r\n          <div class=\"info-item\">\r\n            <div class=\"info-label\">\r\n              <i class=\"bi bi-person-circle me-2 text-primary\"></i>\r\n              <strong>Usuario:</strong><div class=\"info-value\">{{ user.username }}</div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-12\">\r\n          <div class=\"info-item\">\r\n            <div class=\"info-label\">\r\n              <i class=\"bi bi-envelope me-2 text-primary\"></i>\r\n              <strong>Email:</strong><div class=\"info-value\">{{ user.email }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Rating y Suscripción -->\r\n      <div class=\"row g-3 mb-4\">\r\n        <div class=\"col-12\">\r\n          <div class=\"rating-container p-3 bg-light rounded\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <div class=\"d-flex align-items-center\">\r\n                <strong class=\"me-3\">Rating:</strong>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <ng-container *ngFor=\"let star of [].constructor(5); let i = index\">\r\n                    <i [ngClass]=\"getStarClass(user.rating, i)\" class=\"me-1\"></i>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n              <span class=\"badge bg-primary fs-6\">{{user.rating}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div class=\"col-12\">\r\n          <div class=\"subscription-container p-3 bg-light rounded\">\r\n            <div class=\"d-flex align-items-center justify-content-between\">\r\n              <div class=\"d-flex align-items-center\">\r\n                <strong class=\"me-3\">Suscripción:</strong>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <ng-container [ngSwitch]=\"user.subscription.toLowerCase()\">\r\n                    <!-- Bronce -->\r\n                    <div *ngSwitchCase=\"'bronce'\" class=\"subscription-badge bronce\">\r\n                      <i class=\"bi bi-gem me-2\"></i>\r\n                      <span class=\"fw-semibold\">Bronce</span>\r\n                    </div>\r\n                    \r\n                    <!-- Plata -->\r\n                    <div *ngSwitchCase=\"'plata'\" class=\"subscription-badge plata\">\r\n                      <i class=\"bi bi-gem me-2\"></i>\r\n                      <span class=\"fw-semibold\">Plata</span>\r\n                    </div>\r\n                    \r\n                    <!-- Oro -->\r\n                    <div *ngSwitchCase=\"'oro'\" class=\"subscription-badge oro\">\r\n                      <i class=\"bi bi-gem me-2\"></i>\r\n                      <span class=\"fw-semibold\">Oro</span>\r\n                    </div>\r\n                    \r\n                    <!-- Sin suscripción -->\r\n                    <div *ngSwitchDefault class=\"subscription-badge sin-suscripcion\">\r\n                      <i class=\"bi bi-x-circle me-1\"></i>\r\n                      <span class=\"fw-semibold\">Sin suscripción</span>\r\n                    </div>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n              \r\n              <!-- Botón separado para gestionar suscripción -->\r\n              <a [routerLink]=\"'/subscriptions'\" class=\"btn btn-sm btn-outline-primary\">\r\n                <i class=\"bi bi-gear me-1\"></i>\r\n                Gestionar\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Botones de acción -->\r\n      <div class=\"d-grid gap-3\">\r\n        <button type=\"button\" \r\n                class=\"btn btn-outline-primary d-flex align-items-center justify-content-center\" \r\n                (click)=\"openChangePasswordModal()\">\r\n          <i class=\"bi bi-key me-2\"></i>\r\n          Modificar Contraseña\r\n        </button>\r\n        \r\n        <button type=\"button\" \r\n                class=\"btn btn-danger d-flex align-items-center justify-content-center\" \r\n                (click)=\"deleteAccount()\">\r\n          <i class=\"bi bi-trash me-2\"></i>\r\n          Eliminar Cuenta\r\n        </button>\r\n        \r\n        <button type=\"button\" \r\n                class=\"btn btn-secondary d-flex align-items-center justify-content-center\" \r\n                [routerLink]=\"'/home'\">\r\n          <i class=\"bi bi-arrow-left me-2\"></i>\r\n          Volver\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Modales (mantienen la funcionalidad original) -->\r\n@if (showChangePasswordModal) {\r\n<app-change-password\r\n  [email]=\"user.email\"\r\n  (close)=\"closeChangePasswordModal()\">\r\n</app-change-password>\r\n}\r\n\r\n@if (showEditProfileModal) {\r\n<app-update-personal-data\r\n  [userId]=\"user.id\"\r\n  [userData]=\"userData\"\r\n  (closeModal)=\"handleEditProfileModalClose()\">\r\n</app-update-personal-data>\r\n}",
          "my-profile.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { MyProfileComponent } from './my-profile.component';\r\n\r\ndescribe('MyProfileComponent', () => {\r\n  let component: MyProfileComponent;\r\n  let fixture: ComponentFixture<MyProfileComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [MyProfileComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(MyProfileComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "my-profile.component.ts": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { UserLoged } from '../../models/UserLoged';\r\nimport { UserGet } from '../../models/UserGet';\r\nimport { CommonModule } from '@angular/common';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { FileService } from '../../services/file.service';\r\nimport Swal from 'sweetalert2';\r\nimport { ChangePasswordComponent } from \"../change-password/change-password.component\";\r\nimport { UpdatePersonalDataComponent } from \"../update-personal-data/update-personal-data.component\";\r\n\r\n@Component({\r\n  selector: 'app-my-profile',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, ChangePasswordComponent, UpdatePersonalDataComponent],\r\n  templateUrl: './my-profile.component.html',\r\n  styleUrls: ['./my-profile.component.css']\r\n})\r\nexport class MyProfileComponent implements OnInit {\r\n\r\n  authService = inject(AuthService);\r\n  usersService = inject(UsersService);\r\n  fileService = inject(FileService);\r\n  private readonly router = inject(Router);\r\n\r\n  user: UserGet = new UserGet();\r\n  userLoged: UserLoged = new UserLoged();\r\n  selectedFile: File | null = null;\r\n  showChangePasswordModal = false;\r\n  showEditProfileModal = false\r\n  userData!: UserGet;\r\n\r\n  ngOnInit(): void {\r\n    this.userLoged = this.authService.getUser();\r\n    this.loadUserData(this.userLoged.id);\r\n  }\r\n\r\n  loadUserData(userId: number): void {\r\n    this.usersService.getUserById(userId).subscribe({\r\n      next: (userData: UserGet) => {\r\n        this.user = userData;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar los datos del usuario:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  handleEditProfileModalClose(): void {\r\n  this.showEditProfileModal = false; \r\n  this.loadUserData(this.userLoged.id);\r\n}\r\n\r\n  getInitials(name: string, surname: string): string {\r\n    const firstLetterName = name ? name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = surname ? surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n\r\n  getStarClass(rating: number, index: number): string {\r\n    if (index < Math.floor(rating)) {\r\n      return 'bi bi-star-fill text-primary'; \r\n    } else if (index < Math.ceil(rating)) {\r\n      return 'bi bi-star-half text-primary'; \r\n    } else {\r\n      return 'bi bi-star text-muted'; \r\n    }\r\n  }\r\n\r\n  openEditProfileModal(): void {\r\n    this.userData = { ...this.user };\r\n    this.showEditProfileModal = true;\r\n  }\r\n  \r\n  closeEditProfileModal(): void {\r\n    this.showEditProfileModal = false;\r\n    this.loadUserData(this.userLoged.id);\r\n  }\r\n\r\n  openChangePasswordModal(): void {\r\n    this.showChangePasswordModal = true;\r\n  }\r\n\r\n\r\n  closeChangePasswordModal(): void {\r\n    this.showChangePasswordModal = false;\r\n  }\r\n\r\nonChangeAvatar(): void {\r\n  const input = document.createElement('input');\r\n  input.type = 'file';\r\n  input.accept = 'image/*';\r\n  input.click();\r\n\r\n  input.onchange = (event: any) => {\r\n    const file = event.target.files[0];\r\n    if (file) {\r\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n      if (!allowedTypes.includes(file.type)) {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Formato no válido',\r\n          text: 'Solo se permiten archivos JPG, JPEG y PNG.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n        return;\r\n      }\r\n\r\n      const maxSize = 5 * 1024 * 1024; \r\n      if (file.size > maxSize) {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Archivo muy grande',\r\n          text: 'El archivo no puede ser mayor a 5MB.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n        return;\r\n      }\r\n\r\n      this.selectedFile = file;\r\n      this.uploadProfilePic(file);\r\n    }\r\n  };\r\n}\r\n\r\n  deleteAccount(): void {\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción eliminará tu cuenta permanentemente junto a tu información personal y todas tus publicaciones.',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#d33',\r\n      cancelButtonColor: '#6c757d',\r\n      confirmButtonText: 'Sí, eliminar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.usersService.deleteUserPermanently(this.userLoged.id).subscribe({\r\n          next: () => {\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Cuenta eliminada',\r\n              text: 'Tu cuenta ha sido eliminada exitosamente.',\r\n              timer: 2000,\r\n              showConfirmButton: false\r\n            });\r\n            this.authService.logOut();\r\n            this.router.navigate(['/']);\r\n          },\r\n          error: (error) => {\r\n            console.error('Error al eliminar la cuenta:', error);\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: 'No se pudo eliminar la cuenta. Inténtalo de nuevo más tarde.'\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n    refreshPage(): void {\r\n      location.reload();\r\n    }\r\n\r\n uploadProfilePic(file: File): void {\r\n  if (this.userLoged && this.userLoged.id) {\r\n    this.fileService.uploadProfilePic(this.userLoged.id, file).subscribe({\r\n      next: (fileUrl: string) => {\r\n        console.log('Foto subida exitosamente', fileUrl);\r\n\r\n        this.usersService.updateAvatarUrl(this.userLoged.id, fileUrl).subscribe({\r\n          next: () => {\r\n            this.user.avatar_url = fileUrl;\r\n            \r\n            this.userLoged.avatar = fileUrl; \r\n            this.authService.updateUser(this.userLoged); \r\n            \r\n            this.loadUserData(this.userLoged.id);\r\n\r\n            Swal.fire({\r\n              icon: 'success',\r\n              title: 'Foto de perfil actualizada',\r\n              text: 'Tu foto de perfil ha sido actualizada exitosamente.',\r\n              timer: 2000,\r\n              showConfirmButton: false\r\n            }).then(() => {\r\n              this.refreshPage();\r\n            });\r\n          },\r\n          error: (error) => {\r\n            console.error('Error actualizando avatar en el backend:', error);\r\n            Swal.fire({\r\n              icon: 'error',\r\n              title: 'Error',\r\n              text: 'No se pudo actualizar la foto de perfil. Inténtalo de nuevo.',\r\n              timer: 2000,\r\n              showConfirmButton: false\r\n            });\r\n          }\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al subir la imagen:', error);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error al subir imagen',\r\n          text: 'No se pudo subir la imagen. Inténtalo de nuevo.',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\n}\r\n"
        },
        "my-publications": {
          "my-publications.component.css": "\r\n.pagination .page-link {\r\n  background-color: transparent;\r\n  border: none;\r\n  color: #6c757d; \r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-size: 0.8rem;\r\n  border-radius: 0.50rem;\r\n}\r\n\r\n.pagination .page-link:hover {\r\n  text-decoration: underline;\r\n  color: var(--bs-primary); \r\n  background-color: transparent;\r\n}\r\n\r\n.pagination .page-item.active .page-link {\r\n  background-color: #fff;\r\n  border: 1px solid var(--bs-primary);\r\n  color: var(--bs-primary);\r\n  font-weight: 600;\r\n}\r\n\r\n.pagination .page-link:focus {\r\n  box-shadow: none;\r\n}\r\n\r\n.pagination .page-item.disabled .page-link {\r\n  color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n.list-group-item{\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n",
          "my-publications.component.html": "<div class=\"fondo-gris py-4 min-vh-100\">\r\n  <div class=\"container\">\r\n    <!-- Título -->\r\n    <div class=\"row mb-2\">\r\n      <div class=\"col-12\">\r\n        <h2 class=\"fw-bold text-primary\">Administrar Publicaciones</h2>\r\n        <p class=\"text-muted\">Gestiona tus publicaciones</p>\r\n      </div>\r\n    </div>\r\n    <!-- Filtros -->\r\n    <div\r\n      class=\"d-flex flex-wrap gap-3 bg-white p-2 shadow justify-content-between align-items-center mb-3\"\r\n      [formGroup]=\"form\"\r\n      style=\"border-radius: 10px;\"\r\n    >\r\n      <!-- Buscador -->\r\n      <div class=\"position-relative flex-grow-1\" style=\"min-width: 300px; max-width: 600px;\">\r\n        <input\r\n          class=\"form-control pe-5\"\r\n          type=\"text\"\r\n          placeholder=\"Título o descripción...\"\r\n          formControlName=\"searchTerm\"\r\n          style=\"border-radius: 20px;\"\r\n        />\r\n        <span class=\"position-absolute top-50 end-0 translate-middle-y me-3 text-secondary\">\r\n          <span style=\"margin-right: 8px;\">|</span>\r\n          <i class=\"bi bi-search\"></i>\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Estado -->\r\n      <div class=\"d-flex align-items-center\">\r\n        <small class=\"me-2\">Estado</small>\r\n        <ng-select\r\n          [items]=\"[\r\n            { label: 'Todas', value: '' },\r\n            { label: 'Activas', value: 'true' },\r\n            { label: 'Inactivas', value: 'false' }\r\n          ]\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"active\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"width: auto; min-width: 100px;\"\r\n        >\r\n        </ng-select>\r\n      </div>\r\n\r\n      <!-- Ordenar por -->\r\n      <div class=\"d-flex align-items-center\">\r\n        <small class=\"me-2\">Ordenar por</small>\r\n        <ng-select\r\n          [items]=\"[\r\n            { label: 'Fecha', value: 'createdAt' },\r\n            { label: 'Precio', value: 'price' },\r\n            { label: 'Título', value: 'title' },\r\n            { label: 'Vistas', value: 'views' }\r\n          ]\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"sortBy\"\r\n          class=\"ng-select-sm me-2\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"width: auto; min-width: 100px;\"\r\n        >\r\n        </ng-select>\r\n        <button type=\"button\" class=\"btn btn-outline-primary\" aria-label=\"Ordenar ascendente o descendente\"\r\n          title=\"Ordenar ascendente o descendente\" (click)=\"toggleSortDirection()\">\r\n          <i class=\"bi\" [ngClass]=\"sortDir === 'asc' ? 'bi-arrow-up' : 'bi-arrow-down'\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Limpiar filtros -->\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline-secondary\"\r\n        (click)=\"clearFilters()\"\r\n        style=\"height: 40px; width: 40px; display: flex; align-items: center; justify-content: center;\"\r\n        aria-label=\"Limpiar filtros\"\r\n        title=\"Limpiar filtros\"\r\n      >\r\n        <i class=\"bi bi-trash\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Resultados -->\r\n    @if (publications.length === 0) {\r\n      <div class=\"alert alert-secondary\">No hay publicaciones para mostrar.</div>\r\n    } @else {\r\n\r\n      <!-- Encabezado alineado -->\r\n      <div class=\"row fw-bold text-secondary px-2 mb-2 d-none d-md-flex\">\r\n        <div class=\"col-3 col-sm-2 col-md-1 text-center\">Imagen</div>\r\n        <div class=\"col-9 col-sm-5 col-md-4\">Título / Descripción</div>\r\n        <div class=\"col-6 col-sm-3 col-md-2 text-end\">Precio / Vistas</div>\r\n        <div class=\"col-6 col-sm-2 col-md-2 text-center\">Estado</div>\r\n        <div class=\"col-12 col-md-2 text-end\">Fecha</div>\r\n        <div class=\"col-12 col-md-1 text-end\">Acciones</div>\r\n      </div>\r\n\r\n      <div class=\"list-group\">\r\n        @for (pub of publications; track pub.id) {\r\n          <div\r\n                      [class.border-success]=\"pub.active\"\r\n            [class.border-danger]=\"!pub.active\"\r\n            class=\"list-group-item mb-2 border rounded shadow-sm\"\r\n            style=\"cursor: pointer;\"\r\n            (click)=\"goToPublication(pub.id)\"\r\n          >\r\n            <div class=\"row align-items-center\">\r\n              <div class=\"col-3 col-sm-2 col-md-1 d-flex align-items-center justify-content-center\">\r\n                <img\r\n                  [src]=\"pub.images[0] || 'assets/Publications/0-notfound.jpg'\"\r\n                  [alt]=\"pub.title\"\r\n                  class=\"img-thumbnail\"\r\n                  style=\"width: 70px; height: 70px; object-fit: contain;\"\r\n                />\r\n              </div>\r\n              <div class=\"col-9 col-sm-5 col-md-4\">\r\n                <h5 class=\"mb-1\">{{ pub.title | truncate:35 }}</h5>\r\n                <small style=\"font-size: 0.7rem;\">{{ pub.description | truncate:50 }}</small>\r\n              </div>\r\n              <div class=\"col-6 col-sm-3 col-md-2 text-end\">\r\n                <h6>$ {{ pub.price | decimalFormat }}</h6>\r\n                <small style=\"font-size: 0.7rem;\">\r\n                  <i class=\"bi bi-eye\"></i> {{ pub.views }} visitas\r\n                </small>\r\n              </div>\r\n              <div class=\"col-6 col-sm-2 col-md-2 text-center\">\r\n                <span class=\"badge\" [class]=\"pub.active ? 'bg-success' : 'bg-danger'\">\r\n                  {{ pub.active ? 'Activa' : 'Inactiva' }}\r\n                </span>\r\n              </div>\r\n              <div class=\"col-12 col-md-2 text-end mt-2 mt-md-0\">\r\n                <small style=\"font-size: 0.7rem; color: var(--bs-secondary);\">\r\n                  <i class=\"bi bi-calendar\"></i> {{ formatDate(pub.created_at) }}\r\n                </small><br />\r\n                <small style=\"font-size: 0.7rem; color: var(--bs-secondary);\">\r\n                  Hace {{ getDaysByDate(pub.created_at) }} días\r\n                </small>\r\n              </div>\r\n\r\n              <div class=\"col-12 col-md-1 text-end position-relative mt-2 mt-md-0\">\r\n                <div class=\"d-flex justify-content-end\">\r\n                  <button\r\n                  class=\"btn btn-outline-primary btn-sm\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleDropdown(pub.id); $event.stopPropagation()\"\r\n                  aria-haspopup=\"true\"\r\n                  style=\"width: 30px; height: 30px; padding: 0; display: flex; align-items: center; justify-content: center;\"\r\n                  [attr.aria-expanded]=\"dropdownOpenId === pub.id\"\r\n                  >\r\n                  <i class=\"bi bi-three-dots-vertical\"></i>\r\n                  </button>\r\n                </div>\r\n                <ul\r\n                  class=\"dropdown-menu dropdown-menu-end\"\r\n                  [class.show]=\"dropdownOpenId === pub.id\"\r\n                  style=\"position: absolute; top: 100%; right: 0; margin-top: 0.125rem;\"\r\n                >\r\n                  @if (pub.active) {\r\n                    <li>\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"unactivatePublication(pub.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-x-circle text-danger me-2\"></i> Dar de baja\r\n                      </button>\r\n                    </li>\r\n                  } \r\n                  <li>\r\n                    <button\r\n                      class=\"dropdown-item\"\r\n                      (click)=\"goToEditPublication(pub.id); closeDropdown(); $event.stopPropagation()\"\r\n                    >\r\n                      <i class=\"bi bi-pencil me-2\"></i> Editar\r\n                    </button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n    }\r\n\r\n    <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n  <div>\r\n    <span class=\"text-muted\">Mostrando {{ publications.length }} de {{ totalItems || 0 }} resultados</span>\r\n  </div>\r\n  <div class=\"d-flex align-items-center\">\r\n    <small class=\"me-2\">Mostrar</small>\r\n    <ng-select\r\n      [items]=\"[\r\n        { label: '5', value: 5 },\r\n        { label: '10', value: 10 },\r\n        { label: '25', value: 25 },\r\n        { label: '50', value: 50 }\r\n      ]\"\r\n      bindLabel=\"label\"\r\n      bindValue=\"value\"\r\n      [ngModel]=\"size\"\r\n      (ngModelChange)=\"changePageSize($event)\"\r\n      class=\"ng-select-sm\"\r\n      [clearable]=\"false\"\r\n      [searchable]=\"false\"\r\n      style=\"width: auto; min-width: 60px;\"\r\n    >\r\n    </ng-select>\r\n    <small class=\"ms-2\">por página</small>\r\n  </div>\r\n</div>\r\n\r\n    <!-- Paginación -->\r\n    <nav *ngIf=\"totalPages > 0\" class=\"d-flex justify-content-center\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" [class.disabled]=\"page === 1\">\r\n          <small\r\n            style=\"font-size: 0.8rem\"\r\n            class=\"page-link\"\r\n            (click)=\"page > 1 && changePage(page - 1)\"\r\n          >\r\n            <i class=\"bi bi-chevron-left\"></i> Anterior\r\n          </small>\r\n        </li>\r\n\r\n        <li\r\n          class=\"page-item\"\r\n          *ngFor=\"let p of getPages()\"\r\n          [class.active]=\"p === page\"\r\n        >\r\n          <span class=\"page-link\" (click)=\"changePage(p)\">{{ p }}</span>\r\n        </li>\r\n\r\n        <li class=\"page-item\" [class.disabled]=\"page === totalPages\">\r\n          <small\r\n            style=\"font-size: 0.8rem;\"\r\n            class=\"page-link\"\r\n            (click)=\"page < totalPages && changePage(page + 1)\"\r\n          >\r\n            Siguiente <i class=\"bi bi-chevron-right\"></i>\r\n          </small>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </div>\r\n</div>\r\n",
          "my-publications.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { MyPublicationsComponent } from './my-publications.component';\r\n\r\ndescribe('MyPublicationsComponent', () => {\r\n  let component: MyPublicationsComponent;\r\n  let fixture: ComponentFixture<MyPublicationsComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [MyPublicationsComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(MyPublicationsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "my-publications.component.ts": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport Swal from 'sweetalert2';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n@Component({\r\n  selector: 'app-my-publications',\r\n  standalone: true,\r\n  imports: [FormsModule,CommonModule,ReactiveFormsModule,PipesModule,NgSelectModule],\r\n  templateUrl: './my-publications.component.html',\r\n  styleUrl: './my-publications.component.css'\r\n})\r\nexport class MyPublicationsComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  publications: any[] = [];\r\n  totalItems = 0;\r\n  totalPages = 0;\r\n  sortDir: 'desc' | 'asc' = 'desc';\r\n  page = 1;\r\n  size = 5;\r\n  dropdownOpenId: number | null = null;\r\n\r\n  private readonly publicationService = inject(PublicationsService);\r\n  private readonly authService = inject(AuthService);\r\n  private readonly router = inject(Router);\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.form = this.fb.group({\r\n      searchTerm: [''],\r\n      active: [''],\r\n      sortBy: ['createdAt'],\r\n      sortDir: ['desc']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadPublications();\r\n\r\n  this.form.valueChanges.subscribe((values) => {\r\n    this.page = 1;\r\n\r\n    const searchTerm = values.searchTerm?.trim() || '';\r\n    if (searchTerm.length >= 3 || searchTerm.length === 0) {\r\n      this.loadPublications();\r\n    }\r\n\r\n  });\r\n  }\r\n\r\n  changePageSize(newSize: number) {\r\n    this.size = newSize;\r\n    this.page = 1;\r\n    this.loadPublications();\r\n  }\r\n\r\n  loadPublications(): void {\r\n    const dto = {\r\n      ...this.form.value,\r\n      page: this.page - 1, \r\n      size: this.size\r\n    };\r\n\r\n    const userId = this.authService.getUser().id;\r\n\r\n    this.publicationService.getFilteredPublicationsByUserId(dto, userId).subscribe(res => {\r\n      this.publications = res.content;\r\n      this.totalItems = res.totalElements;\r\n      this.totalPages = Math.ceil(this.totalItems / this.size);\r\n    });\r\n  }\r\n\r\n  clearFilters() {\r\n  this.form.reset({\r\n    searchTerm: '',\r\n    active: '',\r\n    sortBy: 'createdAt'  \r\n  });\r\n  this.sortDir = 'desc';\r\n  this.size = 5; \r\n  this.page = 1; \r\n  this.loadPublications();  \r\n}\r\n\r\n  changePage(newPage: number): void {\r\n    if (newPage >= 1 && newPage <= this.totalPages) {\r\n      this.page = newPage;\r\n      this.loadPublications();\r\n    }\r\n  }\r\n\r\n  getPages(): number[] {\r\n    const maxPagesToShow = 5;\r\n    let startPage = Math.max(1, this.page - Math.floor(maxPagesToShow / 2));\r\n    let endPage = startPage + maxPagesToShow - 1;\r\n\r\n    if (endPage > this.totalPages) {\r\n      endPage = this.totalPages;\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\ntoggleSortDirection() {\r\n  this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\r\n  this.form.get('sortDir')?.setValue(this.sortDir);\r\n  this.loadPublications(); \r\n}\r\n\r\n  formatDate(dateStr: string): string {\r\n    return dateStr ? dateStr.replace(/-/g, '/') : '';\r\n  }\r\n\r\ngetDaysByDate(dateStr: string): number {\r\n  if (!dateStr) return NaN;\r\n\r\n  const [day, month, year] = dateStr.split('-').map(Number);\r\n  if (!day || !month || !year) return NaN;\r\n\r\n  const date = new Date(year, month - 1, day);\r\n  const today = new Date();\r\n  \r\n  date.setHours(0, 0, 0, 0);\r\n  today.setHours(0, 0, 0, 0);\r\n\r\n  const diffTime = today.getTime() - date.getTime();\r\n\r\n  return diffTime <= 0 ? 0 : Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n}\r\n\r\n  goToPublication(id: number): void {\r\n    this.router.navigate(['/publication', id]).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n    goToEditPublication(id: number): void {\r\n    this.publicationService.addView(id).subscribe({\r\n      next: () => {\r\n        this.router.navigate(['/publication', id, 'edit']).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  toggleDropdown(pubId: number) {\r\n    if (this.dropdownOpenId === pubId) {\r\n      this.dropdownOpenId = null;\r\n    } else {\r\n      this.dropdownOpenId = pubId;\r\n    }\r\n  }\r\n\r\n  closeDropdown() {\r\n    this.dropdownOpenId = null;\r\n  }\r\n\r\n  unactivatePublication(pubId: number) {\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Esta acción va a dar de baja tu publicacíon no podrás volver a activarla',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#d33',\r\n      cancelButtonColor: '#6c757d',\r\n      confirmButtonText: 'Sí, eliminar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n      this.publicationService.deletePublication(pubId).subscribe({\r\n        next: () => {\r\n        Swal.fire({\r\n          title: 'Éxito',\r\n          text: 'Publicación eliminada correctamente',\r\n          icon: 'success',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        }).then(() => {\r\n          this.loadPublications();\r\n        });\r\n        },\r\n        error: (err) => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudo eliminar la publicación',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n        }\r\n      });\r\n      }\r\n    });\r\n  }\r\n\r\n  activatePublication(pubId: number) {\r\n    if (this.authService.hasRole(\"PREMIUM\")) {\r\n      this.publicationService.reactivatePublication(pubId).subscribe({\r\n        next: () => {\r\n            Swal.fire({\r\n            title: 'Éxito',\r\n            text: 'Publicación reactivada correctamente',\r\n            icon: 'success',\r\n            timer: 2000,\r\n            showConfirmButton: false\r\n            }).then(() => {\r\n            this.loadPublications();\r\n          });\r\n        },\r\n        error: (err) => {\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: 'No se pudo reactivar la publicación',\r\n            icon: 'error',\r\n            timer: 2000,\r\n            showConfirmButton: false\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      Swal.fire({\r\n        title: 'Atención',\r\n        text: 'Solo los usuarios con una suscripcíon pueden reactivar publicaciones',\r\n        icon: 'warning',\r\n        timer: 2000,\r\n        showConfirmButton: false\r\n      });\r\n      return;\r\n\r\n    }\r\n  }\r\n\r\n}\r\n"
        },
        "navbar": {
          "navbar.component.css": ".navbar-brand img {\r\n    margin-right: 8px;\r\n  }\r\n  \r\n  form input::placeholder {\r\n    color: #8a8a8a;\r\n  }\r\n\r\n  ",
          "navbar.component.html": "<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary py-0\">\r\n  <div class=\"container-fluid\">\r\n    <!-- Logo -->\r\n    <a class=\"navbar-brand fw-bold\" [routerLink]=\"'/home'\">\r\n      <img src=\"assets/logo2.png\" alt=\"OncativoVende\" style=\"height: 35px; width: auto;\" class=\"me-2\">\r\n    </a>\r\n\r\n<!-- Centro: Input de búsqueda y botón de categorías -->\r\n<div class=\"d-flex justify-content-center align-items-center w-50 mx-auto\">\r\n  <form class=\"d-flex w-100 me-2 position-relative\" (ngSubmit)=\"onSearch()\">\r\n    <input\r\n      class=\"form-control form-control-sm rounded ps-3 pe-5 py-1 placeholder-secondary\"\r\n      type=\"search\"\r\n      placeholder=\"Buscar productos marcas y más...\"\r\n      aria-label=\"Buscar\"\r\n      [(ngModel)]=\"searchText\"\r\n      name=\"searchText\"\r\n      required\r\n    />\r\n    <!-- Separador y lupa -->\r\n    <span\r\n      class=\"position-absolute end-0 top-0 h-100 d-flex align-items-center me-3\"\r\n    >\r\n      <span class=\"text-secondary me-2\">|</span>\r\n      <i class=\"bi bi-search text-secondary\" style=\"font-size: 1rem; cursor: pointer;\" (click)=\"onSearch()\"></i>\r\n    </span>\r\n  </form>\r\n\r\n<!-- Select de categorías -->\r\n<div class=\"dropdown mb-2 mt-2 me-2\">\r\n  <button class=\"btn btn-transparent text-white dropdown-toggle p-0\" type=\"button\" id=\"dropdownCategorias\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\" style=\"font-size: 0.9rem;\">\r\n    Categorías\r\n  </button>\r\n  <ul class=\"dropdown-menu\">\r\n    <li *ngFor=\"let category of categories\">\r\n      <a class=\"dropdown-item\" style=\"cursor: pointer;\" (click)=\"selectCategory(category)\">\r\n        {{ category.description }}\r\n      </a>\r\n    </li>\r\n  </ul>\r\n</div>\r\n    </div>\r\n    <div class=\"mb-2 mt-2 me-2 ms-5\" style=\"font-size: 0.9rem; cursor: pointer;\" [routerLink]=\"'/events'\">\r\n    <i class=\"bi bi-newspaper text-white\"></i> <span class=\"text-white\"> Eventos</span>\r\n  </div>\r\n\r\n    <!-- Botón toggle para móviles -->\r\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarContent\"\r\n      aria-controls=\"navbarContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n\r\n    <!-- Contenido del navbar -->\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarContent\">\r\n      <ul class=\"navbar-nav ms-auto mb-2 mb-lg-0\">\r\n        <ng-container *ngIf=\"authService.isLoggedIn()\">\r\n          <li class=\"nav-item dropdown\">\r\n            <a class=\"nav-link dropdown-toggle text-white d-flex align-items-center\" href=\"#\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n              <!-- Mostrar avatar o iniciales -->\r\n              <div *ngIf=\"getProfileImage(); else initials\" class=\"rounded-circle me-2\">\r\n                <img [src]=\"getProfileImage()\" class=\"rounded-circle\" style=\"width: 30px; height: 30px; object-fit: cover;\">\r\n              </div>\r\n              <ng-template #initials>\r\n                <div class=\"rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-2\"\r\n                    style=\"width: 30px; height: 30px; border: 0.3px solid black;\">\r\n                  {{ getInitials() }}\r\n                </div>\r\n              </ng-template>\r\n              {{ setName() }}\r\n            </a>\r\n            <ul class=\"dropdown-menu dropdown-menu-end\">\r\n              <li><a class=\"dropdown-item\" [routerLink]=\"'/profile'\" style=\"font-size: 0.9rem;\">Mi perfil</a></li>\r\n              <li><a class=\"dropdown-item\" [routerLink]=\"'/my-favorites'\" style=\"font-size: 0.9rem;\">Mis favoritos</a></li>\r\n              <li><a class=\"dropdown-item\" [routerLink]=\"'/my-publications'\" style=\"font-size: 0.9rem;\">Mis publicaciones</a></li>\r\n              <li><a class=\"dropdown-item\" [routerLink]=\"'/subscriptions'\" style=\"font-size: 0.9rem;\">Gestionar suscripciones</a></li>\r\n                @if (authService.hasRole(\"PREMIUM\")) {\r\n                <li><hr class=\"my-1\"></li>\r\n                <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/new-publication'\"> Crear publicación<i class=\"bi bi-clipboard-plus ms-1\"></i></a></li>\r\n                }\r\n                @if (authService.hasRole(\"ADMIN\")){\r\n                  <li><hr class=\"my-1\"></li>\r\n                  <li class=\"dropdown-header text-primary fw-bold\" style=\"font-size: 0.9rem;\">Opciones de administración</li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/admin/users'\"> Gestionar usuarios<i class=\"bi bi-person-lines-fill text-primary\"></i></a></li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/admin/publications'\"> Gestionar publicaciones<i class=\"bi bi-card-list text-primary\"></i></a></li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/admin/new-event'\"> Crear evento<i class=\"bi bi-calendar2-plus text-primary\"></i></a></li>\r\n                }\r\n                @if (authService.hasRole(\"MODERADOR\") || authService.hasRole(\"ADMIN\")) {\r\n                  <li><hr class=\"my-1\"></li>\r\n                  <li class=\"dropdown-header text-warning fw-bold\" style=\"font-size: 0.9rem;\">Opciones de moderación</li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/moderator/reports'\"> Ver reportes<i class=\"bi bi-flag text-warning\"></i></a></li>\r\n                }\r\n                @if (authService.hasRole(\"ADMIN\")){\r\n                  <li><hr class=\"my-1\"></li>\r\n                  <li class=\"dropdown-header  fw-bold\" style=\"font-size: 0.9rem; color: fuchsia;\">Dashboards / Gráficos</li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/admin/charts/publications'\"> Publicaciones<i class=\"bi bi-graph-up-arrow\" style=\"color: fuchsia;\"></i></a></li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/admin/charts/users'\"> Usuarios<i class=\"bi bi-pie-chart\" style=\"color: fuchsia;\"></i></a></li>\r\n                  <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" style=\"font-size: 0.9rem;\" [routerLink]=\"'/admin/charts/subscriptions'\"> Subscripciones<i class=\"bi bi-credit-card\" style=\"color: fuchsia;\"></i></a></li>\r\n                }\r\n                <li><hr class=\"my-1\"></li>\r\n                <li><a class=\"dropdown-item d-flex justify-content-between align-items-center\" (click)=\"logout()\" style=\"cursor: pointer; font-size: 0.9rem;\">Cerrar sesión<i class=\"bi bi-box-arrow-left ms-2 text-danger\"></i></a></li>\r\n            </ul>\r\n          </li>\r\n        </ng-container>\r\n\r\n        <ng-container *ngIf=\"!authService.isLoggedIn()\">\r\n          <li class=\"nav-item\">\r\n            <a class=\"nav-link text-white\" (click)=\"goToLogin()\" style=\"cursor: pointer;\">\r\n              <i class=\"bi bi-box-arrow-in-right me-1\"></i> Ingresar\r\n            </a>\r\n          </li>\r\n        </ng-container>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</nav>\r\n",
          "navbar.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { NavbarComponent } from './navbar.component';\r\n\r\ndescribe('NavbarComponent', () => {\r\n  let component: NavbarComponent;\r\n  let fixture: ComponentFixture<NavbarComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [NavbarComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(NavbarComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "navbar.component.ts": "import { ChangeDetectorRef, Component, inject, OnInit } from '@angular/core';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { CommonModule } from '@angular/common';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UsersService } from '../../services/users.service';\r\n\r\nimport { CategoryGet } from '../../models/CategoryGet';\r\nimport { UserGet } from '../../models/UserGet';\r\nimport { UserLoged } from '../../models/UserLoged';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, FormsModule],\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css']\r\n})\r\nexport class NavbarComponent implements OnInit {\r\n\r\n  private readonly router = inject(Router);\r\n  authService = inject(AuthService);\r\n  publicationsService = inject(PublicationsService);\r\n  usersService = inject(UsersService);\r\n  private cdr = inject(ChangeDetectorRef);\r\n\r\n  userLoged: UserLoged = new UserLoged();\r\n  selectedCategory: string = '';\r\n  user: UserGet = new UserGet();\r\n  categories: CategoryGet[] = [];\r\n  searchText: string = '';\r\nselectedCategoryId: any;\r\n\r\n  ngOnInit(): void {\r\n  this.authService.user$.subscribe((user) => {\r\n    if (user) {\r\n      this.userLoged = user;\r\n      console.log('Navbar recibe:', user);\r\n      this.loadUserProfileImage(user.id);\r\n\r\n    } else {\r\n      this.user = new UserGet(); \r\n    }\r\n    \r\n  });\r\n\r\n  this.loadCategories();\r\n}\r\n\r\n  logout(): void {\r\n    Swal.fire({\r\n      title: '¿Está seguro?',\r\n      text: \"Se cerrará su sesión actual.\",\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#3085d6',\r\n      cancelButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, cerrar sesión',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.authService.logOut();\r\n        this.refreshPage(\"/home\");\r\n      }\r\n    });\r\n  }\r\n\r\n  refreshPage(link: string) {\r\n    this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\r\n      this.router.navigate([link]);\r\n    });\r\n  }\r\n\r\n  goToLogin() {\r\n    this.refreshPage(\"/login\");\r\n  }\r\n\r\n  selectCategory(category: any) {\r\n    this.selectedCategory = category.description;  \r\n\r\n    this.onCategoryChange(this.selectedCategory);\r\n  }\r\n\r\n  loadCategories(): void {\r\n    this.publicationsService.getCategories().subscribe({\r\n      next: (categories: CategoryGet[]) => {\r\n        this.categories = categories;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar categorías:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadUserProfileImage(userId: number): void {\r\n    this.usersService.getUserById(userId).subscribe({\r\n      next: (userData: UserGet) => {\r\n        this.user = userData;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar el usuario:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  getInitials(): string {\r\n    const firstLetterName = this.user.name ? this.user.name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = this.user.surname ? this.user.surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n\r\n  setName(): string {\r\n    return `${this.user.name} ${this.user.surname}`;\r\n  }\r\n\r\n  getProfileImage(): string {\r\n    return this.user.avatar_url ? this.user.avatar_url : '';\r\n  }\r\n\r\nonSearch() {\r\n    this.router.navigate(['/search'], {\r\n      queryParams: {\r\n        searchText: this.searchText,\r\n      }\r\n    });\r\n  }\r\n\r\n  onCategoryChange(categorySelected: string) {\r\n    this.router.navigate(['/search'], {\r\n      queryParams: {\r\n        category: categorySelected\r\n      }\r\n  });\r\n  }\r\n\r\n\r\n}\r\n"
        },
        "new-event": {
          "new-event.component.css": "",
          "new-event.component.html": "<div class=\"fondo-gris py-5\">\r\n  <div class=\"container\">\r\n    <div class=\"bg-white rounded shadow p-4\">\r\n\r\n      <form [formGroup]=\"form\" novalidate>\r\n        <!-- Título -->\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Título</label>\r\n          <input \r\n            type=\"text\" \r\n            class=\"form-control\" \r\n            formControlName=\"title\" \r\n            [ngClass]=\"onValidate('title')\"\r\n            placeholder=\"Ingresa el título del evento\"\r\n          >\r\n          <div class=\"invalid-feedback\">{{showError('title')}}</div>\r\n        </div>\r\n\r\n        <!-- Descripción -->\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Descripción</label>\r\n          <textarea \r\n            class=\"form-control\" \r\n            formControlName=\"description\" \r\n            rows=\"4\" \r\n            [ngClass]=\"onValidate('description')\"\r\n            placeholder=\"Describe el evento (opcional)\"\r\n          ></textarea>\r\n          <div class=\"invalid-feedback\">{{showError('description')}}</div>\r\n        </div>\r\n\r\n        <!-- Fila: Usuario creador -->\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 mb-3\">\r\n            <label class=\"form-label\">Creado por</label>\r\n            <ng-select\r\n              [items]=\"users\"\r\n              bindLabel=\"username\"\r\n              bindValue=\"id\"\r\n              placeholder=\"Selecciona el usuario (nombre de usuario)\"\r\n              formControlName=\"created_by_user_id\"\r\n              [ngClass]=\"onValidate('created_by_user_id')\"\r\n              class=\"w-100\"\r\n            >\r\n              <ng-option *ngFor=\"let user of users\" [value]=\"user.id\">\r\n                &#64;{{user.username}}\r\n              </ng-option>\r\n            </ng-select>\r\n            <div class=\"invalid-feedback\">{{showError('created_by_user_id')}}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Fila: Fechas -->\r\n        <div class=\"row\">\r\n          <div class=\"col-md-6 mb-3\">\r\n            <label class=\"form-label\">Fecha de inicio</label>\r\n            <input \r\n              type=\"date\" \r\n              class=\"form-control\" \r\n              formControlName=\"start_date\" \r\n              [ngClass]=\"onValidate('start_date')\"\r\n              [min]=\"minDate\"\r\n            >\r\n            <div class=\"invalid-feedback\">{{showError('start_date')}}</div>\r\n          </div>\r\n\r\n          <div class=\"col-md-6 mb-3\">\r\n            <label class=\"form-label\">Fecha de fin</label>\r\n            <input \r\n              type=\"date\" \r\n              class=\"form-control\" \r\n              formControlName=\"end_date\" \r\n              [ngClass]=\"onValidate('end_date')\"\r\n              [min]=\"minEndDate\"\r\n            >\r\n            <div class=\"invalid-feedback\">{{showError('end_date')}}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Imagen -->\r\n        <div class=\"mb-3\">\r\n          <label class=\"form-label\">Imagen del evento</label>\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n              <div class=\"position-relative border rounded p-3 text-center\" style=\"height: 200px;\">\r\n                <div *ngIf=\"selectedImage; else emptyImageSlot\">\r\n                  <img \r\n                    [src]=\"getImagePreview(selectedImage)\" \r\n                    class=\"img-fluid rounded\" \r\n                    style=\"max-height: 160px;\" \r\n                  />\r\n                  <button \r\n                    type=\"button\" \r\n                    class=\"btn-close position-absolute top-0 end-0 m-1\" \r\n                    aria-label=\"Close\"\r\n                    (click)=\"removeImage()\"\r\n                  ></button>\r\n                </div>\r\n                <ng-template #emptyImageSlot>\r\n                  <label class=\"d-flex align-items-center justify-content-center h-100 w-100 text-muted\"\r\n                        style=\"cursor: pointer;\">\r\n                    <input \r\n                      type=\"file\" \r\n                      (change)=\"onImageSelected($event)\" \r\n                      accept=\".jpg,.jpeg,.png\"\r\n                      hidden \r\n                    />\r\n                    <span class=\"text-center\">\r\n                      + Agregar imagen<br>\r\n                      <small>(JPG, PNG - Opcional)</small>\r\n                    </span>\r\n                  </label>\r\n                </ng-template>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <small class=\"form-text text-muted\">\r\n            La imagen es opcional. Si no subes una, se usará una imagen por defecto.\r\n          </small>\r\n        </div>\r\n\r\n        <!-- Botones -->\r\n        <div class=\"text-end mt-4\">\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-secondary me-2\" \r\n            (click)=\"cancel()\"\r\n          >\r\n            Cancelar\r\n          </button>\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-success\" \r\n            (click)=\"submit()\"\r\n            [disabled]=\"form.invalid\"\r\n          >\r\n            Crear Evento\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>",
          "new-event.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { NewEventComponent } from './new-event.component';\r\n\r\ndescribe('NewEventComponent', () => {\r\n  let component: NewEventComponent;\r\n  let fixture: ComponentFixture<NewEventComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [NewEventComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(NewEventComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "new-event.component.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { EventPost } from '../../models/EventPost';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { EventsService } from '../../services/events.service';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { FileService } from '../../services/file.service';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport Swal from 'sweetalert2';\r\nimport { Router } from '@angular/router';\r\nimport { UserGet } from '../../models/UserGet';\r\n\r\n@Component({\r\n  selector: 'app-new-event',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, NgSelectModule],\r\n  templateUrl: './new-event.component.html',\r\n  styleUrls: ['./new-event.component.css']\r\n})\r\nexport class NewEventComponent implements OnInit {\r\n  form: FormGroup;\r\n  users: UserGet[] = [];\r\n  selectedImage: File | null = null;\r\n  uploadedImageUrl: string | null = null;\r\n  minDate: string;\r\n  minEndDate: string;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private eventsService: EventsService,\r\n    private usersService: UsersService,\r\n    private fileService: FileService,\r\n    private router: Router\r\n  ) {\r\n    const today = new Date();\r\n    this.minDate = today.toISOString().split('T')[0];\r\n    this.minEndDate = this.minDate;\r\n\r\n    this.form = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(100)]],\r\n      description: ['', [Validators.maxLength(500)]],\r\n      created_by_user_id: [null, Validators.required],\r\n      start_date: ['', Validators.required],\r\n      end_date: ['', Validators.required]\r\n    }, { validators: this.dateValidator });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadUsers();\r\n    \r\n    this.form.get('start_date')?.valueChanges.subscribe(startDate => {\r\n      if (startDate) {\r\n        this.minEndDate = startDate;\r\n        \r\n        const currentEndDate = this.form.get('end_date')?.value;\r\n        if (currentEndDate && currentEndDate < startDate) {\r\n          this.form.get('end_date')?.setValue(startDate);\r\n        }\r\n        \r\n        this.form.get('end_date')?.updateValueAndValidity();\r\n      }\r\n    });\r\n  }\r\n\r\n  dateValidator(group: FormGroup) {\r\n    const startDate = group.get('start_date')?.value;\r\n    const endDate = group.get('end_date')?.value;\r\n\r\n    if (startDate && endDate && startDate > endDate) {\r\n      return { dateRange: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  loadUsers(): void {\r\n    this.usersService.getUsers().subscribe({\r\n      next: (users: UserGet[]) => {\r\n        this.users = users;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al cargar usuarios:', err);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'No se pudieron cargar los usuarios.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onImageSelected(event: any): void {\r\n    const file: File = event.target.files[0];\r\n    if (file) {\r\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n      if (!allowedTypes.includes(file.type)) {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Formato no válido',\r\n          text: 'Solo se permiten archivos JPG, JPEG y PNG.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n        event.target.value = '';\r\n        return;\r\n      }\r\n\r\n      const maxSize = 5 * 1024 * 1024;\r\n      if (file.size > maxSize) {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Archivo muy grande',\r\n          text: 'El archivo no puede ser mayor a 5MB.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n        event.target.value = '';\r\n        return;\r\n      }\r\n\r\n      this.selectedImage = file;\r\n    }\r\n  }\r\n\r\n  removeImage(): void {\r\n    this.selectedImage = null;\r\n    this.uploadedImageUrl = null;\r\n  }\r\n\r\n  getImagePreview(file: File): string {\r\n    return URL.createObjectURL(file);\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    }\r\n  }\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.form.get(controlName);\r\n\r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo es obligatorio.';\r\n        case 'minlength':\r\n          return `Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        default:\r\n          return 'Campo inválido.';\r\n      }\r\n    }\r\n\r\n    // Validación de rango de fechas\r\n    if (this.form.errors && this.form.errors['dateRange']) {\r\n      if (controlName === 'start_date' || controlName === 'end_date') {\r\n        return 'La fecha de fin debe ser igual o posterior a la fecha de inicio.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\n  private uploadImage(): Promise<string | null> {\r\n    if (!this.selectedImage) {\r\n      return Promise.resolve(null);\r\n    }\r\n\r\n    const tempEventId = Date.now();\r\n\r\n    return this.fileService.uploadEventPic(tempEventId, this.selectedImage).toPromise()\r\n      .then(imageUrl => {\r\n        this.uploadedImageUrl = imageUrl || null;\r\n        return this.uploadedImageUrl;\r\n      })\r\n      .catch(error => {\r\n        console.error('Error al subir imagen:', error);\r\n        throw error;\r\n      });\r\n  }\r\n\r\n  private formatDateForBackend(dateString: string): string {\r\n    return dateString.split('T')[0];\r\n  }\r\n\r\n  submit(): void {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      Swal.fire({\r\n        icon: 'warning',\r\n        title: 'Campos incompletos',\r\n        text: 'Por favor, completa todos los campos obligatorios.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (this.selectedImage) {\r\n      this.uploadImage()\r\n        .then(imageUrl => {\r\n          this.createEventWithImage(imageUrl);\r\n        })\r\n        .catch(err => {\r\n          console.error('Error al subir imagen:', err);\r\n          Swal.fire({\r\n            icon: 'error',\r\n            title: 'Error al subir imagen',\r\n            text: 'Ocurrió un error al subir la imagen. Por favor, inténtalo de nuevo.',\r\n            showConfirmButton: false,\r\n            timer: 2000\r\n          });\r\n        });\r\n    } else {\r\n      this.createEventWithImage(null);\r\n    }\r\n  }\r\n\r\n  private createEventWithImage(imageUrl: string | null): void {\r\n    const eventData: any = {\r\n      title: this.form.value.title,\r\n      created_by_user_id: this.form.value.created_by_user_id,\r\n      start_date: this.formatDateForBackend(this.form.value.start_date),\r\n      end_date: this.formatDateForBackend(this.form.value.end_date)\r\n    };\r\n\r\n    if (this.form.value.description && this.form.value.description.trim()) {\r\n      eventData.description = this.form.value.description;\r\n    }\r\n\r\n    if (imageUrl) {\r\n      eventData.image_url = imageUrl;\r\n    }\r\n\r\n    console.log('Datos a enviar:', eventData);\r\n\r\n    this.eventsService.createEvent(eventData).subscribe({\r\n      next: (createdEvent) => {\r\n        this.form.reset();\r\n        this.selectedImage = null;\r\n        this.uploadedImageUrl = null;\r\n\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: '¡Evento creado!',\r\n          text: 'El evento se ha creado exitosamente.',\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n        }).then(() => {\r\n          this.router.navigate(['/events']);\r\n        });\r\n      },\r\n      error: (err) => {\r\n        console.error('Error al crear evento:', err);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: err.error?.message || 'Ocurrió un error al crear el evento.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  cancel(): void {\r\n    if (this.form.dirty) {\r\n      Swal.fire({\r\n        title: '¿Estás seguro?',\r\n        text: 'Se perderán todos los datos ingresados.',\r\n        icon: 'warning',\r\n        showCancelButton: true,\r\n        confirmButtonColor: '#d33',\r\n        cancelButtonColor: '#3085d6',\r\n        confirmButtonText: 'Sí, cancelar',\r\n        cancelButtonText: 'Continuar editando'\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          this.router.navigate(['/events']);\r\n        }\r\n      });\r\n    } else {\r\n      this.router.navigate(['/events']);\r\n    }\r\n  }\r\n}"
        },
        "new-publication": {
          "new-publication.component.css": ".fondo-gris {\r\n  padding: 20px 0;\r\n  min-height: 100vh;\r\n}\r\n\r\n.step-progress {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin-bottom: 1.5rem;\r\n}\r\n\r\n.step {\r\n  display: flex;\r\n  align-items: center;\r\n  position: relative;\r\n}\r\n\r\n.step-circle {\r\n  width: 35px;\r\n  height: 35px;\r\n  border-radius: 50%;\r\n  background-color: #f8f9fa; \r\n  color: black;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: bold;\r\n  z-index: 1;\r\n  transition: background-color 0.3s, color 0.3s;\r\n}\r\n\r\n.step-circle.active {\r\n  background-color: #198754; \r\n  color: white;\r\n}\r\n\r\n.step-line {\r\n  height: 4px;\r\n  width: 50px;\r\n  background-color: #dee2e6;\r\n  margin: 0 10px;\r\n  z-index: 0;\r\n}",
          "new-publication.component.html": "<div class=\"fondo-gris py-5\">\r\n  <div class=\"container\">\r\n    <div class=\"bg-white rounded shadow p-4\">\r\n\r\n      <!-- Navegación de pasos -->\r\n      <div class=\"step-progress\">\r\n        @for (s of [1, 2, 3, 4]; track s; let i = $index) {\r\n          <div class=\"step\">\r\n            <div class=\"step-circle\" [class.active]=\"step === s\">{{ s }}</div>\r\n            @if (i < 3) {\r\n              <div class=\"step-line\"></div>\r\n            }\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n      <form [formGroup]=\"form\" novalidate>\r\n        <!-- PASO 1: Datos principales -->\r\n  <div *ngIf=\"step === 1\">\r\n    <!-- Título -->\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Título</label>\r\n      <input type=\"text\" class=\"form-control\" formControlName=\"title\" [ngClass]=\"onValidate('title')\">\r\n      <div class=\"invalid-feedback\">{{showError('title')}}</div>\r\n    </div>\r\n\r\n    <!-- Descripción -->\r\n    <div class=\"mb-3\">\r\n      <label class=\"form-label\">Descripción</label>\r\n      <textarea class=\"form-control\" formControlName=\"description\" rows=\"4\" [ngClass]=\"onValidate('description')\"></textarea>\r\n      <div class=\"invalid-feedback\">{{showError('description')}}</div>\r\n    </div>\r\n\r\n    <!-- Fila: Precio + Categorías -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-6 mb-3\">\r\n        <label class=\"form-label\">Precio</label>\r\n        <input type=\"number\" class=\"form-control\" formControlName=\"price\" [ngClass]=\"onValidate('price')\" />\r\n        <div class=\"invalid-feedback\">{{showError('price')}}</div>\r\n      </div>\r\n\r\n      <div class=\"col-md-6 mb-3\">\r\n        <label class=\"form-label\">Categorías</label>\r\n        <ng-select\r\n          [items]=\"categories\"\r\n          bindLabel=\"description\"\r\n          bindValue=\"id\"\r\n          [multiple]=\"true\"\r\n          [closeOnSelect]=\"false\"\r\n          placeholder=\"Selecciona categorías\"\r\n          formControlName=\"categories\"\r\n          [ngClass]=\"onValidate('categories')\"\r\n          (change)=\"onCategoriesChange($event)\"\r\n          class=\"w-100\"\r\n        ></ng-select>\r\n        <div class=\"invalid-feedback\">{{showError('categories')}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Fila completa: Etiquetas -->\r\n    <div class=\"row\">\r\n      <div class=\"col-md-4 mb-3\">\r\n        <label class=\"form-label\">Condición</label>\r\n        <ng-select\r\n          [items]=\"conditionOptions\"\r\n          bindLabel=\"description\"\r\n          bindValue=\"id\"\r\n          placeholder=\"Seleccione condición\"\r\n          [ngClass]=\"onValidate('conditionTag')\"\r\n          formControlName=\"conditionTag\"\r\n          class=\"w-100\"\r\n        ></ng-select>\r\n        <div class=\"invalid-feedback\">{{showError('conditionTag')}}</div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-3\">\r\n        <label class=\"form-label\">Tipo de precio</label>\r\n        <ng-select\r\n          [items]=\"priceOptions\"\r\n          bindLabel=\"description\"\r\n          bindValue=\"id\"\r\n          placeholder=\"Seleccione tipo de precio\"\r\n          [ngClass]=\"onValidate('priceTag')\"\r\n          formControlName=\"priceTag\"\r\n          class=\"w-100\"\r\n        ></ng-select>\r\n        <div class=\"invalid-feedback\">{{showError('priceTag')}}</div>\r\n      </div>\r\n\r\n      <div class=\"col-md-4 mb-3\">\r\n        <label class=\"form-label\">Envío</label>\r\n        <ng-select\r\n          [items]=\"shippingOptions\"\r\n          bindLabel=\"description\"\r\n          bindValue=\"id\"\r\n          placeholder=\"Seleccione opción de envío\"\r\n          formControlName=\"shippingTag\"\r\n          [ngClass]=\"onValidate('shippingTag')\"\r\n          class=\"w-100\"\r\n        ></ng-select>\r\n        <div class=\"invalid-feedback\">{{showError('shippingTag')}}</div>\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"text-end mt-3 w-100\">\r\n      <button type=\"button\" class=\"btn btn-primary\" (click)=\"nextStep()\">Siguiente</button>\r\n    </div>\r\n  </div>\r\n\r\n<!-- PASO 2: Ubicación -->\r\n<div *ngIf=\"step === 2\">\r\n  <h5 class=\"mb-3\">Seleccionar Ubicación</h5>\r\n  <p class=\"text-muted mb-3\">\r\n    Selecciona una localidad en las opciones de debajo para iniciar el mapa y luego\r\n    haz clic en el mapa para seleccionar la ubicación de tu publicación.\r\n    Esta ubicación se mostrará de forma aproximada para proteger tu privacidad.\r\n  </p>\r\n\r\n  <!-- Selector de localidad -->\r\n  <div class=\"mb-3 col-3\">\r\n    <label class=\"mb-2\">Localidad</label>\r\n    <ng-select\r\n      [items]=\"locations\"\r\n      bindLabel=\"description\"\r\n      bindValue=\"id\"\r\n      formControlName=\"location_id\"\r\n      placeholder=\"Seleccione localidad\"\r\n      [ngClass]=\"onValidate('location_id')\"\r\n    >\r\n    </ng-select>\r\n    <div class=\"invalid-feedback\">{{showError('location_id')}}</div>\r\n  </div>\r\n  \r\n  <!-- Contenedor del mapa -->\r\n  <div #mapContainer style=\"height: 400px; width: 100%; border-radius: 8px; border: 1px solid #ddd;\"></div>\r\n\r\n  <div class=\"text-end mt-3\">\r\n    <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"prevStep()\">Anterior</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"nextStep()\">Siguiente</button>\r\n  </div>\r\n</div>\r\n\r\n        <!-- PASO 3: Imágenes -->\r\n        <div *ngIf=\"step === 3\" class=\"row mb-3\">\r\n  <div class=\"col-4\" *ngFor=\"let img of imageSlots; let i = index; trackBy: trackByIndex\">\r\n    <div class=\"position-relative border rounded p-1 text-center\" style=\"height: 210px;\">\r\n      <div *ngIf=\"img; else emptySlot\">\r\n        <img [src]=\"getImagePreview(img)\" class=\"img-fluid rounded\" style=\"max-height: 180px;\" />\r\n        <button type=\"button\" class=\"btn-close position-absolute top-0 end-0 m-1\" aria-label=\"Close\"\r\n                (click)=\"removeImageSlot(i)\"></button>\r\n      </div>\r\n      <ng-template #emptySlot>\r\n        <label class=\"d-flex align-items-center justify-content-center h-100 w-100 text-muted\"\r\n              style=\"cursor: pointer;\">\r\n          <input \r\n            type=\"file\" \r\n            (change)=\"onSlotImageSelected($event, i)\" \r\n            accept=\".jpg,.jpeg,.png\"\r\n            hidden \r\n          />\r\n          <span class=\"text-center\">+ Agregar imagen<br><small>(JPG, PNG)</small></span>\r\n        </label>\r\n      </ng-template>\r\n    </div>\r\n  </div>\r\n  <div class=\"text-end mt-3 w-100\">\r\n    @if (!hasAtLeastOneImage()) {\r\n      <div class=\"text-danger mb-2\">\r\n        Debe cargar al menos una imagen para continuar.\r\n      </div>\r\n    }\r\n    <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"prevStep()\">Anterior</button>\r\n    <button type=\"button\" class=\"btn btn-primary\" (click)=\"nextStep()\" [disabled]=\"!hasAtLeastOneImage()\">\r\n      Siguiente\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n        <!-- PASO 4: Contactos -->\r\n      <div *ngIf=\"step === 4\" formArrayName=\"contacts\">\r\n        <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n          <h5>Información de contacto</h5>\r\n          <small class=\"text-muted\">{{contacts.length}}/10 contactos</small>\r\n        </div>\r\n        \r\n        <div\r\n          class=\"mb-3\"\r\n          *ngFor=\"let contact of contacts.controls; let i = index\"\r\n          [formGroupName]=\"i\"\r\n        >\r\n          <div class=\"row\">\r\n            <div class=\"col-md-5 mb-2\">\r\n              <ng-select\r\n                [items]=\"contactTypes\"\r\n                bindLabel=\"description\"\r\n                bindValue=\"id\"\r\n                placeholder=\"Seleccione tipo de contacto\"\r\n                formControlName=\"contact_type_id\"\r\n                class=\"w-100\"\r\n                (change)=\"onContactTypeChange(i)\"\r\n              >\r\n              </ng-select>\r\n            </div>\r\n\r\n            <div class=\"col-md-5 mb-2\">\r\n              <input\r\n                class=\"form-control\"\r\n                [attr.placeholder]=\"getPlaceholder(i)\"\r\n                formControlName=\"contact_value\"\r\n              />\r\n              <small *ngIf=\"getHelpText(i)\" class=\"form-text text-muted\">\r\n                {{ getHelpText(i) }}\r\n              </small>\r\n              <div *ngIf=\"contact.get('contact_value')?.invalid && contact.get('contact_value')?.touched\" class=\"text-danger\">\r\n                {{ showErrorAt('contacts', i, 'contact_value') }}\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"col-md-2 mb-2 align-items-center\">\r\n              <button type=\"button\" class=\"btn btn-danger\" (click)=\"removeContact(i)\">X</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <button \r\n          type=\"button\" \r\n          class=\"btn btn-outline-primary mb-3\" \r\n          (click)=\"addContact()\"\r\n          [disabled]=\"contacts.length >= 10\"\r\n        >\r\n          + Agregar contacto\r\n        </button>\r\n        \r\n        <div *ngIf=\"contacts.length >= 10\" class=\"alert alert-warning\">\r\n          <small>Has alcanzado el límite máximo de 10 contactos.</small>\r\n        </div>\r\n\r\n        <br />\r\n        <div class=\"text-end mt-3 w-100\">\r\n          <button type=\"button\" class=\"btn btn-secondary me-2\" (click)=\"prevStep()\">Anterior</button>\r\n          <button type=\"button\" class=\"btn btn-success\" (click)=\"submit()\">Publicar</button>\r\n        </div>\r\n      </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</div>",
          "new-publication.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { NewPublicationComponent } from './new-publication.component';\r\n\r\ndescribe('NewPublicationComponent', () => {\r\n  let component: NewPublicationComponent;\r\n  let fixture: ComponentFixture<NewPublicationComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [NewPublicationComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(NewPublicationComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "new-publication.component.ts": "import { Component, NgZone, OnInit, AfterViewInit, ViewChild, ElementRef } from '@angular/core';\r\nimport { PublicationPost } from '../../models/PublicationPost';\r\nimport { FormArray, FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { FileService } from '../../services/file.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport Swal from 'sweetalert2';\r\nimport { Router } from '@angular/router';\r\nimport * as L from 'leaflet';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { UserGet } from '../../models/UserGet';\r\n\r\n@Component({\r\n  selector: 'app-new-publication',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, NgSelectModule],\r\n  templateUrl: './new-publication.component.html',\r\n  styleUrls: ['./new-publication.component.css']\r\n})\r\nexport class NewPublicationComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;\r\n  \r\n  step = 1;\r\n  form: FormGroup;\r\n  private map!: L.Map;\r\n  private marker!: L.Marker;\r\n\r\n  uploadedImagePaths: string[] = [];\r\n\r\n  locations: { id: number; description: string }[] = [];\r\n  categories: { id: number; description: string }[] = [];\r\n  tags: { id: number; description: string }[] = [];\r\n  contactTypes: { id: number; description: string }[] = [];\r\n  imageSlots: (File | null)[] = [null, null, null];\r\n  selectedImages: File[] = [];\r\n  userData!: UserGet;\r\n  user: UserGet = new UserGet();\r\n\r\n  conditionOptions = [\r\n    { id: 1, description: \"Nuevo\" },\r\n    { id: 2, description: \"Usado\" }\r\n  ];\r\n\r\n  priceOptions = [\r\n    { id: 4, description: \"Precio negociable\" },\r\n    { id: 5, description: \"Precio fijo\" }\r\n  ];\r\n\r\n  shippingOptions = [\r\n    { id: 3, description: \"Envío incluido\" },\r\n    { id: 6, description: \"Retiro en mano\" },\r\n    { id: 7, description: \"Punto de encuentro\" }\r\n  ];\r\n\r\n  locationCoordinates: { [key: number]: [number, number] } = {\r\n    1: [-31.9135, -63.6823], // Oncativo\r\n    2: [-32.0418, -63.5714], // Oliva\r\n    3: [-31.8431, -63.7454], // Manfredi\r\n    4: [-31.7773, -63.8028], // Laguna Larga\r\n    5: [-31.6824, -63.8852], // Pilar\r\n    6: [-31.6536, -63.9105], // Río Segundo\r\n    7: [-31.5645, -63.5399], // Villa del Rosario\r\n  };\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private publicationService: PublicationsService,\r\n    private fileService: FileService,\r\n    private userService: UsersService,\r\n    private utilsService: UtilsService,\r\n    private router: Router,\r\n    private authService: AuthService,\r\n  ) {\r\n    this.form = this.fb.group({\r\n      title: ['', [Validators.required, Validators.minLength(3), Validators.maxLength(50)]],\r\n      description: ['', [Validators.required, Validators.minLength(10), Validators.maxLength(500)]],\r\n      price: [null, [Validators.required, Validators.min(1)]],\r\n      location_id: [null, Validators.required],\r\n      categories: [null, Validators.required],\r\n      conditionTag: [null, Validators.required],\r\n      priceTag: [null, Validators.required],\r\n      shippingTag: [[], Validators.required],\r\n      latitude: [null, Validators.required],\r\n      longitude: [null, Validators.required],\r\n      contacts: this.fb.array([])\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadSelectData();\r\n    this.loadUserData(this.authService.getUser().id);\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.form.get('location_id')?.valueChanges.subscribe(() => {\r\n      if (this.map) {\r\n        this.map.remove(); \r\n      }\r\n      this.initMap(); \r\n    });\r\n  }\r\n\r\n    loadUserData(userId: number): void {\r\n    this.userService.getUserById(userId).subscribe({\r\n      next: (userData: UserGet) => {\r\n        this.user = userData;\r\n        if (this.contacts.length === 0) {\r\n        this.addContact();\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\ninitMap(): void {\r\n  const locationId = this.form.get('location_id')?.value;\r\n  const coords = this.locationCoordinates[locationId] || [-31.9135, -63.6823]; // Oncativo por defecto\r\n\r\n  this.map = L.map(this.mapContainer.nativeElement).setView(coords, 13);\r\n\r\n  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    attribution: '© OpenStreetMap contributors'\r\n  }).addTo(this.map);\r\n\r\n  const customIcon = L.divIcon({\r\n    className: 'custom-marker',\r\n    html: '<div style=\"background-color: #007bff; width: 20px; height: 20px; border-radius: 50%; border: 3px solid white; box-shadow: 0 2px 5px rgba(0,0,0,0.3);\"></div>',\r\n    iconSize: [20, 20],\r\n    iconAnchor: [10, 10]\r\n  });\r\n\r\n  this.marker = L.marker(coords, {\r\n    icon: customIcon,\r\n    draggable: true\r\n  }).addTo(this.map);\r\n\r\n  this.map.on('click', (e: L.LeafletMouseEvent) => {\r\n    const { lat, lng } = e.latlng;\r\n    this.updateMarkerPosition(lat, lng);\r\n  });\r\n\r\n  this.marker.on('dragend', (e: L.DragEndEvent) => {\r\n    const { lat, lng } = e.target.getLatLng();\r\n    this.updateMarkerPosition(lat, lng);\r\n  });\r\n\r\n  this.getCurrentLocation();\r\n}\r\n\r\n  getCurrentLocation(): void {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const lat = position.coords.latitude;\r\n          const lng = position.coords.longitude;\r\n          this.map.setView([lat, lng], 15);\r\n          this.updateMarkerPosition(lat, lng);\r\n        },\r\n        (error) => {\r\n          console.log('No se pudo obtener la ubicación actual:', error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  updateMarkerPosition(lat: number, lng: number): void {\r\n    this.marker.setLatLng([lat, lng]);\r\n    this.form.patchValue({\r\n      latitude: lat,\r\n      longitude: lng\r\n    });\r\n  }\r\n\r\n  trackByIndex(index: number, item: any): any {\r\n    return index;\r\n  }\r\n\r\n  loadSelectData(): void {\r\n    this.utilsService.getLocations().subscribe(data => this.locations = data);\r\n    this.publicationService.getCategories().subscribe(data => this.categories = data);\r\n    this.utilsService.getContactsTypes().subscribe(data => this.contactTypes = data);\r\n  }\r\n\r\n  get contacts(): FormArray {\r\n    return this.form.get('contacts') as FormArray;\r\n  }\r\n\r\naddContact(): void {\r\n  if (this.contacts.length >= 10) {\r\n    Swal.fire({\r\n      icon: 'warning',\r\n      title: 'Límite alcanzado',\r\n      text: 'No puedes agregar más de 10 contactos.',\r\n      showConfirmButton: false,\r\n      timer: 2000\r\n    });\r\n    return;\r\n  }\r\n\r\n  let contactForm;\r\n  \r\n  if (this.contacts.length === 0) {\r\n    contactForm = this.fb.group({\r\n      contact_type_id: [5, Validators.required],\r\n      contact_value: [this.user.email, Validators.required]\r\n    });\r\n  } else {\r\n    contactForm = this.fb.group({\r\n      contact_type_id: [null, Validators.required],\r\n      contact_value: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  this.contacts.push(contactForm);\r\n}\r\n\r\nremoveContact(index: number): void {\r\n  this.contacts.removeAt(index);\r\n}\r\n\r\nonContactTypeChange(index: number): void {\r\n  const control = this.contacts.at(index);\r\n  const tipo = control.get('contact_type_id')?.value;\r\n\r\n  control.get('contact_value')?.clearValidators();\r\n\r\n  switch (tipo) {\r\n    case 1: // Whatsapp\r\n      control.get('contact_value')?.setValidators([\r\n        Validators.required,\r\n        Validators.pattern(/^[0-9]{7,15}$/)\r\n      ]);\r\n      break; \r\n    case 2: // Facebook\r\n      control.get('contact_value')?.setValidators([\r\n        Validators.required,\r\n        Validators.pattern(/^https?:\\/\\/.+$/)\r\n      ]);\r\n      break;\r\n    case 3: // Teléfono\r\n      control.get('contact_value')?.setValidators([\r\n        Validators.required,\r\n        Validators.pattern(/^[0-9]{7,15}$/)\r\n      ]);\r\n      break;\r\n    case 4: // Instagram\r\n      control.get('contact_value')?.setValidators([\r\n        Validators.required,\r\n        Validators.pattern(/^[a-zA-Z0-9._]+$/)\r\n      ]);\r\n      break;\r\n    case 5: // Email\r\n      control.get('contact_value')?.setValidators([\r\n        Validators.required,\r\n        Validators.email\r\n      ]);\r\n      break;\r\n    default:\r\n      control.get('contact_value')?.setValidators(Validators.required);\r\n  }\r\n\r\n  control.get('contact_value')?.updateValueAndValidity();\r\n}\r\n\r\n\r\ngetPlaceholder(index: number): string {\r\n  const tipo = this.contacts.at(index).get('contact_type_id')?.value;\r\n  switch (tipo) {\r\n    case 1: return 'Ej: 3511234567';\r\n    case 2: return 'Ej: https://facebook.com/usuario';\r\n    case 3: return 'Ej: 3544123456';\r\n    case 4: return 'Ej: nombre.usuario';\r\n    case 5: return 'Ej: usuario@dominio.com';\r\n    default: return '';\r\n  }\r\n}\r\n\r\ngetHelpText(index: number): string | null {\r\n  const tipo = this.contacts.at(index).get('contact_type_id')?.value;\r\n  switch (tipo) {\r\n    case 4: return 'No incluyas el @, solo el nombre de usuario.';\r\n    case 2: return 'Incluye el enlace completo a tu perfil.';\r\n    case 1:\r\n    case 3: return 'Solo números, sin espacios ni símbolos.';\r\n    default: return null;\r\n  }\r\n}\r\n\r\nshowErrorAt(arrayName: string, index: number, controlName: string): string {\r\n  const array = this.form.get(arrayName) as FormArray;\r\n  const control = array.at(index).get(controlName);\r\n\r\n  if (control && control.errors) {\r\n    const [errorKey] = Object.keys(control.errors);\r\n    switch (errorKey) {\r\n      case 'required':\r\n        return 'Este campo no puede estar vacío.';\r\n      case 'email':\r\n        return 'Formato de correo electrónico inválido.';\r\n      case 'pattern':\r\n        return 'El formato ingresado no es válido.';\r\n      default:\r\n        return 'Error no identificado en el campo.';\r\n    }\r\n  }\r\n  return '';\r\n}\r\n\r\n  onCategoriesChange(selected: any[]) {\r\n    if (selected.length > 2) {\r\n      selected.pop();\r\n      this.form.get('categories')?.setValue(selected);\r\n    }\r\n  }\r\n\r\n  nextStep(): void {\r\n    if (this.step === 1) {\r\n      const requiredFields = ['title', 'description', 'price', 'categories', 'conditionTag', 'priceTag', 'shippingTag'];\r\n      const allValid = requiredFields.every(field => this.form.get(field)?.valid);\r\n\r\n      if (allValid) {\r\n        this.step++;\r\n        setTimeout(() => {\r\n          this.initMap();\r\n        }, 100);\r\n      } else {\r\n        requiredFields.forEach(field => this.form.get(field)?.markAsTouched());\r\n        console.warn('Faltan campos obligatorios en el paso 1');\r\n      }\r\n\r\n    } else if (this.step === 2) {\r\n    const latitude = this.form.get('latitude')?.value;\r\n    const longitude = this.form.get('longitude')?.value;\r\n    const locationIdValid = this.form.get('location_id')?.valid;\r\n\r\n    if (latitude && longitude && locationIdValid) {\r\n      this.step++;\r\n    } else {\r\n      this.form.get('location_id')?.markAsTouched();\r\n      Swal.fire({\r\n        icon: 'warning',\r\n        title: 'Ubicación requerida',\r\n        text: 'Por favor, selecciona una ubicación válida en las opciones disponibles.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n    }\r\n    } else if (this.step === 3) {\r\n      if (this.hasAtLeastOneImage()) {\r\n        this.uploadImages();\r\n      } else {\r\n        this.uploadedImagePaths = [];\r\n        this.step++;\r\n      }\r\n    }\r\n  }\r\n\r\n  prevStep(): void {\r\n    if (this.step > 1) {\r\n      this.step--;\r\n    }\r\n  }\r\n\r\nhasAtLeastOneImage(): boolean {\r\n  return this.imageSlots.some(img => img != null);\r\n}\r\n\r\n  uploadImages(): void {\r\n    const userId = this.authService.getUser().id;\r\n    const tempPublicationId = Date.now();\r\n\r\n    const validFiles = this.imageSlots.filter((f): f is File => f instanceof File);\r\n    console.log('Archivos a subir:', validFiles);\r\n\r\n    const uploadPromises = validFiles.map((file, index) =>\r\n      this.fileService.uploadPublicationPic(tempPublicationId, userId, index + 1, file).toPromise()\r\n    );\r\n\r\n    Promise.all(uploadPromises)\r\n      .then(urls => {\r\n        this.uploadedImagePaths = urls.filter((url): url is string => typeof url === 'string');\r\n        this.step++;\r\n      })\r\n      .catch(err => {\r\n        console.error('Error al subir imágenes', err);\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error al subir imágenes',\r\n          text: 'Ocurrió un error al subir las imágenes. Por favor, inténtalo de nuevo.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      });\r\n  }\r\n      \r\n\r\n  submit(): void {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      Swal.fire({\r\n        icon: 'warning',\r\n        title: 'Campos incompletos',\r\n        text: 'Por favor, completa todos los campos requeridos antes de continuar.',\r\n        showConfirmButton: false,\r\n        timer: 2000\r\n      });\r\n      return;\r\n    }\r\n\r\n    const contacts = this.contacts.controls.map(ctrl => ({\r\n      contact_type_id: ctrl.get('contact_type_id')?.value,\r\n      contact_value: ctrl.get('contact_value')?.value\r\n    }));\r\n\r\n    const publication = {\r\n      user_id: this.authService.getUser().id,\r\n      title: this.form.value.title,\r\n      description: this.form.value.description,\r\n      price: this.form.value.price,\r\n      location_id: this.form.value.location_id,\r\n      categories: this.form.value.categories,\r\n      tags: [this.form.value.conditionTag, this.form.value.priceTag, this.form.value.shippingTag],\r\n      images: this.uploadedImagePaths,\r\n      latitude: this.form.value.latitude,\r\n      longitude: this.form.value.longitude,\r\n      contacts: contacts\r\n    };\r\n\r\n    this.publicationService.createPublication(publication).subscribe({\r\n      next: res => {\r\n        this.form.reset();\r\n        this.selectedImages = [];\r\n        this.uploadedImagePaths = [];\r\n        this.step = 1;\r\n        this.contacts.clear();\r\n        this.addContact();\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: '¡Completado!',\r\n          text: 'Publicación creada con éxito',\r\n          showConfirmButton: false,\r\n          timer: 1500\r\n        }).then(() => {\r\n          this.router.navigate(['/home']);\r\n        });\r\n      },\r\n      error: err => {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error al crear la publicación',\r\n          text: err.error.message || 'Ocurrió un error inesperado. Inténtalo de nuevo más tarde.',\r\n          showConfirmButton:false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  getImagePreview(file: File): string {\r\n    return URL.createObjectURL(file);\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    }\r\n  }\r\n\r\nonSlotImageSelected(event: any, index: number): void {\r\n    const file: File = event.target.files[0];\r\n    if (file) {\r\n      // Validar tipo de archivo\r\n      const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];\r\n      if (!allowedTypes.includes(file.type)) {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Formato no válido',\r\n          text: 'Solo se permiten archivos JPG, JPEG y PNG.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n        event.target.value = '';\r\n        return;\r\n      }\r\n\r\n      const maxSize = 5 * 1024 * 1024; // 5MB en bytes\r\n      if (file.size > maxSize) {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Archivo muy grande',\r\n          text: 'El archivo no puede ser mayor a 5MB.',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n        event.target.value = '';\r\n        return;\r\n      }\r\n\r\n      this.imageSlots[index] = file;\r\n    }\r\n  }\r\n\r\n  removeImageSlot(index: number): void {\r\n    this.imageSlots[index] = null;\r\n  }\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.form.get(controlName);\r\n\r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'email':\r\n          return 'Formato de correo electrónico inválido.';\r\n        case 'minlength':\r\n          return `El valor ingresado es demasiado corto. Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `El valor ingresado es demasiado largo. Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'min':\r\n          return `El valor es menor que el mínimo permitido (${control.errors['min'].min}).`;\r\n        case 'pattern':\r\n          return 'El formato ingresado no es válido.';\r\n        case 'requiredTrue':\r\n          return 'Debe aceptar el campo requerido para continuar.';\r\n        case 'date':\r\n          return 'La fecha ingresada es inválida.';\r\n        default:\r\n          return 'Error no identificado en el campo.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n}"
        },
        "not-found": {
          "not-found.component.css": "  .fondo-gris{\r\n    background-color: #f8f9fa;\r\n  }",
          "not-found.component.html": "<div class=\"fondo-gris\" style=\"min-height: 100vh;\">\r\n<h1>404 - Página No Encontrada</h1>\r\n<p>La ruta que buscas no existe.</p>\r\n\r\n<a [routerLink]=\"['/home']\">Volver al Inicio</a>\r\n</div>",
          "not-found.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { NotFoundComponent } from './not-found.component';\r\n\r\ndescribe('NotFoundComponent', () => {\r\n  let component: NotFoundComponent;\r\n  let fixture: ComponentFixture<NotFoundComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [NotFoundComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(NotFoundComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "not-found.component.ts": "import { Component } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  standalone: true,\r\n  imports: [RouterModule],\r\n  templateUrl: './not-found.component.html',\r\n  styleUrl: './not-found.component.css'\r\n})\r\nexport class NotFoundComponent {\r\n\r\n}\r\n"
        },
        "payment-failure": {
          "payment-failure.component.css": "",
          "payment-failure.component.html": "<p>payment-failure works!</p>\r\n",
          "payment-failure.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { PaymentFailureComponent } from './payment-failure.component';\r\n\r\ndescribe('PaymentFailureComponent', () => {\r\n  let component: PaymentFailureComponent;\r\n  let fixture: ComponentFixture<PaymentFailureComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [PaymentFailureComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PaymentFailureComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "payment-failure.component.ts": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-payment-failure',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './payment-failure.component.html',\r\n  styleUrl: './payment-failure.component.css'\r\n})\r\nexport class PaymentFailureComponent implements OnInit {\r\n\r\n  private readonly router = inject(Router);\r\n\r\n  ngOnInit(): void {\r\n    Swal.fire({\r\n      icon: 'error',\r\n      title: 'Pago cancelado',\r\n      text: 'No se completó el pago.',\r\n      confirmButtonText: 'Aceptar'\r\n    }).then(() => {\r\n      this.router.navigate(['/subscriptions']); \r\n    });\r\n  }\r\n\r\n}\r\n"
        },
        "payment-success": {
          "payment-success.component.css": "",
          "payment-success.component.html": "<p>payment-success works!</p>\r\n",
          "payment-success.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { PaymentSuccessComponent } from './payment-success.component';\r\n\r\ndescribe('PaymentSuccessComponent', () => {\r\n  let component: PaymentSuccessComponent;\r\n  let fixture: ComponentFixture<PaymentSuccessComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [PaymentSuccessComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PaymentSuccessComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "payment-success.component.ts": "import { Component, inject } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-payment-success',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './payment-success.component.html',\r\n  styleUrl: './payment-success.component.css'\r\n})\r\nexport class PaymentSuccessComponent {\r\n\r\n  private readonly router = inject(Router);\r\n\r\n  ngOnInit(): void {\r\n    Swal.fire({\r\n      icon: 'success',\r\n      title: '¡Pago exitoso!',\r\n      text: 'Tu suscripción se activó correctamente.',\r\n      confirmButtonText: 'Aceptar'\r\n    }).then(() => {\r\n      this.router.navigate(['/subscriptions']);\r\n    });\r\n  }\r\n\r\n}\r\n"
        },
        "publication": {
          "publication.component.css": "/* Tus estilos originales sin cambios */\r\n.carousel-inner img {\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.carousel-inner {\r\n  height: 350px;\r\n}\r\n\r\n.carousel-item {\r\n  position: relative;\r\n  height: 100%;\r\n}\r\n\r\n.background-blur {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-size: cover;\r\n  background-position: center;\r\n  filter: blur(20px) brightness(0.6);\r\n  z-index: 0;\r\n}\r\n\r\n.zoom-wrapper {\r\n  position: relative;\r\n  z-index: 1;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n}\r\n\r\n.zoom-wrapper img.zoom-img {\r\n  max-height: 100%;\r\n  max-width: 100%;\r\n  object-fit: contain;\r\n}\r\n\r\n.custom-lightbox {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.85);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  z-index: 1050;\r\n  cursor: zoom-out;\r\n}\r\n\r\n.lightbox-img {\r\n  max-width: 90%;\r\n  max-height: 90%;\r\n  border-radius: 8px;\r\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n}\r\n\r\n.carousel-inner .carousel-item img {\r\n  height: 350px;\r\n  width: 100%;\r\n  border-radius: 0.5rem;\r\n  object-fit: contain;\r\n}\r\n\r\n.badge {\r\n  font-size: 0.8rem;\r\n  padding: 0.4em 0.6em;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.img-avatar {\r\n  width: 50px;\r\n  border: 0.3px solid black;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  object-fit: cover;\r\n}\r\n\r\n.zoom-img {\r\n  transition: transform 0.3s ease;\r\n  transform: scale(1); \r\n}\r\n\r\n.zoom-img:hover {\r\n  transform: scale(1.1); \r\n}\r\n\r\n.zoom-wrapper {\r\n  cursor: zoom-in;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.zoom-wrapper img.zoom-img {\r\n  transition: transform 0.3s ease;\r\n  transform-origin: top left;\r\n  will-change: transform;\r\n}\r\n\r\n.avatar-initials {\r\n    font-size: 30px;\r\n    color: black;\r\n  }\r\n\r\n.avatar-initials {\r\n  font-size: 20px;\r\n  color: black;\r\n  border: 0.3px solid black;  \r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  background-color: white;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.carousel-control-prev-icon,\r\n.carousel-control-next-icon {\r\n  filter: invert(41%) sepia(76%) saturate(500%) hue-rotate(180deg);\r\n}\r\n\r\n.bg-white.shadow {\r\n  box-shadow: 0 8px 25px rgba(0,0,0,0.08) !important;\r\n}\r\n\r\n.btn {\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn:hover {\r\n  transform: translateY(-1px);\r\n}\r\n\r\n.contact-link {\r\n  color: #212529; \r\n  text-decoration: none;\r\n  transition: color 0.2s ease, text-decoration 0.2s ease;\r\n  padding: 0.5rem;\r\n  border-radius: 0.5rem;\r\n}\r\n\r\n.contact-link:hover {\r\n  color: #0d6efd; \r\n  text-decoration: underline !important;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.review-card {\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.review-card:hover {\r\n  box-shadow: 0 4px 12px rgba(0,0,0,0.1);\r\n  transform: translateY(-2px);\r\n}\r\n\r\n.btn-link {\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn-link:hover {\r\n  transform: scale(1.1);\r\n}\r\n\r\n.badge {\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.badge:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.form-control:focus {\r\n  box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.15);\r\n}",
          "publication.component.html": "\r\n<div class=\"bg-light min-vh-100 py-3\">\r\n  @if (publication.active == false && publication.user.id != userLoged.id && !isAdminOrModerator()) { \r\n    <div class=\"container\">\r\n      <div class=\"alert alert-secondary text-center\" role=\"alert\">\r\n        Esta publicación ya no está activa.\r\n      </div>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"container\">\r\n      <div class=\"bg-white shadow-sm rounded-4 p-4 mb-3\">\r\n        <div class=\"d-flex justify-content-between align-items-start\">\r\n          <div class=\"flex-grow-1\">\r\n            <h1 class=\"mb-2 text-primary\">{{ publication.title }}</h1>\r\n            <div class=\"d-flex align-items-center gap-3 mb-3\">\r\n              <h2 class=\"text mb-0\">$ {{ publication.price | decimalFormat }}</h2>\r\n              <small class=\"text-muted\">\r\n                <i class=\"bi bi-calendar3 me-1\"></i>\r\n                {{ formatDate(publication.created_at) }}\r\n              </small>\r\n            </div>\r\n            <div class=\"mb-0\">\r\n              <span *ngFor=\"let tag of publication.tags\" \r\n                    [ngClass]=\"getTagClass(tag)\" \r\n                    class=\"badge me-2 mb-2 fs-6\">\r\n                {{ tag }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n          \r\n          <!-- Acciones principales -->\r\n          <div class=\"d-flex flex-column gap-2 ms-4\">\r\n            <!-- Botón Favorito original -->\r\n            <div class=\"align-self-end\">\r\n              <button (click)=\"toggleFavorite()\" \r\n                      class=\"btn btn-link p-0\"\r\n                      [class.favorited]=\"isFavorite\"\r\n                      aria-label=\"Agregar a favoritos\"\r\n                      style=\"font-size: 1.8rem;\">\r\n                <i class=\"bi\" [ngClass]=\"isFavorite ? 'bi-heart-fill text-danger' : 'bi-heart'\"></i>\r\n              </button>\r\n            </div>\r\n            \r\n            <div class=\"d-flex gap-2\">\r\n              <!-- Botón Compartir -->\r\n              <button class=\"btn btn-outline-info btn-sm\" (click)=\"sharePublication()\">\r\n                <i class=\"bi bi-share-fill\"></i>\r\n              </button>\r\n\r\n              <!-- Botón Editar -->\r\n              @if (publication.user.id == userLoged.id || isAdmin()) {\r\n                <button class=\"btn btn-outline-primary btn-sm\" (click)=\"goToEditPublication(publication.id)\">\r\n                  <i class=\"bi bi-pencil-fill\"></i>\r\n                </button>\r\n              }\r\n\r\n              <!-- Botón Reportar -->\r\n              @if (publication.user.id != userLoged.id && isLoggedIn()) {\r\n                <button class=\"btn btn-outline-danger btn-sm\" (click)=\"openReportModal(publication.id)\">\r\n                  <i class=\"bi bi-flag-fill\"></i>\r\n                </button>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- SECCIÓN PRINCIPAL: Imágenes y Descripción -->\r\n      <div class=\"row g-3 mb-3\">\r\n        <!-- Carrusel de imágenes -->\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"bg-white shadow-sm rounded-4 p-3\">\r\n            <div id=\"carouselImages\" class=\"carousel slide\" data-bs-ride=\"carousel\">\r\n              <div class=\"carousel-inner rounded-3\">\r\n                <div class=\"carousel-item\" [class.active]=\"i === 0\" *ngFor=\"let img of publication.images; let i = index\">\r\n                  <div class=\"background-blur\" [ngStyle]=\"{ 'background-image': 'url(' + img + ')' }\"></div>\r\n                  <div class=\"zoom-wrapper\"\r\n                      (mousemove)=\"zoomImage($event)\"\r\n                      (mouseleave)=\"resetZoom()\"\r\n                      style=\"position: relative; overflow: hidden;\">\r\n                    <img [src]=\"img\"\r\n                         class=\"zoom-img\"\r\n                         #zoomedImg\r\n                         alt=\"Imagen de publicación\"\r\n                         style=\"cursor: zoom-in;\"\r\n                         (click)=\"openImage(img)\" />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button class=\"carousel-control-prev\" type=\"button\" data-bs-target=\"#carouselImages\" data-bs-slide=\"prev\">\r\n                <span class=\"carousel-control-prev-icon\"></span>\r\n              </button>\r\n              <button class=\"carousel-control-next\" type=\"button\" data-bs-target=\"#carouselImages\" data-bs-slide=\"next\">\r\n                <span class=\"carousel-control-next-icon\"></span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Descripción -->\r\n        <div class=\"col-lg-4\">\r\n          <div class=\"bg-white shadow-sm rounded-4 p-4 h-100\">\r\n            <h4 class=\"text-primary mb-3\">\r\n              <i class=\"bi bi-card-text me-2\"></i>\r\n              Lo que tenes que saber\r\n            </h4>\r\n            <p class=\"text-dark lh-base\">{{ publication.description }}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- SECCIÓN SECUNDARIA: Ubicación y Vendedor -->\r\n      <div class=\"row g-3 mb-3\">\r\n        <!-- Ubicación -->\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"bg-white shadow-sm rounded-4 p-4\">\r\n            <h5 class=\"text-primary mb-3\">\r\n              <i class=\"bi bi-geo-alt me-2\"></i>\r\n              Ubicación\r\n            </h5>\r\n            <p class=\"mb-3 text-muted\">\r\n              <i class=\"bi bi-pin-map text-danger me-2\"></i>\r\n              {{ publication.location }}\r\n            </p>\r\n            <app-view-map \r\n              class=\"rounded-3 overflow-hidden w-100\" \r\n              [latitude]=\"+(publication.latitude)\" \r\n              [longitude]=\"+(publication.longitude)\">\r\n            </app-view-map>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Información del vendedor -->\r\n        <div class=\"col-lg-6\">\r\n          <div class=\"bg-white shadow-sm rounded-4 p-4\">\r\n            <h5 class=\"text-primary mb-3\">\r\n              <i class=\"bi bi-person-circle me-2\"></i>\r\n              Vendedor\r\n            </h5>\r\n            \r\n            <!-- Perfil del vendedor -->\r\n            <div class=\"d-flex align-items-center mb-4\">\r\n              <div class=\"avatar-perfil me-3\">\r\n                <img *ngIf=\"publication.user.avatar_url; else initials\" \r\n                     [src]=\"publication.user.avatar_url\" \r\n                     alt=\"Avatar\" \r\n                     class=\"img-avatar\">\r\n                <ng-template #initials>\r\n                  <div class=\"avatar-initials\">\r\n                    {{ getInitials(publication.user.name, publication.user.surname) }}\r\n                  </div>\r\n                </ng-template>\r\n              </div>\r\n              <div class=\"flex-grow-1\">\r\n                <div class=\"d-flex align-items-center mb-1\">\r\n                  <strong class=\"me-2\">{{ publication.user.name }} {{ publication.user.surname }}</strong>\r\n                  <i *ngIf=\"publication.user.verified\" class=\"bi bi-patch-check-fill text-info\"></i>\r\n                </div>\r\n                <div class=\"d-flex align-items-center\">\r\n                  <ng-container *ngFor=\"let star of [].constructor(5); let i = index\">\r\n                    <i [ngClass]=\"getStarClass(publication.user.rating, i)\" style=\"color: #ffc107;\"></i>\r\n                  </ng-container>\r\n                  <small class=\"ms-2 text-muted\">({{ publication.user.rating }})</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Contactos -->\r\n            <div class=\"border-top pt-3\">\r\n              <h6 class=\"text-muted mb-3\">\r\n                <i class=\"bi bi-chat-dots me-2\"></i>\r\n                Contactar\r\n              </h6>\r\n              <div class=\"d-flex flex-column gap-2\">\r\n                <ng-container *ngFor=\"let contact of publication.contacts\">\r\n                  <a [href]=\"getContactLink(contact)\"\r\n                     target=\"_blank\"\r\n                     rel=\"noopener\"\r\n                     class=\"d-flex align-items-center text-decoration-none contact-link p-2 rounded bg-light\">\r\n                    <i [ngClass]=\"getContactIcon(contact.contact_type)\" class=\"me-3 text-primary\"></i>\r\n                    <span>{{ contact.contact_value }}</span>\r\n                  </a>\r\n                </ng-container>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- SECCIÓN DE RESEÑAS -->\r\n      <div class=\"bg-white shadow-sm rounded-4 p-4 mb-3\">\r\n        <h4 class=\"text-primary mb-4\">\r\n          <i class=\"bi bi-star me-2\"></i>\r\n          Reseñas y Valoraciones\r\n        </h4>\r\n        \r\n        <div *ngIf=\"(ratings?.length || 0) > 0; else noReviews\">\r\n          <div class=\"row g-3\">\r\n            <div *ngFor=\"let rating of ratings | slice:0:reviewsToShow\" class=\"col-md-6\">\r\n              <div class=\"card h-100\">\r\n                <div class=\"card-body\">\r\n                  <div class=\"d-flex justify-content-between align-items-start mb-2\">\r\n                    <strong class=\"text-primary\">{{ rating.rater_user.name }} {{ rating.rater_user.surname }}</strong>\r\n                    <small class=\"text-muted\">{{ formatDate(rating.created_at) }}</small>\r\n                  </div>\r\n                  <div class=\"mb-2\">\r\n                    <ng-container *ngFor=\"let star of [].constructor(5); let i = index\">\r\n                      <i [ngClass]=\"getStarClass(rating.rating, i)\" style=\"color: #ffc107;\"></i>\r\n                    </ng-container>\r\n                  </div>\r\n                  <p class=\"card-text\">{{ rating.comment }}</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          \r\n          <div *ngIf=\"ratings.length > reviewsToShow\" class=\"text-center mt-3\">\r\n            <button class=\"btn btn-outline-primary\" (click)=\"loadMore()\">\r\n              Ver más reseñas\r\n            </button>\r\n          </div>\r\n        </div>\r\n        \r\n        <ng-template #noReviews>\r\n          <div class=\"text-center py-4\">\r\n            <i class=\"bi bi-star text-muted\" style=\"font-size: 3rem;\"></i>\r\n            <p class=\"text-muted mt-2\">Este vendedor aún no tiene reseñas.</p>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n\r\n      <!-- SECCIÓN PARA ENVIAR RESEÑA -->\r\n      @if (userLoged.id != publication.user.id && isLoggedIn()) {\r\n        <div class=\"bg-white shadow-sm rounded-4 p-4\">\r\n          @if (existingRating != null) {\r\n                <h5 class=\"text-primary mb-3\">\r\n                  <i class=\"bi bi-check-circle me-2\"></i>\r\n                  Tu reseña\r\n                </h5>\r\n                <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                  <div class=\"d-flex justify-content-between align-items-center mb-2\">\r\n                  <div>\r\n                    <ng-container *ngFor=\"let star of [].constructor(5); let i = index\">\r\n                    <i [ngClass]=\"getStarClass(existingRating.rating, i)\" style=\"color: #ffc107;\"></i>\r\n                    </ng-container>\r\n                  </div>\r\n                  <div class=\"d-flex align-items-center gap-2\">\r\n                    <small class=\"text-muted\">{{ formatDate(existingRating.created_at) }}</small>\r\n                    <button class=\"btn btn-outline-danger btn-sm\" \r\n                        (click)=\"deleteRating()\" \r\n                        title=\"Eliminar reseña\">\r\n                    <i class=\"bi bi-trash\"></i>\r\n                    Eliminar reseña\r\n                    </button>\r\n                  </div>\r\n                  </div>\r\n                  <p class=\"mb-0\">{{ existingRating.comment }}</p>\r\n                </div>\r\n                </div>\r\n                }\r\n          @else {\r\n            <h5 class=\"text-primary mb-3\">\r\n              <i class=\"bi bi-pencil-square me-2\"></i>\r\n              Dejá tu reseña\r\n            </h5>\r\n            <form (ngSubmit)=\"submitRating()\" #ratingForm=\"ngForm\">\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Calificación</label>\r\n                <div>\r\n                  <ng-container *ngFor=\"let i of [0, 1, 2, 3, 4]\">\r\n                    <i class=\"bi me-1\"\r\n                       [ngClass]=\"getStarClass(hoveredRating || newRating.rating, i)\"\r\n                       (mousemove)=\"onHover(i, $event)\"\r\n                       (mouseleave)=\"onLeave()\"\r\n                       (click)=\"setRating(i, $event)\"\r\n                       style=\"font-size: 2rem; cursor: pointer; color: #ffc107;\"></i>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label class=\"form-label\">Comentario</label>\r\n                <textarea class=\"form-control\" \r\n                          [(ngModel)]=\"newRating.comment\" \r\n                          name=\"comment\" \r\n                          rows=\"4\" \r\n                          placeholder=\"Comparte tu experiencia...\"\r\n                          required></textarea>\r\n              </div>\r\n              <div class=\"text-end\">\r\n                <button class=\"btn btn-primary px-4\" type=\"submit\" [disabled]=\"ratingForm.invalid\">\r\n                  <i class=\"bi bi-send me-2\"></i>\r\n                  Enviar reseña\r\n                </button>\r\n              </div>\r\n            </form>\r\n          }\r\n        </div>\r\n      }\r\n\r\n      <!-- Modal de reporte -->\r\n      <app-report-modal\r\n        *ngIf=\"showReportModal\"\r\n        [reportedByUserId]=\"currentUserId\"\r\n        [publicationId]=\"publicationToReport\"\r\n        (close)=\"showReportModal = false\">\r\n      </app-report-modal>\r\n\r\n      <!-- Lightbox -->\r\n      <div *ngIf=\"selectedImage\" class=\"custom-lightbox\" (click)=\"closeImage()\">\r\n        <img [src]=\"selectedImage\" class=\"lightbox-img\" />\r\n      </div>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<!-- Toast -->\r\n<div #liveToast\r\n     class=\"toast align-items-center border-0 position-fixed\"\r\n     role=\"alert\"\r\n     aria-live=\"assertive\"\r\n     aria-atomic=\"true\"\r\n     style=\"bottom: 1rem; left: 50%; transform: translateX(-50%); min-width: 300px; z-index: 9999;\">\r\n  <div class=\"d-flex\">\r\n    <div class=\"toast-body\">{{ toastMessage }}</div>\r\n    <button type=\"button\"\r\n            class=\"btn-close btn-close-white me-2 m-auto\"\r\n            data-bs-dismiss=\"toast\"\r\n            aria-label=\"Close\"\r\n            (click)=\"hideToast()\"></button>\r\n  </div>\r\n</div>",
          "publication.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { PublicationComponent } from './publication.component';\r\n\r\ndescribe('PublicationComponent', () => {\r\n  let component: PublicationComponent;\r\n  let fixture: ComponentFixture<PublicationComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [PublicationComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PublicationComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "publication.component.ts": "import { Component, ElementRef, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { PublicationGet } from '../../models/PublicationGet';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FavoriteService } from '../../services/favorite.service';\r\nimport { UserLoged } from '../../models/UserLoged';\r\nimport { Toast } from 'bootstrap';\r\nimport { RatingGet } from '../../models/RatingGet';\r\nimport { RatingPost } from '../../models/RatingPost';\r\nimport { RatingService } from '../../services/rating.service';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DecimalFormatPipe } from '../../pipes/decimal-format.pipe';\r\nimport { ViewMapComponent } from \"../view-map/view-map.component\";\r\nimport { ReportModalComponent } from \"../report-modal/report-modal.component\";\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-publication',\r\n  standalone: true,\r\n  imports: [PipesModule, CommonModule, FormsModule, DecimalFormatPipe, ViewMapComponent, ReportModalComponent],\r\n  templateUrl: './publication.component.html',\r\n  styleUrl: './publication.component.css'\r\n})\r\nexport class PublicationComponent implements OnInit {\r\n\r\n  publication!: PublicationGet;\r\n\r\n  @ViewChildren('zoomedImg') zoomedImgs!: QueryList<ElementRef<HTMLImageElement>>;\r\n  @ViewChild('liveToast', { static: false }) toastElement!: ElementRef<HTMLDivElement>;\r\n  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;\r\n\r\n  isFavorite = false;\r\n  userLoged: UserLoged = new UserLoged();\r\n  toastMessage = '';\r\n  toastInstance: any;\r\n  ratings: RatingGet[] = [];\r\n  newRating: RatingPost = new RatingPost();\r\n  existingRating: RatingGet | null = null;\r\n  reviewsToShow = 5;\r\n  hoveredRating = 0;\r\n  selectedImage: string | null = null;\r\n  showReportModal = false;\r\n  publicationToReport: number = 0;\r\n  currentUserId = 0;\r\n  \r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n    private publicationService: PublicationsService,\r\n    private authService: AuthService,\r\n    private favoriteService: FavoriteService,\r\n    private ratingService: RatingService,\r\n    private utilsService: UtilsService,\r\n    private router: Router,\r\n  ) {}\r\n\r\nngOnInit(): void {\r\n  this.route.paramMap.subscribe(params => {\r\n    const id = params.get('id');\r\n    console.log('ID recibido:', id);\r\n\r\n    if (id) {\r\n      this.loadPublication(id);\r\n    }\r\n  });\r\n  this.userLoged = this.authService.getUser();\r\n  this.currentUserId = this.userLoged.id;\r\n}\r\n\r\n\r\ntoggleFavorite() {\r\n  const userId = this.userLoged.id;\r\n  const dto = {\r\n    publication_id: this.publication.id,\r\n    user_id: userId,\r\n  };\r\n\r\n  if (this.isFavorite) {\r\n    this.favoriteService.deleteFavorite(dto).subscribe(() => {\r\n      this.isFavorite = false;\r\n      this.showToast('Eliminado de favoritos',false);\r\n    });\r\n  } else {\r\n    this.favoriteService.createFavorite(dto).subscribe(() => {\r\n      this.isFavorite = true;\r\n      this.showToast('Agregado a favoritos',true);\r\n    });\r\n  }\r\n}\r\n\r\nisLoggedIn(): boolean {\r\n  return this.authService.isLoggedIn();\r\n}\r\n\r\nopenReportModal(publicationId: number) {\r\n  this.publicationToReport = publicationId;\r\n  this.utilsService.userAlreadyReported(this.userLoged.id, publicationId).subscribe({\r\n      next: (alreadyReported) => {\r\n        if (alreadyReported) {\r\n          Swal.fire({\r\n            title: 'Ya reportaste esta publicación',\r\n            icon: 'info',\r\n            text: 'No podés volver a reportarla, nos encargaremos de revisarla.',\r\n            timer: 2000,\r\n            showConfirmButton: false\r\n          });\r\n        } else {\r\n          this.showReportModal = true; \r\n        }\r\n      },\r\n      error: () => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudo verificar el estado del reporte.',\r\n          icon: 'error',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n\r\nsubmitRating() {\r\n  this.newRating = {\r\n    rater_user_id: this.userLoged.id,\r\n    rated_user_id: this.publication.user.id,\r\n    rating: this.newRating.rating,\r\n    comment: this.newRating.comment\r\n  };\r\n\r\n  this.ratingService.addRating(this.newRating).subscribe(() => {\r\n    this.loadRatings();\r\n    this.toastMessage = '¡Reseña enviada con éxito!';\r\n    this.showToast(this.toastMessage, true);\r\n    this.loadPublication(this.publication.id.toString());\r\n  });\r\n}\r\n\r\nopenImage(img: string) {\r\n  this.selectedImage = img;\r\n}\r\n\r\nsharePublication() {\r\n  if (navigator.share) {\r\n    navigator.share({\r\n      title: 'Mirá esta publicación',\r\n      text: 'Te comparto este contenido:',\r\n      url: window.location.href\r\n    })\r\n    .then(() => console.log('Compartido exitosamente'))\r\n    .catch((error) => console.error('Error al compartir:', error));\r\n  } else {\r\n    this.copyToClipboard(window.location.href);\r\n  }\r\n}\r\n\r\ncopyToClipboard(text: string) {\r\n  navigator.clipboard.writeText(text).then(() => {\r\n    this.showToast('Enlace copiado al portapapeles',true);\r\n  });\r\n}\r\n\r\n  goToEditPublication(id: number): void {\r\n    this.publicationService.addView(id).subscribe({\r\n      next: () => {\r\n        this.router.navigate(['/publication', id, 'edit']).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\ncloseImage() {\r\n  this.selectedImage = null;\r\n}\r\n\r\nshowToast(message: string, success: boolean) {\r\n  this.toastMessage = message;\r\n\r\n  const toastEl = this.toastElement.nativeElement;\r\n\r\n  toastEl.classList.remove('bg-success', 'bg-dark', 'text-white');\r\n\r\n  if (success) {\r\n    toastEl.classList.add('bg-success', 'text-white'); // fondo verde\r\n  } else {\r\n    toastEl.classList.add('bg-dark', 'text-white');    // fondo negro\r\n  }\r\n\r\n  if (!this.toastInstance) {\r\n    this.toastInstance = new Toast(toastEl);\r\n  }\r\n\r\n  this.toastInstance.show();\r\n}\r\n\r\nhideToast() {\r\n  if (this.toastInstance) {\r\n    this.toastInstance.hide();\r\n  }\r\n}\r\n\r\nloadMore() {\r\n  this.reviewsToShow += 5;\r\n  }\r\n\r\nsetRating(index: number, event: MouseEvent) {\r\n  const element = event.target as HTMLElement;\r\n  const { left, width } = element.getBoundingClientRect();\r\n  const x = event.clientX - left;\r\n  const isHalf = x < width / 2;\r\n  this.newRating.rating = isHalf ? index + 0.5 : index + 1;\r\n}\r\n\r\nonHover(index: number, event: MouseEvent) {\r\n  const element = event.target as HTMLElement;\r\n  const { left, width } = element.getBoundingClientRect();\r\n  const x = event.clientX - left;\r\n  const isHalf = x < width / 2;\r\n  this.hoveredRating = isHalf ? index + 0.5 : index + 1;\r\n}\r\n\r\nrefreshPage() {\r\n  this.router.navigateByUrl('/', { skipLocationChange: true }).then(() => {\r\n    this.router.navigate(['/publication', this.publication.id]);\r\n  });\r\n}\r\n\r\nonLeave() {\r\n  this.hoveredRating = 0;\r\n}\r\n\r\nloadExistingRating() {\r\n  this.ratingService.hasRating(this.publication.user.id, this.userLoged.id).subscribe((data) => {\r\n    if (data) {\r\n      this.existingRating = data;\r\n    }\r\n  });\r\n}\r\n\r\nloadRatings() {\r\n  this.ratingService.getRatingsByUser(this.publication.user.id).subscribe((data) => {\r\n    this.ratings = data;\r\n  });\r\n}\r\n\r\nzoomImage(event: MouseEvent) {\r\n    const img = (event.target as HTMLElement);\r\n    if (img && img instanceof HTMLImageElement) {\r\n      const rect = img.getBoundingClientRect();\r\n\r\n      const offsetX = event.clientX - rect.left;\r\n      const offsetY = event.clientY - rect.top;\r\n\r\n      const xPercent = (offsetX / rect.width) * 100;\r\n      const yPercent = (offsetY / rect.height) * 100;\r\n\r\n      // Escala de zoom\r\n      const scale = 3; // zoom 2x\r\n\r\n      img.style.transformOrigin = `${xPercent}% ${yPercent}%`;\r\n      img.style.transform = `scale(${scale})`;\r\n    }\r\n  }\r\n\r\n  resetZoom() {\r\n    this.zoomedImgs.forEach(imgRef => {\r\n      const img = imgRef.nativeElement;\r\n      img.style.transform = 'scale(1)';\r\n      img.style.transformOrigin = 'center center';\r\n    });\r\n  }\r\n\r\n  deleteRating() {\r\nSwal.fire({\r\n  title: '¿Estás seguro?',\r\n  text: 'Esta acción eliminará tu reseña permanentemente.',\r\n  icon: 'warning',\r\n  showCancelButton: true,\r\n  confirmButtonText: 'Sí, eliminar',\r\n  confirmButtonColor: '#d33',\r\n  cancelButtonColor: '#3085d6',\r\n  cancelButtonText: 'Cancelar'\r\n}).then((result) => {\r\n  if (result.isConfirmed) {\r\n    this.ratingService.deleteRating(this.existingRating!.id).subscribe(() => {\r\n      this.existingRating = null;\r\n      this.loadRatings();\r\n      this.toastMessage = 'Reseña eliminada con éxito';\r\n      this.showToast(this.toastMessage, false);\r\n      this.loadPublication(this.publication.id.toString());\r\n      this.clearRating();\r\n    });\r\n  }});\r\n}\r\n\r\nclearRating() {\r\n  this.newRating.rating = 0;\r\n  this.newRating.comment = '';\r\n  this.hoveredRating = 0;\r\n}\r\n\r\nloadPublication(id: string) {\r\n  this.publicationService.getPublicationById(+id).subscribe({\r\n    next: (data: PublicationGet) => {\r\n      this.publication = data;\r\n      console.log('Publicación cargada:', this.publication);\r\n\r\n      const userId = this.userLoged.id;\r\n      const dto = {\r\n        publication_id: this.publication.id,\r\n        user_id: userId\r\n      };\r\n      this.favoriteService.isFavorite(dto).subscribe((result) => {\r\n        this.isFavorite = result;\r\n      });\r\n      this.loadRatings();\r\n      this.loadExistingRating();\r\n    },\r\n    error: (err) => {\r\n      console.error('Error al cargar la publicación:', err);\r\n      this.router.navigate(['/not-found']);\r\n    }\r\n  });\r\n}\r\n\r\n  getStarClass(rating: number, index: number): string {\r\n    if (index < Math.floor(rating)) {\r\n      return 'bi bi-star-fill text-primary'; \r\n    } else if (index < Math.ceil(rating)) {\r\n      return 'bi bi-star-half text-primary'; \r\n    } else {\r\n      return 'bi bi-star text-muted';\r\n    }\r\n  }\r\n\r\n  getInitials(name: string, surname: string): string {\r\n    const firstLetterName = name ? name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = surname ? surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n\r\n  formatDate(dateStr: string): string {\r\n    return dateStr ? dateStr.replace(/-/g, '/') : '';\r\n  }\r\n\r\n  getContactLink(contact: any): string {\r\n  const value = contact.contact_value;\r\n  switch (contact.contact_type.toLowerCase()) {\r\n    case 'whatsapp':\r\n      return `https://wa.me/${value}`;\r\n    case 'email':\r\n      return `mailto:${value}`;\r\n    case 'teléfono':\r\n      return `tel:${value}`;\r\n    case 'facebook':\r\n      return `${value}`;\r\n    case 'instagram':\r\n      return `https://instagram.com/${value}`;\r\n    default:\r\n      return '#';\r\n  }\r\n}\r\n\r\nisAdminOrModerator(): boolean {\r\n  const user = this.userLoged;\r\n  return user && (user.roles.includes('ADMIN') || user.roles.includes('MODERADOR'));\r\n}\r\n\r\nisAdmin(): boolean {\r\n  const user = this.userLoged;\r\n  return user && user.roles.includes('ADMIN');\r\n}\r\n\r\ngetContactIcon(type: string): string {\r\n  switch (type.toLowerCase()) {\r\n    case 'whatsapp':\r\n      return 'bi bi-whatsapp text-success';\r\n    case 'email':\r\n      return 'bi bi-envelope-fill text-primary';\r\n    case 'teléfono':\r\n      return 'bi bi-telephone-fill text-secondary';\r\n    case 'facebook':\r\n      return 'bi bi-facebook text-primary';\r\n    case 'instagram':\r\n      return 'bi bi-instagram text-danger';\r\n    default:\r\n      return 'bi bi-question-circle';\r\n  }}\r\n\r\n  \r\n\r\n  \r\n  getTagClass(tag: string): string {\r\n    const tagColorMap: { [key: string]: string } = {\r\n      'Nuevo': 'bg-success',\r\n      'Usado': 'bg-danger',\r\n      'Envío incluido': 'bg-primary',\r\n      'Retiro en mano': 'bg-secondary',\r\n      'Punto de encuentro': 'bg-info',\r\n      'Precio fijo': 'bg-dark',\r\n      'Precio negociable': 'bg-warning',\r\n    };\r\n  \r\n    return `badge rounded-pill ${tagColorMap[tag] || 'bg-secondary'}`;\r\n  }\r\n\r\n}\r\n"
        },
        "publications-list": {
          "publications-list.component.css": "\r\n.pagination .page-link {\r\n  background-color: transparent;\r\n  border: none;\r\n  color: #6c757d; \r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-size: 0.8rem;\r\n  border-radius: 0.50rem;\r\n}\r\n\r\n.pagination .page-link:hover {\r\n  text-decoration: underline;\r\n  color: var(--bs-primary); \r\n  background-color: transparent;\r\n}\r\n\r\n.pagination .page-item.active .page-link {\r\n  background-color: #fff;\r\n  border: 1px solid var(--bs-primary);\r\n  color: var(--bs-primary);\r\n  font-weight: 600;\r\n}\r\n\r\n.pagination .page-link:focus {\r\n  box-shadow: none;\r\n}\r\n\r\n.pagination .page-item.disabled .page-link {\r\n  color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n.list-group-item{\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n::ng-deep .categories-select .ng-value-container,\r\n::ng-deep .tags-select .ng-value-container {\r\n  height: 36px !important;\r\n  overflow: hidden !important;\r\n  white-space: nowrap !important;\r\n}\r\n\r\n::ng-deep .categories-select .ng-value-container .ng-value,\r\n::ng-deep .tags-select .ng-value-container .ng-value {\r\n  flex-shrink: 0 !important;\r\n  overflow: hidden !important;\r\n  text-overflow: ellipsis !important;\r\n}\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n",
          "publications-list.component.html": "<div class=\"fondo-gris py-4 min-vh-100\">\r\n  <div class=\"container\">\r\n    <!-- Título -->\r\n    <div class=\"row mb-2\">\r\n      <div class=\"col-12\">\r\n        <h2 class=\"fw-bold text-primary\">Administrar Publicaciones</h2>\r\n        <p class=\"text-muted\">Gestiona todas las publicaciones de la plataforma</p>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Filtros - Primera fila -->\r\n    <div\r\n      class=\"d-flex flex-wrap gap-3 bg-white p-3 shadow mb-2\"\r\n      [formGroup]=\"form\"\r\n      style=\"border-radius: 10px;\"\r\n    >\r\n      <!-- Buscador -->\r\n      <div class=\"position-relative flex-grow-1\" style=\"min-width: 300px; max-width: 500px;\">\r\n        <input\r\n          class=\"form-control pe-5\"\r\n          type=\"text\"\r\n          placeholder=\"Buscar por título o descripción...\"\r\n          formControlName=\"searchTerm\"\r\n          style=\"border-radius: 20px;\"\r\n        />\r\n        <span class=\"position-absolute top-50 end-0 translate-middle-y me-3 text-secondary\">\r\n          <span style=\"margin-right: 8px;\">|</span>\r\n          <i class=\"bi bi-search\"></i>\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Categorías -->           \r\n      <div class=\"d-flex align-items-center\">             \r\n        <small class=\"me-2\">Categorías</small>             \r\n        <ng-select               \r\n          [items]=\"categories\"               \r\n          bindLabel=\"description\"               \r\n          bindValue=\"description\"               \r\n          formControlName=\"categories\"               \r\n          placeholder=\"Todas\"               \r\n          class=\"ng-select-sm categories-select\"               \r\n          [multiple]=\"true\"               \r\n          [clearable]=\"true\"     \r\n          [searchable]=\"false\"          \r\n          style=\"width: 250px; min-width: 250px; max-width: 250px; height: 38px;\"             \r\n        >             \r\n        </ng-select>           \r\n      </div>          \r\n\r\n      <!-- Etiquetas -->              \r\n      <div class=\"d-flex align-items-center\" style=\"gap: 0.5rem;\">                  \r\n        <small>Etiquetas</small>                  \r\n        <ng-select                      \r\n          [items]=\"tags\"                      \r\n          bindLabel=\"description\"                      \r\n          bindValue=\"description\"                      \r\n          formControlName=\"tags\"                      \r\n          placeholder=\"Todas\"                      \r\n          [multiple]=\"true\"                      \r\n          [clearable]=\"true\"                      \r\n          [closeOnSelect]=\"false\"  \r\n          [searchable]=\"false\"         \r\n          class=\"ng-select-sm tags-select\"                      \r\n          style=\"width: 250px; min-width: 250px; max-width: 250px; height: 38px;\"                  \r\n        >                  \r\n        </ng-select>              \r\n      </div>       \r\n    </div>\r\n\r\n    <!-- Filtros - Segunda fila -->\r\n    <div\r\n      class=\"d-flex flex-wrap gap-3 bg-white p-3 shadow justify-content-between align-items-center mb-3\"\r\n      [formGroup]=\"form\"\r\n      style=\"border-radius: 10px;\"\r\n    >\r\n      <!-- Ubicación -->\r\n      <div class=\"d-flex align-items-center\">\r\n        <small class=\"me-2\">Ubicación</small>\r\n        <ng-select\r\n          [items]=\"locations\"\r\n          bindLabel=\"description\"\r\n          bindValue=\"description\"\r\n          formControlName=\"location\"\r\n          placeholder=\"Todas\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"true\"\r\n          [searchable]=\"false\"\r\n          style=\"width: 200px; min-width: 200px;\"\r\n        >\r\n        </ng-select>\r\n      </div>\r\n\r\n      <!-- Estado -->       \r\n      <div class=\"d-flex align-items-center\">         \r\n        <small class=\"me-2\">Estado</small>         \r\n        <ng-select           \r\n          [items]=\"[             \r\n            { label: 'Todas', value: null },             \r\n            { label: 'Activas', value: true },             \r\n            { label: 'Inactivas', value: false }           \r\n          ]\"           \r\n          bindLabel=\"label\"           \r\n          bindValue=\"value\"           \r\n          formControlName=\"active\"           \r\n          placeholder=\"Todas\"           \r\n          class=\"ng-select-sm\"           \r\n          [clearable]=\"false\" \r\n          [searchable]=\"false\"          \r\n          style=\"width: 150px; min-width: 150px; height: 38px;\"         \r\n        >         \r\n        </ng-select>       \r\n      </div>\r\n\r\n      <!-- Precio -->\r\n      <div class=\"d-flex align-items-center gap-2\">\r\n        <small>Precio</small>\r\n        <input\r\n          type=\"number\"\r\n          class=\"form-control form-control-sm\"\r\n          placeholder=\"Min\"\r\n          formControlName=\"minPrice\"\r\n          style=\"width: 100px; height: 38px;\"\r\n        />\r\n        <span>-</span>\r\n        <input\r\n          type=\"number\"\r\n          class=\"form-control form-control-sm\"\r\n          placeholder=\"Max\"\r\n          formControlName=\"maxPrice\"\r\n          style=\"width: 100px; height: 38px;\"\r\n        />\r\n      </div>\r\n\r\n      <!-- Ordenar por -->\r\n      <div class=\"d-flex align-items-center\">\r\n        <small class=\"me-2\">Ordenar por</small>\r\n        <ng-select\r\n          [items]=\"[\r\n            { label: 'Fecha', value: 'createdAt' },\r\n            { label: 'Precio', value: 'price' },\r\n            { label: 'Título', value: 'title' },\r\n            { label: 'Vistas', value: 'views' }\r\n          ]\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"sortBy\"\r\n          class=\"ng-select-sm me-2\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"width: 150px; min-width: 150px; height: 38px;\"\r\n        >\r\n        </ng-select>\r\n        <button \r\n          type=\"button\" \r\n          class=\"btn btn-outline-primary btn-sm\" \r\n          aria-label=\"Cambiar dirección de ordenamiento\"\r\n          title=\"Cambiar dirección de ordenamiento\" \r\n          (click)=\"toggleSortDirection()\"\r\n          style=\"height: 38px; width: 38px; display: flex; align-items: center; justify-content: center;\"\r\n        >\r\n          <i class=\"bi\" [ngClass]=\"sortDir === 'asc' ? 'bi-arrow-up' : 'bi-arrow-down'\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <!-- Limpiar filtros -->\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline-secondary btn-sm\"\r\n        (click)=\"clearFilters()\"\r\n        style=\"height: 38px; width: 38px; display: flex; align-items: center; justify-content: center;\"\r\n        aria-label=\"Limpiar filtros\"\r\n        title=\"Limpiar filtros\"\r\n      >\r\n        <i class=\"bi bi-trash\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Resultados -->\r\n    @if (publications.length === 0 && !isLoading) {\r\n      <div class=\"alert alert-secondary text-center\">\r\n        <i class=\"bi bi-inbox display-4 d-block mb-2\"></i>\r\n        <h5>No hay publicaciones para mostrar</h5>\r\n        <p class=\"mb-0\">Intenta ajustar los filtros de búsqueda</p>\r\n      </div>\r\n    } @else if (isLoading) {\r\n      <div class=\"text-center py-5\">\r\n        <div class=\"spinner-border text-primary\" role=\"status\">\r\n          <span class=\"visually-hidden\">Cargando...</span>\r\n        </div>\r\n        <p class=\"mt-2\">Cargando publicaciones...</p>\r\n      </div>\r\n    } @else {\r\n\r\n      <!-- Encabezado de tabla -->\r\n      <div class=\"row fw-bold text-secondary px-2 mb-2 d-none d-lg-flex\">\r\n        <div class=\"col-1 text-center\">Imagen</div>\r\n        <div class=\"col-3\">Título / Usuario</div>\r\n        <div class=\"col-2 text-center\">Precio / Vistas</div>\r\n        <div class=\"col-2 text-center\">Ubicación</div>\r\n        <div class=\"col-1 text-center\">Estado</div>\r\n        <div class=\"col-2 text-center\">Fecha</div>\r\n        <div class=\"col-1 text-center\">Acciones</div>\r\n      </div>\r\n\r\n      <div class=\"list-group\">\r\n        @for (pub of publications; track pub.id) {\r\n          <div\r\n            class=\"list-group-item mb-2 border rounded shadow-sm position-relative\"\r\n            [class.border-success]=\"pub.active\"\r\n            [class.border-danger]=\"!pub.active\"\r\n            (click)=\"viewPublication(pub.id)\"\r\n            style=\"cursor: pointer;\"\r\n          >\r\n            <div class=\"row align-items-center\">\r\n              <!-- Imagen -->\r\n              <div class=\"col-12 col-sm-3 col-lg-1 d-flex align-items-center justify-content-center mb-2 mb-sm-0\">\r\n                <img\r\n                  [src]=\"pub.images[0] || 'assets/Publications/0-notfound.jpg'\"\r\n                  [alt]=\"pub.title\"\r\n                  class=\"img-thumbnail\"\r\n                  style=\"width: 70px; height: 70px; object-fit: contain;\"\r\n                />\r\n              </div>\r\n              \r\n              <!-- Título y Usuario -->\r\n              <div class=\"col-12 col-sm-9 col-lg-3 mb-2 mb-lg-0\">\r\n                <h6 class=\"mb-1 fw-bold\">{{ pub.title | truncate:35 }}</h6>\r\n                <small class=\"text-muted d-block\" style=\"font-size: 0.75rem;\">\r\n                  {{ pub.description | truncate:40 }}\r\n                </small>\r\n                <small class=\"text-primary\">\r\n                  <i class=\"bi bi-person\"></i> {{ pub.user.name }} {{ pub.user.surname }}\r\n                </small>\r\n              </div>\r\n              \r\n              <!-- Precio y Vistas -->\r\n              <div class=\"col-6 col-lg-2 text-center\">\r\n                <h6 class=\"text-success mb-1\">${{ pub.price | decimalFormat }}</h6>\r\n                <small class=\"text-muted\">\r\n                  <i class=\"bi bi-eye\"></i> {{ pub.views }} vistas\r\n                </small>\r\n              </div>\r\n              \r\n              <!-- Ubicación -->\r\n              <div class=\"col-6 col-lg-2 text-center\">\r\n                <small class=\"badge bg-light text-dark\">\r\n                  <i class=\"bi bi-geo-alt\"></i> {{ pub.location }}\r\n                </small>\r\n              </div>\r\n              \r\n              <!-- Estado -->\r\n              <div class=\"col-6 col-lg-1 text-center\">\r\n                <span class=\"badge\" [class]=\"pub.active ? 'bg-success' : 'bg-danger'\">\r\n                  {{ pub.active ? 'Activa' : 'Inactiva' }}\r\n                </span>\r\n              </div>\r\n              \r\n              <!-- Fecha -->\r\n              <div class=\"col-6 col-lg-2 text-center\">\r\n                <small class=\"text-muted d-block\" style=\"font-size: 0.7rem;\">\r\n                  <i class=\"bi bi-calendar\"></i> {{ formatDate(pub.created_at) }}\r\n                </small>\r\n                <small class=\"text-muted\" style=\"font-size: 0.7rem;\">\r\n                  Hace {{ getDaysByDate(pub.created_at) }} días\r\n                </small>\r\n              </div>\r\n\r\n              <!-- Acciones -->\r\n              <div class=\"col-12 col-lg-1 text-center position-relative mt-2 mt-lg-0\">\r\n                <button\r\n                  class=\"btn btn-outline-primary btn-sm\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleDropdown(pub.id); $event.stopPropagation()\"\r\n                  aria-haspopup=\"true\"\r\n                  style=\"width: 35px; height: 35px; padding: 0; display: flex; align-items: center; justify-content: center;\"\r\n                  [attr.aria-expanded]=\"dropdownOpenId === pub.id\"\r\n                >\r\n                  <i class=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul\r\n                  class=\"dropdown-menu dropdown-menu-end\"\r\n                  [class.show]=\"dropdownOpenId === pub.id\"\r\n                  style=\"position: absolute; top: 100%; right: 0; margin-top: 0.125rem; z-index: 1050;\"\r\n                >\r\n                  <li>\r\n                    <button\r\n                      class=\"dropdown-item\"\r\n                      (click)=\"viewPublication(pub.id); closeDropdown(); $event.stopPropagation()\"\r\n                    >\r\n                      <i class=\"bi bi-eye me-2\"></i> Ver más\r\n                    </button>\r\n                  </li>\r\n                  <li>\r\n                    <button\r\n                      class=\"dropdown-item\"\r\n                      (click)=\"goToEditPublication(pub.id); closeDropdown(); $event.stopPropagation()\"\r\n                    >\r\n                      <i class=\"bi bi-pencil-square me-2\"></i> Editar\r\n                    </button>\r\n                  </li>\r\n                  @if (pub.active) {\r\n                    <li>\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"deactivatePublication(pub.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-x-circle text-danger me-2\"></i> Dar de baja\r\n                      </button>\r\n                    </li>\r\n                  } @else {\r\n                    <li>\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"activatePublication(pub.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-check-circle text-success me-2\"></i> Reactivar\r\n                      </button>\r\n                    </li>\r\n                  }\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n      </div>\r\n    }\r\n\r\n        <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n  <div>\r\n    <span class=\"text-muted\">Mostrando {{ publications.length }} de {{ totalItems || 0 }} resultados</span>\r\n  </div>\r\n  <div class=\"d-flex align-items-center\">\r\n    <small class=\"me-2\">Mostrar</small>\r\n    <ng-select\r\n      [items]=\"[\r\n        { label: '5', value: 5 },\r\n        { label: '10', value: 10 },\r\n        { label: '25', value: 25 },\r\n        { label: '50', value: 50 }\r\n      ]\"\r\n      bindLabel=\"label\"\r\n      bindValue=\"value\"\r\n      [ngModel]=\"size\"\r\n      (ngModelChange)=\"changePageSize($event)\"\r\n      class=\"ng-select-sm\"\r\n      [clearable]=\"false\"\r\n      [searchable]=\"false\"\r\n      style=\"width: auto; min-width: 60px;\"\r\n    >\r\n    </ng-select>\r\n    <small class=\"ms-2\">por página</small>\r\n  </div>\r\n</div>\r\n\r\n    <!-- Paginación -->\r\n    <nav *ngIf=\"totalPages > 0\" class=\"d-flex justify-content-center\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" [class.disabled]=\"page === 1\">\r\n          <button\r\n            class=\"page-link\"\r\n            (click)=\"page > 1 && changePage(page - 1)\"\r\n            [disabled]=\"page === 1\"\r\n          >\r\n            <i class=\"bi bi-chevron-left\"></i> Anterior\r\n          </button>\r\n        </li>\r\n\r\n        <li\r\n          class=\"page-item\"\r\n          *ngFor=\"let p of getPages()\"\r\n          [class.active]=\"p === page\"\r\n        >\r\n          <button class=\"page-link\" (click)=\"changePage(p)\">{{ p }}</button>\r\n        </li>\r\n\r\n        <li class=\"page-item\" [class.disabled]=\"page === totalPages\">\r\n          <button\r\n            class=\"page-link\"\r\n            (click)=\"page < totalPages && changePage(page + 1)\"\r\n            [disabled]=\"page === totalPages\"\r\n          >\r\n            Siguiente <i class=\"bi bi-chevron-right\"></i>\r\n          </button>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n</div>",
          "publications-list.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { PublicationsListComponent } from './publications-list.component';\r\n\r\ndescribe('PublicationsListComponent', () => {\r\n  let component: PublicationsListComponent;\r\n  let fixture: ComponentFixture<PublicationsListComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [PublicationsListComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(PublicationsListComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "publications-list.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport Swal from 'sweetalert2';\r\nimport { debounceTime, distinctUntilChanged, Subject, takeUntil } from 'rxjs';\r\nimport { SearchDto } from '../../models/SearchDto';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { Router } from '@angular/router';\r\nimport { PublicationGet } from '../../models/PublicationGet';\r\nimport { LocationGet } from '../../models/LocationGet';\r\nimport { CategoryGet } from '../../models/CategoryGet';\r\nimport { TagGet } from '../../models/TagGet';\r\n\r\n@Component({\r\n  selector: 'app-publications-list',\r\n  standalone: true,\r\n  imports: [FormsModule,CommonModule,ReactiveFormsModule,PipesModule,NgSelectModule],\r\n  templateUrl: './publications-list.component.html',\r\n  styleUrl: './publications-list.component.css'\r\n})\r\nexport class PublicationsListComponent implements OnInit,OnDestroy {\r\n  form: FormGroup;\r\n  publications: PublicationGet[] = [];\r\n  locations: LocationGet[] = [];\r\n  categories: CategoryGet[] = [];\r\n  tags: TagGet[] = [];\r\n  \r\n  totalItems = 0;\r\n  totalPages = 0;\r\n  page = 1;\r\n  size = 10;\r\n  \r\n  sortDir: 'desc' | 'asc' = 'desc';\r\n  \r\n  dropdownOpenId: number | null = null;\r\n  isLoading = false;\r\n  \r\n  private destroy$ = new Subject<void>();\r\n  \r\n  private readonly publicationService = inject(PublicationsService);\r\n  private readonly utilsService = inject(UtilsService);\r\n  private readonly router = inject(Router);\r\n  private readonly fb = inject(FormBuilder);\r\n\r\n  Math = Math;\r\n\r\n  constructor() {\r\n    this.form = this.fb.group({\r\n      searchTerm: [''],\r\n      location: null,\r\n      categories: [[]],\r\n      tags: [[]],\r\n      minPrice: [''],\r\n      maxPrice: [''],\r\n      sortBy: ['createdAt'],\r\n      sortDir: ['desc'],\r\n      active: [null] \r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadInitialData();\r\n    this.setupFormSubscriptions();\r\n    this.loadPublications();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private loadInitialData(): void {\r\n    this.utilsService.getLocations()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (locations) => this.locations = locations,\r\n        error: (error) => console.error('Error loading locations:', error)\r\n      });\r\n\r\n    this.publicationService.getCategories()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (categories) => this.categories = categories,\r\n        error: (error) => console.error('Error loading categories:', error)\r\n      });\r\n\r\n    this.utilsService.getTags()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (tags) => this.tags = tags,\r\n        error: (error) => console.error('Error loading tags:', error)\r\n      });\r\n  }\r\n\r\n  private setupFormSubscriptions(): void {\r\n    this.form.get('searchTerm')?.valueChanges\r\n      .pipe(\r\n        debounceTime(500),\r\n        distinctUntilChanged(),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe((searchTerm) => {\r\n        if (!searchTerm || searchTerm.trim().length >= 3) {\r\n          this.page = 1;\r\n          this.loadPublications();\r\n        }\r\n      });\r\n\r\n    this.form.valueChanges\r\n      .pipe(\r\n        debounceTime(300),\r\n        takeUntil(this.destroy$)\r\n      )\r\n      .subscribe((values) => {\r\n        if (!values.searchTerm || values.searchTerm.trim().length >= 3 || values.searchTerm.trim().length === 0) {\r\n          this.page = 1;\r\n          this.loadPublications();\r\n        }\r\n      });\r\n  }\r\n\r\n  loadPublications(): void {\r\n    this.isLoading = true;\r\n    \r\n\r\n    const formValues = this.form.value;\r\n    const searchDto: SearchDto = {\r\n      searchTerm: formValues.searchTerm?.trim() || undefined,\r\n      location: formValues.location || undefined,\r\n      categories: formValues.categories?.length > 0 ? formValues.categories : undefined,\r\n      tags: formValues.tags?.length > 0 ? formValues.tags : undefined,\r\n      minPrice: formValues.minPrice ? Number(formValues.minPrice) : undefined,\r\n      maxPrice: formValues.maxPrice ? Number(formValues.maxPrice) : undefined,\r\n      sortBy: formValues.sortBy || 'createdAt',\r\n      sortDir: this.sortDir,\r\n      page: this.page - 1, \r\n      size: this.size,\r\n      active: formValues.active !== null ? formValues.active : undefined \r\n    };\r\n\r\n    this.publicationService.getFilteredPublications(searchDto)\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe({\r\n        next: (response) => {\r\n          this.publications = response.content;\r\n          this.totalItems = response.totalElements;\r\n          this.totalPages = response.totalPages;\r\n          this.isLoading = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading publications:', error);\r\n          this.isLoading = false;\r\n          this.showErrorAlert('Error al cargar las publicaciones');\r\n        }\r\n      });\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.form.reset({\r\n      searchTerm: '',\r\n      location: null,\r\n      categories: [],\r\n      tags: [],\r\n      minPrice: '',\r\n      maxPrice: '',\r\n      sortBy: 'createdAt',\r\n      sortDir: 'desc',\r\n      active: null\r\n    });\r\n    this.sortDir = 'desc';\r\n    this.size = 10;\r\n    this.page = 1;\r\n    this.loadPublications();\r\n  }\r\n\r\n  toggleSortDirection(): void {\r\n    this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\r\n    this.form.get('sortDir')?.setValue(this.sortDir);\r\n    this.loadPublications();\r\n  }\r\n\r\n  changePage(newPage: number): void {\r\n    if (newPage >= 1 && newPage <= this.totalPages) {\r\n      this.page = newPage;\r\n      this.loadPublications();\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }\r\n  }\r\n\r\n\r\n  getPages(): number[] {\r\n    const maxPagesToShow = 5;\r\n    let startPage = Math.max(1, this.page - Math.floor(maxPagesToShow / 2));\r\n    let endPage = startPage + maxPagesToShow - 1;\r\n\r\n    if (endPage > this.totalPages) {\r\n      endPage = this.totalPages;\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n\r\n  formatDate(dateStr: string): string {\r\n    return dateStr ? dateStr.replace(/-/g, '/') : '';\r\n  }\r\n\r\n  \r\n  changePageSize(newSize: number) {\r\n    this.size = newSize;\r\n    this.page = 1;\r\n    this.loadPublications();\r\n  }\r\n\r\n  \r\ngetDaysByDate(dateStr: string): number {\r\n  if (!dateStr) return NaN;\r\n\r\n  const [day, month, year] = dateStr.split('-').map(Number);\r\n  if (!day || !month || !year) return NaN;\r\n\r\n  const date = new Date(year, month - 1, day);\r\n  const today = new Date();\r\n  \r\n  date.setHours(0, 0, 0, 0);\r\n  today.setHours(0, 0, 0, 0);\r\n\r\n  const diffTime = today.getTime() - date.getTime();\r\n\r\n  return diffTime <= 0 ? 0 : Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n}\r\n\r\n  viewPublication(id: number): void {\r\n    this.router.navigate(['/publication', id]).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  viewUserProfile(userId: number): void {\r\n    this.router.navigate(['/profile', userId]).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  toggleDropdown(pubId: number): void {\r\n    if (this.dropdownOpenId === pubId) {\r\n      this.dropdownOpenId = null;\r\n    } else {\r\n      this.dropdownOpenId = pubId;\r\n    }\r\n  }\r\n\r\n  closeDropdown(): void {\r\n    this.dropdownOpenId = null;\r\n  }\r\n  activatePublication(pubId: number): void {\r\n    Swal.fire({\r\n      title: '¿Activar publicación?',\r\n      text: 'Esta acción hará que la publicación sea visible para todos los usuarios.',\r\n      icon: 'question',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#28a745',\r\n      cancelButtonColor: '#6c757d',\r\n      confirmButtonText: 'Sí, activar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.publicationService.reactivatePublication(pubId)\r\n          .pipe(takeUntil(this.destroy$))\r\n          .subscribe({\r\n            next: () => {\r\n              this.showSuccessAlert('Publicación activada correctamente');\r\n              this.loadPublications();\r\n            },\r\n            error: (error) => {\r\n              console.error('Error activating publication:', error);\r\n              this.showErrorAlert('No se pudo activar la publicación');\r\n            }\r\n          });\r\n      }\r\n    });\r\n  }\r\n\r\n  deactivatePublication(pubId: number): void {\r\n    Swal.fire({\r\n      title: '¿Desactivar publicación?',\r\n      text: 'Esta acción ocultará la publicación de las búsquedas públicas.',\r\n      icon: 'warning',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#dc3545',\r\n      cancelButtonColor: '#6c757d',\r\n      confirmButtonText: 'Sí, desactivar',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n      this.publicationService.deletePublication(pubId)\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe({\r\n        next: () => {\r\n          this.showSuccessAlert('Publicación desactivada correctamente');\r\n          this.loadPublications();\r\n        },\r\n        error: (error) => {\r\n          console.error('Error deactivating publication:', error);\r\n          this.showErrorAlert('No se pudo desactivar la publicación');\r\n        }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  goToEditPublication(id: number): void {\r\n    this.publicationService.addView(id).subscribe({\r\n      next: () => {\r\n        this.router.navigate(['/publication', id, 'edit']).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n\r\n  private showSuccessAlert(message: string): void {\r\n    Swal.fire({\r\n      title: 'Éxito',\r\n      text: message,\r\n      icon: 'success',\r\n      timer: 2000,\r\n      showConfirmButton: false\r\n    });\r\n  }\r\n\r\n  private showErrorAlert(message: string): void {\r\n    Swal.fire({\r\n      title: 'Error',\r\n      text: message,\r\n      icon: 'error',\r\n      timer: 3000,\r\n      showConfirmButton: false\r\n    });\r\n  }\r\n}\r\n"
        },
        "register": {
          "register.component.css": "/* Fuente global */\r\n* {\r\n    font-family: 'Poppins', sans-serif;\r\n    \r\n  }\r\n  \r\n  /* Estructura general */\r\n  .container-fluid {\r\n    display: flex;\r\n    justify-content: center;\r\n    height: 100vh;\r\n    padding: 0;\r\n    background-color: #f8f9fa;\r\n  }\r\n  \r\n  /* Formulario de registro */\r\n  .form-register {\r\n    max-width: 600px;\r\n    width: 100%;\r\n    background-color: white;\r\n    padding: 2rem;\r\n    border-radius: 0.5rem;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  /* Estilos para los inputs enfocados */\r\n  .form-register input:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(30, 60, 114, 0.25);\r\n    border-color: #000000;\r\n  }\r\n  \r\n  /* Botones */\r\n  button {\r\n    margin-bottom: 0.5rem;\r\n  }\r\n\r\n\r\n  ",
          "register.component.html": "<div class=\"container-fluid d-flex justify-content-center align-items-center\">\r\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"form-register row\">\r\n    <h3 class=\"text-center mb-4 w-100\">Crear Cuenta</h3>\r\n    \r\n    <!-- Nombre -->\r\n    <div class=\"col-md-6 mb-3\">\r\n      <label for=\"firstName\" class=\"form-label\">Nombre</label>\r\n      <input \r\n        type=\"text\" \r\n        id=\"firstName\" \r\n        formControlName=\"firstName\" \r\n        class=\"form-control\" \r\n        [ngClass]=\"onValidate('firstName')\" \r\n      />\r\n      <div class=\"invalid-feedback\">{{showError('firstName')}}</div>\r\n    </div>\r\n\r\n    <!-- Apellido -->\r\n    <div class=\"col-md-6 mb-3\">\r\n      <label for=\"lastName\" class=\"form-label\">Apellido</label>\r\n      <input \r\n        type=\"text\" \r\n        id=\"lastName\" \r\n        formControlName=\"lastName\" \r\n        class=\"form-control\" \r\n        [ngClass]=\"onValidate('lastName')\"\r\n      />\r\n      <div class=\"invalid-feedback\">{{showError('lastName')}}</div>\r\n    </div>\r\n\r\n    <!-- Email -->\r\n    <div class=\"col-md-6 mb-3\">\r\n      <label for=\"email\" class=\"form-label\">E-mail</label>\r\n      <input \r\n        type=\"email\" \r\n        id=\"email\" \r\n        formControlName=\"email\" \r\n        class=\"form-control\" \r\n        [ngClass]=\"onValidate('email')\" \r\n      />\r\n      <div class=\"invalid-feedback\">{{showError('email')}}</div>\r\n    </div>\r\n\r\n    <!-- Username -->\r\n    <div class=\"col-md-6 mb-3\">\r\n      <label for=\"username\" class=\"form-label\">Usuario</label>\r\n      <input \r\n        type=\"text\" \r\n        id=\"username\" \r\n        formControlName=\"username\" \r\n        class=\"form-control\" \r\n        [ngClass]=\"onValidate('username')\" \r\n      />\r\n      <div class=\"invalid-feedback\">{{showError('username')}}</div>\r\n    </div>\r\n\r\n    <!-- Localidad -->\r\n    <div class=\"col-12 mb-3\">\r\n      <label for=\"locationId\" class=\"form-label\">Localidad</label>\r\n      <ng-select\r\n        formControlName=\"locationId\"\r\n        id=\"locationId\"\r\n        placeholder=\"Selecciona tu localidad\"\r\n        bindLabel=\"description\"\r\n        bindValue=\"id\"\r\n        [items]=\"locations\"\r\n        [loading]=\"loadingLocations\"\r\n        [clearable]=\"false\"\r\n        [searchable]=\"true\"\r\n        [ngClass]=\"onValidate('locationId')\"\r\n        class=\"custom-ng-select\"\r\n      >\r\n        <ng-option *ngFor=\"let location of locations\" [value]=\"location.id\">\r\n          {{location.description}}\r\n        </ng-option>\r\n      </ng-select>\r\n      <div class=\"invalid-feedback d-block\" *ngIf=\"form.get('locationId')?.invalid && (form.get('locationId')?.dirty || form.get('locationId')?.touched)\">\r\n        {{showError('locationId')}}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Password -->\r\n    <div class=\"col-md-6 mb-3\">\r\n      <label for=\"password\" class=\"form-label\">Contraseña</label>\r\n      <input \r\n        type=\"password\" \r\n        id=\"password\" \r\n        formControlName=\"password\" \r\n        class=\"form-control\" \r\n        [ngClass]=\"onValidate('password')\" \r\n      />\r\n      <div class=\"invalid-feedback\">{{showError('password')}}</div>\r\n    </div>\r\n\r\n    <!-- Confirmar Password -->\r\n    <div class=\"col-md-6 mb-3\">\r\n      <label for=\"confirmPassword\" class=\"form-label\">Confirmar Contraseña</label>\r\n      <input \r\n        type=\"password\" \r\n        id=\"confirmPassword\" \r\n        formControlName=\"confirmPassword\" \r\n        class=\"form-control\" \r\n        [ngClass]=\"onValidate('confirmPassword')\" \r\n      />\r\n      <div class=\"invalid-feedback\">{{showError('confirmPassword')}}</div>\r\n    </div>\r\n\r\n    <!-- Términos y Condiciones -->\r\n    <div class=\"col-12 mb-3\">\r\n      <div class=\"form-check\">\r\n        <input\r\n          type=\"checkbox\"\r\n          id=\"acceptTerms\"\r\n          formControlName=\"acceptTerms\"\r\n          class=\"form-check-input\"\r\n          [ngClass]=\"onValidate('acceptTerms')\"\r\n        />\r\n        <label for=\"acceptTerms\" class=\"form-check-label\">\r\n          Acepto los \r\n          <button\r\n            type=\"button\"\r\n            class=\"btn btn-link p-0 text-decoration-underline\"\r\n            (click)=\"showTermsAndConditions()\"\r\n            style=\"vertical-align: baseline; font-size: inherit;\"\r\n          >\r\n            términos y condiciones\r\n          </button>\r\n        </label>\r\n      </div>\r\n      <div class=\"invalid-feedback d-block\" *ngIf=\"form.get('acceptTerms')?.invalid && (form.get('acceptTerms')?.dirty || form.get('acceptTerms')?.touched)\">\r\n        {{showError('acceptTerms')}}\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Botones -->\r\n    <div class=\"col-12 mb\">\r\n      <button type=\"submit\" class=\"btn btn-primary w-100\" [disabled]=\"form.invalid\">\r\n        Registrar\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"col-12\">\r\n      <button type=\"button\" class=\"btn btn-light w-100 mt-2\" [routerLink]=\"'/login'\">\r\n        ¿Ya tienes cuenta? Inicia sesión\r\n      </button>\r\n    </div>\r\n  </form>\r\n</div>",
          "register.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { RegisterComponent } from './register.component';\r\n\r\ndescribe('RegisterComponent', () => {\r\n  let component: RegisterComponent;\r\n  let fixture: ComponentFixture<RegisterComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [RegisterComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(RegisterComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "register.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { ValidatorService } from '../../services/validator.service';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { UserPost } from '../../models/UserPost';\r\nimport { LocationGet } from '../../models/LocationGet';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule, ReactiveFormsModule, RouterModule, NgSelectModule],\r\n  templateUrl: './register.component.html',\r\n  styleUrl: './register.component.css'\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n\r\n    private readonly router = inject(Router);\r\n    private readonly validatorService = inject(ValidatorService);\r\n    private readonly userService = inject(UsersService);\r\n    private readonly utilsService = inject(UtilsService);\r\n    private readonly fb = inject(FormBuilder);\r\n\r\n    locations: LocationGet[] = [];\r\n    loadingLocations = false;\r\n\r\n    form: FormGroup = this.fb.group({\r\n      firstName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(15)],],\r\n      lastName: ['', [Validators.required, Validators.minLength(2), Validators.maxLength(15)]],\r\n      email: ['', \r\n        [Validators.required, Validators.email], \r\n        [this.validatorService.validateUniqueEmail()]\r\n      ],\r\n      username: ['', \r\n        [Validators.required, Validators.minLength(5)], \r\n        [this.validatorService.validateUniqueUsername()]\r\n      ],\r\n      locationId: [null, [Validators.required]],\r\n      password: ['', [Validators.required, Validators.minLength(8),Validators.maxLength(30)]],\r\n      confirmPassword: ['', [Validators.required]],\r\n      acceptTerms: [false, [Validators.requiredTrue]]\r\n    }, {\r\n      validators: [this.validatorService.matchFields('password', 'confirmPassword')]\r\n    });\r\n\r\n    ngOnInit() {\r\n      this.loadLocations();\r\n    }\r\n\r\n    loadLocations() {\r\n      this.loadingLocations = true;\r\n      this.utilsService.getLocations().subscribe({\r\n        next: (locations) => {\r\n          this.locations = locations;\r\n          this.loadingLocations = false;\r\n        },\r\n        error: (error) => {\r\n          console.error('Error loading locations:', error);\r\n          this.loadingLocations = false;\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: 'No se pudieron cargar las localidades. Intente nuevamente.',\r\n            icon: 'error',\r\n            timer: 2000,\r\n            showConfirmButton: false\r\n          });\r\n        }\r\n      });\r\n    }\r\n\r\n    onSubmit() {\r\n      if (this.form.invalid) {\r\n        this.form.markAllAsTouched();\r\n        return;\r\n      }\r\n  \r\n        const user: UserPost = {\r\n        name: this.form.value.firstName,\r\n        surname: this.form.value.lastName,\r\n        email: this.form.value.email,\r\n        username: this.form.value.username,\r\n        location_id: this.form.value.locationId,\r\n        roles: [2],\r\n        password: this.form.value.password\r\n      };\r\n  \r\n      this.userService.postUser(user).subscribe({\r\n        next: () => {\r\n          Swal.fire({\r\n            title: 'Registro exitoso',\r\n            text: 'Usuario registrado correctamente.',\r\n            icon: 'success',\r\n            timer: 1500,\r\n            showConfirmButton: false\r\n          });\r\n          this.router.navigate(['/login']);\r\n        },\r\n        error: (error) => {\r\n          Swal.fire({\r\n            title: 'Error',\r\n            text: 'No se pudo registrar el usuario. Intente nuevamente.',\r\n            icon: 'error',\r\n            timer: 1500,\r\n            showConfirmButton: false\r\n          });\r\n        }\r\n      });\r\n    }\r\n  \r\n    showError(controlName: string): string | null {\r\n      const control = this.form.get(controlName);\r\n    \r\n      if (control && control.touched && control.errors) {\r\n        const [errorKey] = Object.keys(control.errors);\r\n    \r\n        switch (errorKey) {\r\n          case 'required':\r\n            return 'Este campo no puede estar vacío.';\r\n          case 'email':\r\n            return 'Formato de correo electrónico inválido.';\r\n          case 'minlength':\r\n            return `Debe tener al menos ${control.errors['minlength'].requiredLength} caracteres.`;\r\n          case 'maxlength':\r\n            return `Debe tener como máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n          case 'min':\r\n            return `El valor es menor que el mínimo permitido (${control.errors['min'].min}).`;\r\n          case 'pattern':\r\n            return 'El formato ingresado no es válido.';\r\n          case 'requiredTrue':\r\n            return 'Debe aceptar los términos y condiciones para continuar.';\r\n          case 'usernameTaken':\r\n            return 'Este nombre de usuario ya está en uso.';\r\n          case 'emailTaken':\r\n            return 'Este correo electrónico ya está registrado.';\r\n          case 'dniTaken':\r\n            return 'Este DNI ya está en uso.';\r\n          case 'notMatch':\r\n            return 'Las contraseñas no coinciden.';\r\n          case 'serverError':\r\n            return 'Error de servidor. Intente nuevamente más tarde.';\r\n          default:\r\n            return 'Error no identificado en el campo.';\r\n        }\r\n      }\r\n    \r\n      return null;\r\n    }\r\n\r\n    onValidate(controlName: string) {\r\n      const control = this.form.get(controlName);\r\n      return {\r\n        'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n        'is-valid': control?.valid\r\n      }\r\n    }\r\n\r\n    showTermsAndConditions() {\r\n      Swal.fire({\r\n        title: 'Términos y Condiciones - Oncativo Vende',\r\n        html: `\r\n          <div style=\"text-align: justify; max-height: 450px; overflow-y: auto; padding: 10px; font-size: 14px; line-height: 1.4;\">\r\n            <p><strong>Bienvenido a Oncativo Vende</strong> proporcionado por <strong>Oncativo Vende S.A.</strong> Nos complace ofrecerle acceso al Servicio, sujeto a estos términos y condiciones y a la Política de Privacidad correspondiente.</p>\r\n            \r\n            <h6><strong>Aceptación de Términos</strong></h6>\r\n            <p>Al acceder y utilizar el Servicio, usted expresa su consentimiento y acuerdo con los Términos de Servicio y la Política de Privacidad. Si no está de acuerdo, no utilice el Servicio.</p>\r\n            \r\n            <h6><strong>Descripción del Servicio</strong></h6>\r\n            <p>Oncativo Vende es una plataforma digital que permite a los usuarios suscribirse para publicar productos o servicios para que otros usuarios interesados puedan contactarlos. No intervenimos en las operaciones comerciales ni en los términos pactados entre las partes. Solo facilitamos el contacto entre oferentes y potenciales compradores.</p>\r\n            \r\n            <h6><strong>Requisitos de Usuario</strong></h6>\r\n            <p>Al suscribirse, el usuario declara ser mayor de edad y tener capacidad legal para contratar. El acceso al Servicio está condicionado al cumplimiento de estos Términos. Nos reservamos el derecho de rechazar o cancelar suscripciones por incumplimientos.</p>\r\n            \r\n            <h6><strong>Derechos de la Empresa</strong></h6>\r\n            <p>Oncativo Vende S.A. se reserva todos los derechos no expresamente otorgados en este documento. Esto incluye la posibilidad de modificar, suspender o eliminar funciones, así como cancelar o suspender cuentas sin previo aviso en caso de incumplimiento.</p>\r\n            \r\n            <h6><strong>Funcionamiento del Servicio</strong></h6>\r\n            <p>El Servicio permite publicar avisos clasificados mediante una suscripción mensual, semestral o anual. Los usuarios interesados contactarán directamente con el anunciante. La Compañía no garantiza que se concreten las operaciones ni se responsabiliza por la calidad, estado, cumplimiento o veracidad de los avisos.</p>\r\n            \r\n            <h6><strong>Transacciones</strong></h6>\r\n            <p>No se gestionan pagos ni entregas entre las partes. Toda transacción es responsabilidad exclusiva del vendedor y del comprador.</p>\r\n            \r\n            <h6><strong>Seguridad de Cuenta</strong></h6>\r\n            <p>El acceso es mediante una clave personal, única e intransferible. Oncativo Vende nunca pedirá los datos completos de la cuenta por email o mensaje. El uso indebido de las credenciales es responsabilidad del usuario.</p>\r\n            \r\n            <h6><strong>Cancelación</strong></h6>\r\n            <p>El usuario puede cancelar su suscripción en cualquier momento sin penalidades. En caso de incumplimiento, Oncativo Vende S.A. puede dar de baja la cuenta.</p>\r\n            \r\n            <h6><strong>Propiedad Intelectual</strong></h6>\r\n            <p>El contenido, diseño y desarrollo del software está protegido por la Ley 11.723 de Propiedad Intelectual. Está prohibida su reproducción o modificación sin autorización expresa.</p>\r\n            \r\n            <h6><strong>Protección de Datos</strong></h6>\r\n            <p>El tratamiento de datos personales se realiza según la Política de Privacidad. La información se protege con medidas de seguridad adecuadas y no se comparte con terceros sin consentimiento, salvo requerimiento legal.</p>\r\n          </div>\r\n        `,\r\n        width: '700px',\r\n        showCancelButton: true,\r\n        cancelButtonText: 'Cancelar',\r\n        confirmButtonText: 'Acepto los Términos',\r\n        confirmButtonColor: '#007bff',\r\n        cancelButtonColor: '#6c757d',\r\n        showClass: {\r\n          popup: 'animate__animated animate__fadeInDown'\r\n        },\r\n        hideClass: {\r\n          popup: 'animate__animated animate__fadeOutUp'\r\n        }\r\n      }).then((result) => {\r\n        if (result.isConfirmed) {\r\n          this.form.patchValue({ acceptTerms: true });\r\n        }\r\n      });\r\n    }\r\n}"
        },
        "report-modal": {
          "report-modal.component.css": "\r\ntextarea.is-invalid {\r\n  border-color: #dc3545;\r\n}\r\n\r\ntextarea.is-valid {\r\n  border-color: #198754;\r\n}",
          "report-modal.component.html": "<div *ngIf=\"modalVisible\" class=\"modal fade show d-block\" tabindex=\"-1\" aria-modal=\"true\" role=\"dialog\"\r\n  style=\"background-color: rgba(0, 0, 0, 0.5);\">\r\n  <div class=\"modal-dialog modal-dialog-centered\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Reportar publicación</h5>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"onClose()\" aria-label=\"Cerrar\"></button>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          <div class=\"mb-3\">\r\n            <label for=\"reason\" class=\"form-label\">Motivo</label>\r\n            <textarea id=\"reason\" rows=\"4\" formControlName=\"reason\" class=\"form-control\"\r\n              [ngClass]=\"onValidate()\"></textarea>\r\n            <div class=\"invalid-feedback\">{{ showError() }}</div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">Cancelar</button>\r\n            <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"form.invalid\">Enviar reporte</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n",
          "report-modal.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ReportModalComponent } from './report-modal.component';\r\n\r\ndescribe('ReportModalComponent', () => {\r\n  let component: ReportModalComponent;\r\n  let fixture: ComponentFixture<ReportModalComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ReportModalComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ReportModalComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "report-modal.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Component, EventEmitter, inject, Input, Output } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport Swal from 'sweetalert2';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { ReportPost } from '../../models/ReportPost';\r\n\r\n@Component({\r\n  selector: 'app-report-modal',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './report-modal.component.html',\r\n  styleUrl: './report-modal.component.css'\r\n})\r\nexport class ReportModalComponent {\r\n  @Input() reportedByUserId: number = 0;\r\n  @Input() publicationId: number = 0;\r\n  @Output() close = new EventEmitter<void>();\r\n\r\n  modalVisible = true;\r\n  private readonly utilsService = inject(UtilsService);\r\n\r\n  form = new FormGroup({\r\n    reason: new FormControl('', [Validators.required, Validators.minLength(5), Validators.maxLength(250)])\r\n  });\r\n\r\n  onClose() {\r\n    this.modalVisible = false;\r\n    this.close.emit();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    const payload = {\r\n      reported_by_user_id: this.reportedByUserId,\r\n      publication_id: this.publicationId,\r\n      reason: this.form.value.reason\r\n    };\r\n\r\n    // Aquí cambia la URL por la de tu API\r\n    this.utilsService.postReport(new ReportPost(this.reportedByUserId, this.publicationId, this.form.value.reason || '')).subscribe({\r\n      next: () => {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Reporte enviado',\r\n          text: 'Gracias por tu reporte, será revisado.',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n        this.onClose();\r\n      },\r\n      error: () => {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'No se pudo enviar el reporte, intenta más tarde.',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  onValidate() {\r\n    const control = this.form.get('reason');\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid\r\n    };\r\n  }\r\n\r\n  showError() {\r\n    const control = this.form.get('reason');\r\n    if (control && control.errors) {\r\n      if (control.errors['required']) return 'El motivo es obligatorio.';\r\n      if (control.errors['minlength']) return `El motivo debe tener al menos ${control.errors['minlength'].requiredLength} caracteres.`;\r\n      if (control.errors['maxlength']) return `El motivo debe tener máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n}\r\n"
        },
        "reports-list": {
          "reports-list.component.css": "\r\n.pagination .page-link {\r\n  background-color: transparent;\r\n  border: none;\r\n  color: #6c757d; \r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-size: 0.8rem;\r\n  border-radius: 0.50rem;\r\n}\r\n\r\n.pagination .page-link:hover {\r\n  text-decoration: underline;\r\n  color: var(--bs-primary); \r\n  background-color: transparent;\r\n}\r\n\r\n.pagination .page-item.active .page-link {\r\n  background-color: #fff;\r\n  border: 1px solid var(--bs-primary);\r\n  color: var(--bs-primary);\r\n  font-weight: 600;\r\n}\r\n\r\n.pagination .page-link:focus {\r\n  box-shadow: none;\r\n}\r\n\r\n.pagination .page-item.disabled .page-link {\r\n  color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n.list-group-item{\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.publication-title {\r\n  font-size: 0.9rem;\r\n  max-width: 150px;\r\n  cursor: pointer;\r\n  color: inherit;\r\n  text-decoration: none;\r\n}\r\n\r\n.publication-title:hover {\r\n  text-decoration: underline;\r\n  text-decoration-color: var(--bs-primary);\r\n  color: var(--bs-primary);\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n",
          "reports-list.component.html": "<div class=\"fondo-gris py-4 min-vh-100\">\r\n  <div class=\"container\">\r\n    <!-- Título -->\r\n    <div class=\"row mb-2\">\r\n      <div class=\"col-12\">\r\n        <h2 class=\"fw-bold text-primary\">Administrar Reportes</h2>\r\n        <p class=\"text-muted\">Gestiona todos los reportes de la plataforma</p>\r\n      </div>\r\n    </div>\r\n    <!-- Filtros -->\r\n    <div\r\n      class=\"d-flex flex-wrap gap-2 bg-white p-3 shadow justify-content-between align-items-center mb-3\"\r\n      [formGroup]=\"form\"\r\n      style=\"border-radius: 10px;\"\r\n    >\r\n      <!-- Búsqueda -->\r\n      <div class=\"position-relative flex-grow-1\" style=\"min-width: 260px; max-width: 350px;\">\r\n        <input\r\n          class=\"form-control pe-5 form-control-sm\"\r\n          type=\"text\"\r\n          placeholder=\"Buscar por razón, usuario o publicación...\"\r\n          formControlName=\"searchTerm\"\r\n          style=\"border-radius: 20px;\"\r\n        />\r\n        <span class=\"position-absolute top-50 end-0 translate-middle-y me-3 text-secondary\">\r\n          <span style=\"margin-right: 8px;\">|</span>\r\n          <i class=\"bi bi-search\"></i>\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Estado -->\r\n      <div class=\"d-flex align-items-center\" style=\"gap: 5px;\">\r\n        <small class=\"me-1\">Estado</small>\r\n        <ng-select\r\n          [items]=\"statusOptions\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"status\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"min-width: 120px; font-size: 0.8rem;\"\r\n        ></ng-select>\r\n      </div>\r\n\r\n      <!-- Ordenar por -->\r\n      <div class=\"d-flex align-items-center\" style=\"gap: 5px;\">\r\n        <small class=\"me-1\">Ordenar por</small>\r\n        <ng-select\r\n          [items]=\"sortOptions\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          [ngModel]=\"'created_at'\"\r\n          formControlName=\"sortBy\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"min-width: 110px; font-size: 0.8rem;\"\r\n        ></ng-select>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-outline-primary btn-sm\"\r\n          title=\"Ordenar ascendente o descendente\"\r\n          (click)=\"toggleSortDirection()\"\r\n        >\r\n          <i class=\"bi\" [ngClass]=\"sortDir === 'desc' ? 'bi-arrow-up' : 'bi-arrow-down'\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline-secondary btn-sm\"\r\n        (click)=\"clearFilters()\"\r\n        title=\"Limpiar filtros\"\r\n        style=\"width: 35px; height: 35px; display: flex; align-items: center; justify-content: center;\"\r\n      >\r\n        <i class=\"bi bi-trash\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    <div *ngIf=\"reports.length === 0\" class=\"alert alert-secondary\">No hay reportes para mostrar.</div>\r\n    \r\n    <div *ngIf=\"reports.length > 0\">\r\n      <!-- Encabezados -->\r\n      <div class=\"row fw-bold text-secondary mb-2 d-none d-md-flex align-items-center\">\r\n        <div class=\"col-md-3 text-start\">Reporte de:</div>\r\n        <div class=\"col-md-3 text-center\">Publicación Reportada</div>\r\n        <div class=\"col-md-2 text-center\">Razón</div>\r\n        <div class=\"col-md-2 text-center\">Estado</div>\r\n        <div class=\"col-md-1 text-center\">Fecha</div>\r\n        <div class=\"col-md-1 text-center\">Acciones</div>\r\n      </div>\r\n\r\n      <!-- Lista de reportes -->\r\n      <div class=\"list-group\">\r\n        <div\r\n          *ngFor=\"let report of reports; trackBy: trackByReportId\"\r\n          class=\"list-group-item mb-2 border rounded shadow-sm\"\r\n          style=\"cursor: pointer;\"\r\n          (click)=\"viewReportDetails(report); closeDropdown(); $event.stopPropagation()\"\r\n        >\r\n            <div class=\"row align-items-center\">\r\n              <!-- Usuario Reportador -->\r\n              <div class=\"col-12 col-md-3\">\r\n                <div class=\"d-flex align-items-center mb-2 mb-md-0\">\r\n                  <ng-container *ngIf=\"report.reporter.avatar_url && report.reporter.avatar_url.trim() !== ''; else showReporterInitials\">\r\n                    <img\r\n                      [src]=\"report.reporter.avatar_url\"\r\n                      [alt]=\"report.reporter.name + ' ' + report.reporter.surname\"\r\n                      class=\"rounded-circle me-2\"\r\n                      style=\"width: 40px; height: 40px; object-fit: cover;\"\r\n                    />\r\n                  </ng-container>\r\n                  <ng-template #showReporterInitials>\r\n                    <div\r\n                      class=\"rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-2\"\r\n                      style=\"width: 40px; height: 40px; font-size: 16px; border: 1px solid black;\"\r\n                    >\r\n                      {{ getInitials(report.reporter) }}\r\n                    </div>\r\n                  </ng-template>\r\n                  <div>\r\n                    <h6 class=\"mb-0\">\r\n                      {{ report.reporter.name }} {{ report.reporter.surname }}\r\n                      <i class=\"bi\" [class]=\"report.reporter.verified ? 'bi bi-patch-check-fill text-info' : ''\"></i>\r\n                    </h6>\r\n                    <small class=\"text-muted\">{{ report.reporter.username }}</small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Publicación Reportada -->\r\n              <div class=\"col-12 col-md-3\">\r\n                <div class=\"d-flex align-items-center mb-2 mb-md-0\">\r\n                  <ng-container *ngIf=\"report.publication.user.avatar_url && report.publication.user.avatar_url.trim() !== ''; else showPublicationUserInitials\">\r\n                    <img\r\n                      [src]=\"report.publication.user.avatar_url\"\r\n                      [alt]=\"report.publication.user.name + ' ' + report.publication.user.surname\"\r\n                      class=\"rounded-circle me-2\"\r\n                      style=\"width: 40px; height: 40px; object-fit: cover;\"\r\n                    />\r\n                  </ng-container>\r\n                  <ng-template #showPublicationUserInitials>\r\n                    <div\r\n                      class=\"rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-2\"\r\n                      style=\"width: 40px; height: 40px; font-size: 16px; border: 1px solid black;\"\r\n                    >\r\n                      {{ getPublicationUserInitials(report.publication.user) }}\r\n                    </div>\r\n                  </ng-template>\r\n                  <div>\r\n                      <h6 \r\n                        class=\"mb-0 text-truncate publication-title\" \r\n                        title=\"Ir a la publicación\"\r\n                        (click)=\"goToPublication(report.publication.id)\">\r\n                        {{ report.publication.title }}\r\n                      </h6>\r\n                    <small class=\"text-muted\">\r\n                      Por: {{ report.publication.user.name }} {{ report.publication.user.surname }}\r\n                      <i class=\"bi\" [class]=\"report.publication.user.verified ? 'bi bi-patch-check-fill text-info' : ''\"></i>\r\n                    </small>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- Razón -->\r\n              <div class=\"col-6 col-md-2 text-center\">\r\n                <span class=\"text-dark text-truncate d-block\" style=\"font-size: 0.75rem; max-width: 100%;\">\r\n                  {{ report.reason }}\r\n                </span>\r\n              </div>\r\n\r\n              <!-- Estado -->\r\n              <div class=\"col-6 col-md-2 text-center\">\r\n                <span class=\"badge\" [class]=\"getStatusBadgeClass(report.status)\">\r\n                  {{ getStatusDisplayName(report.status) }}\r\n                </span>\r\n              </div>\r\n\r\n              <!-- Fecha -->\r\n              <div class=\"col-6 col-md-1 text-center\">\r\n                <small class=\"text-muted\">\r\n                  <i class=\"bi bi-calendar\"></i> {{ formatDate(report.created_at) }}\r\n                </small>\r\n                <br />\r\n                <small class=\"text-muted\">\r\n                  Hace {{ getDaysByDate(report.created_at) }} días\r\n                </small>\r\n              </div>\r\n\r\n              <!-- Acciones -->\r\n              <div class=\"col-6 col-md-1 text-end position-relative\">\r\n                <button\r\n                  class=\"btn btn-outline-primary btn-sm\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleDropdown(report.id); $event.stopPropagation()\"\r\n                  [attr.aria-expanded]=\"dropdownOpenId === report.id\"\r\n                  title=\"Acciones\"\r\n                  style=\"width: 30px; height: 30px; align-items: center; justify-content: center;\"\r\n                >\r\n                  <i class=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul\r\n                  class=\"dropdown-menu dropdown-menu-end\"\r\n                  [class.show]=\"dropdownOpenId === report.id\"\r\n                  style=\"position: absolute; top: 100%; right: 0; z-index: 1000;\"\r\n                >\r\n                    <li>\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"viewReportDetails(report); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-eye me-2\"></i> Ver más\r\n                      </button>\r\n                    </li>\r\n                    <li>\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"goToPublication(report.publication.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-link-45deg me-2\"></i> Ir a publicación\r\n                      </button>\r\n                    </li>\r\n                    <li *ngIf=\"report.status === 'PENDIENTE'\">\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"resolveReport(report.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-check-circle text-success me-2\"></i> Resolver\r\n                      </button>\r\n                    </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n  <div>\r\n    <span class=\"text-muted\">Mostrando {{ reports.length }} de {{ totalItems || 0 }} resultados</span>\r\n  </div>\r\n  <div class=\"d-flex align-items-center\">\r\n    <small class=\"me-2\">Mostrar</small>\r\n    <ng-select\r\n      [items]=\"[\r\n        { label: '5', value: 5 },\r\n        { label: '10', value: 10 },\r\n        { label: '25', value: 25 },\r\n        { label: '50', value: 50 }\r\n      ]\"\r\n      bindLabel=\"label\"\r\n      bindValue=\"value\"\r\n      [ngModel]=\"size\"\r\n      (ngModelChange)=\"changePageSize($event)\"\r\n      class=\"ng-select-sm\"\r\n      [clearable]=\"false\"\r\n      [searchable]=\"false\"\r\n      style=\"width: auto; min-width: 60px;\"\r\n    >\r\n    </ng-select>\r\n    <small class=\"ms-2\">por página</small>\r\n  </div>\r\n</div>\r\n    <!-- Paginación -->\r\n <nav *ngIf=\"totalPages > 0\" class=\"d-flex justify-content-center\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" [class.disabled]=\"page === 1\">\r\n          <small class=\"page-link\" style=\"font-size: 0.8rem\" (click)=\"page > 1 && changePage(page - 1)\">\r\n            <i class=\"bi bi-chevron-left\"></i> Anterior\r\n          </small>\r\n        </li>\r\n        <li\r\n          class=\"page-item\"\r\n          *ngFor=\"let p of getPages()\"\r\n          [class.active]=\"p === page\"\r\n        >\r\n          <span class=\"page-link\" (click)=\"changePage(p)\">{{ p }}</span>\r\n        </li>\r\n        <li class=\"page-item\" [class.disabled]=\"page === totalPages\">\r\n          <small class=\"page-link\" style=\"font-size: 0.8rem\" (click)=\"page < totalPages && changePage(page + 1)\">\r\n            Siguiente <i class=\"bi bi-chevron-right\"></i>\r\n          </small>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n    </div>\r\n      <app-solve-report-modal\r\n      *ngIf=\"showResolveModal && selectedReport\"\r\n      [reportId]=\"selectedReport.id\"\r\n      [userId]=\"selectedReport.publication.user.id\"\r\n      [publicationId]=\"selectedReport.publication.id\"\r\n      (close)=\"onCloseResolveModal()\"\r\n      (resolved)=\"onReportResolved()\">\r\n    </app-solve-report-modal>\r\n  </div>",
          "reports-list.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ReportsListComponent } from './reports-list.component';\r\n\r\ndescribe('ReportsListComponent', () => {\r\n  let component: ReportsListComponent;\r\n  let fixture: ComponentFixture<ReportsListComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ReportsListComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ReportsListComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "reports-list.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { ReportGet } from '../../models/ReportGet';\r\nimport { ReportFilterDto } from '../../models/ReportFilterDto';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport Swal from 'sweetalert2';\r\nimport { SolveReportModalComponent } from '../solve-report-modal/solve-report-modal.component';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-reports-list',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule, ReactiveFormsModule, NgSelectModule, SolveReportModalComponent],\r\n  templateUrl: './reports-list.component.html',\r\n  styleUrl: './reports-list.component.css'\r\n})\r\nexport class ReportsListComponent implements OnInit {\r\n  form: FormGroup;\r\n  reports: ReportGet[] = [];\r\n  totalItems = 0;\r\n  totalPages = 0;\r\n  sortDir: 'desc' | 'asc' = 'desc';\r\n  page = 1;\r\n  size = 10;\r\n  dropdownOpenId: number | null = null;\r\n\r\n  showResolveModal = false;\r\n  selectedReport: ReportGet | null = null;\r\n\r\n  private readonly utilsService = inject(UtilsService);\r\n  private readonly router = inject(Router);\r\n\r\n  statusOptions = [\r\n    { label: 'Todos', value: '' },\r\n    { label: 'Pendientes', value: 'PENDIENTE' },\r\n    { label: 'Resueltos', value: 'RESUELTO' }\r\n  ];\r\n\r\n  sortOptions = [\r\n    { label: 'Fecha de reporte', value: 'created_at' },\r\n    { label: 'Estado', value: 'status' }\r\n  ];\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.form = this.fb.group({\r\n      searchTerm: [''],\r\n      status: [''],\r\n      sortBy: ['created_at'],\r\n      sortDir: ['desc']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadReports();\r\n\r\n    this.form.valueChanges.subscribe((values) => {\r\n      console.log('Form values changed:', values);\r\n      this.page = 1;\r\n      const searchTerm = values.searchTerm?.trim() || '';\r\n      if (searchTerm.length >= 3 || searchTerm.length === 0) {\r\n        this.loadReports();\r\n      }\r\n    });\r\n  }\r\n\r\n  trackByReportId(index: number, report: ReportGet): number {\r\n    return report.id;\r\n  }\r\n\r\n  loadReports(): void {\r\n    const formValues = this.form.value;\r\n    \r\n    const dto: ReportFilterDto = {\r\n      ...formValues,\r\n      page: this.page - 1,\r\n      size: this.size,\r\n      status: formValues.status === '' ? undefined : formValues.status,\r\n      sortDir: this.sortDir\r\n    };\r\n\r\n    this.utilsService.getFilteredReports(dto).subscribe({\r\n      next: (res) => {\r\n        this.reports = res.content;\r\n        this.totalItems = res.totalElements;\r\n        this.totalPages = res.totalPages;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading reports:', err);\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudieron cargar los reportes',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.form.reset({\r\n      searchTerm: '',\r\n      status: '',\r\n      sortBy: 'created_at'\r\n    });\r\n    this.sortDir = 'desc';\r\n    this.size = 10; \r\n    this.page = 1;\r\n    this.loadReports();\r\n  }\r\n\r\n  changePage(newPage: number): void {\r\n    if (newPage >= 1 && newPage <= this.totalPages) {\r\n      this.page = newPage;\r\n      this.loadReports();\r\n    }\r\n  }\r\n\r\n  getPages(): number[] {\r\n    const maxPagesToShow = 5;\r\n    let startPage = Math.max(1, this.page - Math.floor(maxPagesToShow / 2));\r\n    let endPage = startPage + maxPagesToShow - 1;\r\n\r\n    if (endPage > this.totalPages) {\r\n      endPage = this.totalPages;\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  toggleSortDirection(): void {\r\n    this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\r\n    this.form.get('sortDir')?.setValue(this.sortDir);\r\n    this.loadReports();\r\n  }\r\n\r\n  getInitials(user: any): string {\r\n    const firstLetterName = user.name ? user.name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = user.surname ? user.surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n\r\n  getPublicationUserInitials(user: any): string {\r\n    const firstLetterName = user.name ? user.name.charAt(0).toUpperCase() : '';\r\n    const firstLetterSurname = user.surname ? user.surname.charAt(0).toUpperCase() : '';\r\n    return firstLetterName + firstLetterSurname;\r\n  }\r\n\r\n  formatDate(dateStr: string): string {\r\n    return dateStr ? dateStr.replace(/-/g, '/') : '';\r\n  }\r\n\r\n  getDaysByDate(dateStr: string): number {\r\n    if (!dateStr) return NaN;\r\n\r\n    const [day, month, year] = dateStr.split('-').map(Number);\r\n    if (!day || !month || !year) return NaN;\r\n\r\n    const date = new Date(year, month - 1, day);\r\n    const today = new Date();\r\n    \r\n    date.setHours(0, 0, 0, 0);\r\n    today.setHours(0, 0, 0, 0);\r\n\r\n    const diffTime = today.getTime() - date.getTime();\r\n\r\n    return diffTime <= 0 ? 0 : Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n  }\r\n\r\n  toggleDropdown(reportId: number): void {\r\n    if (this.dropdownOpenId === reportId) {\r\n      this.dropdownOpenId = null;\r\n    } else {\r\n      this.dropdownOpenId = reportId;\r\n    }\r\n  }\r\n\r\n  closeDropdown(): void {\r\n    this.dropdownOpenId = null;\r\n  }\r\n\r\n  getStatusBadgeClass(status: string): string {\r\n    switch (status) {\r\n      case 'PENDIENTE':\r\n        return 'bg-warning text-dark';\r\n      case 'RESUELTO':\r\n        return 'bg-success';\r\n      default:\r\n        return 'bg-secondary';\r\n    }\r\n  }\r\n\r\n  getStatusDisplayName(status: string): string {\r\n    switch (status) {\r\n      case 'PENDIENTE':\r\n        return 'Pendiente';\r\n      case 'RESUELTO':\r\n        return 'Resuelto';\r\n      default:\r\n        return status;\r\n    }\r\n  }\r\n\r\n  viewReportDetails(report: ReportGet): void {\r\n    Swal.fire({\r\n      title: 'Detalles del Reporte',\r\n      html: `\r\n      <div class=\"text-start\">\r\n      <div class=\"mb-4 p-3 border border-danger rounded bg-light\">\r\n        <h5 class=\"text-danger mb-3 fw-bold\">📢 REPORTE</h5>\r\n        <div class=\"mb-2\">\r\n        <strong class=\"text-danger\">Razón del Reporte:</strong>\r\n        <p class=\"mb-1 fs-6 fw-semibold text-dark\">${report.reason}</p>\r\n        </div>\r\n        <div class=\"mb-2\">\r\n        <strong class=\"text-danger\">Estado:</strong> \r\n        <span class=\"badge ${this.getStatusBadgeClass(report.status)} fs-6\">${this.getStatusDisplayName(report.status)}</span>\r\n        </div>\r\n        <div class=\"mb-2\">\r\n        <strong class=\"text-danger\">Fecha del Reporte:</strong> \r\n        <span class=\"fw-semibold\">${this.formatDate(report.created_at)}</span>\r\n        </div>\r\n        <div class=\"mb-0\">\r\n        <strong class=\"text-danger\">Reportado por:</strong> \r\n        <span class=\"fw-semibold\">${report.reporter.name} ${report.reporter.surname} (@${report.reporter.username})</span>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"mb-3\">\r\n        <h6 class=\"text-primary mb-2\">Publicación Reportada</h6>\r\n        <p class=\"mb-1\"><strong>Título:</strong> \"${report.publication.title}\"</p>\r\n        <p class=\"mb-0\"><strong>Propietario:</strong> ${report.publication.user.name} ${report.publication.user.surname} (@${report.publication.user.username})</p>\r\n        <p class=\"mb-1\"><strong>Rating:</strong> \r\n          <span class=\"badge bg-warning text-dark\">\r\n          <i class=\"bi bi-star-fill\"></i> ${report.publication.user.rating}/5\r\n          </span>\r\n        </p>\r\n      </div>\r\n      \r\n      ${report.response ? `\r\n      <div class=\"mb-3 p-3 border border-success rounded bg-light\">\r\n        <h6 class=\"text-success mb-2 fw-bold\">✅ Respuesta del Administrador</h6>\r\n        <p class=\"mb-0 fw-semibold\">${report.response}</p>\r\n      </div>\r\n      ` : ''}\r\n      </div>\r\n      `,\r\n      showCloseButton: true,\r\n      showConfirmButton: false,\r\n      width: '650px'\r\n    });\r\n  }\r\n\r\n  resolveReport(reportId: number): void {\r\n    this.selectedReport = this.reports.find(r => r.id === reportId) || null;\r\n    if (this.selectedReport) {\r\n      this.showResolveModal = true;\r\n    }\r\n  }\r\n\r\n  onCloseResolveModal(): void {\r\n    this.showResolveModal = false;\r\n    this.selectedReport = null;\r\n  }\r\n\r\n  onReportResolved(): void {\r\n    this.showResolveModal = false;\r\n    this.selectedReport = null;\r\n    this.loadReports(); \r\n  }\r\n\r\n  changePageSize(newSize: number) {\r\n    this.size = newSize;\r\n    this.page = 1;\r\n    this.loadReports();\r\n  }\r\n\r\n goToPublication(id: number): void {\r\n        this.router.navigate(['/publication', id]).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n  }\r\n}"
        },
        "search": {
          "search.component.css": "\r\n.hover-lift {\r\n  transition: all 0.3s ease;\r\n  cursor: pointer;\r\n}\r\n\r\n.hover-lift:hover {\r\n  transform: translateY(-8px);\r\n  box-shadow: 0 12px 40px rgba(0, 0, 0, 0.15) !important;\r\n}\r\n\r\n.publication-card {\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  border: 1px solid rgba(0, 0, 0, 0.05);\r\n}\r\n\r\n.publication-card:hover {\r\n  border-color: var(--bs-primary);\r\n  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.1) !important;\r\n}\r\n\r\n.publication-image {\r\n  transition: transform 0.3s ease;\r\n}\r\n\r\n.publication-card:hover .publication-image {\r\n  transform: scale(1.05);\r\n}\r\n\r\n.custom-ng-select {\r\n  --ng-select-border-color: #dee2e6;\r\n  --ng-select-border-color-focus: var(--bs-primary);\r\n  --ng-select-placeholder-color: #6c757d;\r\n  --ng-select-selected-color: var(--bs-primary);\r\n}\r\n\r\n.custom-ng-select .ng-select.ng-select-single .ng-select-container {\r\n  border-radius: 0.5rem;\r\n  border: 1px solid var(--ng-select-border-color);\r\n  min-height: 38px;\r\n}\r\n\r\n.custom-ng-select .ng-select.ng-select-multiple .ng-select-container {\r\n  border-radius: 0.5rem;\r\n  border: 1px solid var(--ng-select-border-color);\r\n  min-height: 38px;\r\n}\r\n\r\n.custom-ng-select .ng-select.ng-select-focused .ng-select-container {\r\n  border-color: var(--ng-select-border-color-focus);\r\n  box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);\r\n}\r\n\r\n.custom-ng-select .ng-select .ng-placeholder {\r\n  color: var(--ng-select-placeholder-color);\r\n}\r\n\r\n.custom-ng-select .ng-select .ng-arrow-wrapper {\r\n  padding-right: 12px;\r\n}\r\n\r\n.custom-ng-select .ng-select .ng-arrow-wrapper .ng-arrow {\r\n  border-color: #999 transparent transparent;\r\n  border-style: solid;\r\n  border-width: 5px 5px 0;\r\n}\r\n\r\n.custom-ng-select .ng-select.ng-select-opened .ng-arrow-wrapper .ng-arrow {\r\n  border-color: transparent transparent #999;\r\n  border-width: 0 5px 5px;\r\n}\r\n\r\n.pagination {\r\n  --bs-pagination-padding-x: 1rem;\r\n  --bs-pagination-padding-y: 0.5rem;\r\n  --bs-pagination-font-size: 0.9rem;\r\n  --bs-pagination-color: #6c757d;\r\n  --bs-pagination-bg: #fff;\r\n  --bs-pagination-border-width: 0;\r\n  --bs-pagination-border-color: transparent;\r\n  --bs-pagination-border-radius: 0.5rem;\r\n  --bs-pagination-hover-color: var(--bs-primary);\r\n  --bs-pagination-hover-bg: #f8f9fa;\r\n  --bs-pagination-focus-color: var(--bs-primary);\r\n  --bs-pagination-focus-bg: #f8f9fa;\r\n  --bs-pagination-focus-box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);\r\n  --bs-pagination-active-color: #fff;\r\n  --bs-pagination-active-bg: var(--bs-primary);\r\n  --bs-pagination-active-border-color: var(--bs-primary);\r\n  --bs-pagination-disabled-color: #adb5bd;\r\n  --bs-pagination-disabled-bg: #fff;\r\n  --bs-pagination-disabled-border-color: transparent;\r\n}\r\n\r\n.pagination .page-link {\r\n  margin: 0 2px;\r\n  font-weight: 500;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.pagination .page-link:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.pagination .page-item.active .page-link {\r\n  box-shadow: 0 4px 12px rgba(var(--bs-primary-rgb), 0.3);\r\n}\r\n\r\n.pagination .page-item.disabled .page-link {\r\n  cursor: not-allowed;\r\n  opacity: 0.5;\r\n}\r\n\r\n.badge {\r\n  font-weight: 500;\r\n  letter-spacing: 0.025em;\r\n}\r\n\r\n.form-control:focus {\r\n  border-color: var(--bs-primary);\r\n  box-shadow: 0 0 0 0.2rem rgba(var(--bs-primary-rgb), 0.25);\r\n}\r\n\r\n.input-group-text {\r\n  background-color: #f8f9fa;\r\n  border-color: #dee2e6;\r\n  color: #6c757d;\r\n}\r\n\r\n.btn {\r\n  font-weight: 500;\r\n  letter-spacing: 0.025em;\r\n  transition: all 0.2s ease;\r\n}\r\n\r\n.btn:hover {\r\n  transform: translateY(-1px);\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\r\n}\r\n\r\n.btn-primary {\r\n  background: linear-gradient(135deg, var(--bs-primary) 0%, #0056b3 100%);\r\n  border-color: var(--bs-primary);\r\n}\r\n\r\n.btn-primary:hover {\r\n  background: linear-gradient(135deg, #0056b3 0%, #004085 100%);\r\n  border-color: #0056b3;\r\n}\r\n\r\n.btn-outline-primary:hover {\r\n  background: linear-gradient(135deg, var(--bs-primary) 0%, #0056b3 100%);\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n\r\n.publication-card {\r\n  animation: fadeInUp 0.6s ease forwards;\r\n  min-height: 300px;\r\n}\r\n\r\n.publication-card:nth-child(1) { animation-delay: 0.1s; }\r\n.publication-card:nth-child(2) { animation-delay: 0.2s; }\r\n.publication-card:nth-child(3) { animation-delay: 0.3s; }\r\n.publication-card:nth-child(4) { animation-delay: 0.4s; }\r\n.publication-card:nth-child(5) { animation-delay: 0.5s; }\r\n.publication-card:nth-child(6) { animation-delay: 0.6s; }\r\n\r\n@media (max-width: 768px) {\r\n  .pagination {\r\n    --bs-pagination-padding-x: 0.5rem;\r\n    --bs-pagination-padding-y: 0.375rem;\r\n    --bs-pagination-font-size: 0.8rem;\r\n  }\r\n  \r\n  .publication-card {\r\n    margin-bottom: 1rem;\r\n  }\r\n  \r\n  .hover-lift:hover {\r\n    transform: none;\r\n  }\r\n}\r\n\r\n.loading-skeleton {\r\n  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);\r\n  background-size: 200% 100%;\r\n  animation: loading 1.5s infinite;\r\n}\r\n\r\n@keyframes loading {\r\n  0% { background-position: 200% 0; }\r\n  100% { background-position: -200% 0; }\r\n}\r\n\r\n@media (min-width: 992px) {\r\n  .position-sticky {\r\n    top: 20px !important;\r\n  }\r\n}\r\n\r\n.bg-gradient.bg-primary {\r\n  background: linear-gradient(135deg, var(--bs-primary) 0%, #0056b3 100%) !important;\r\n}",
          "search.component.html": "<div class=\"fondo-gris min-vh-100\">\r\n  <div class=\"container-fluid py-4\">\r\n    <div class=\"p-2\">\r\n      <!-- Header con título y estadísticas -->\r\n      <div class=\"row mb-4\">\r\n        <div class=\"col-12\">\r\n          <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n            <div>\r\n              <h2 class=\"fw-bold text-dark mb-0\">\r\n                <i class=\"bi bi-search text-primary me-2\"></i>\r\n                Explorar Publicaciones\r\n              </h2>\r\n              <p class=\"text-muted mb-0\" *ngIf=\"totalItems > 0\">\r\n                {{ totalItems }} resultado{{ totalItems === 1 ? '' : 's' }} encontrado{{ totalItems === 1 ? '' : 's' }}\r\n              </p>\r\n            </div>\r\n            <div class=\"d-none d-md-block\">\r\n              <span class=\"badge bg-primary fs-6 px-3 py-2\">\r\n                Página {{ currentPage }} de {{ totalPages }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row g-4\">\r\n        <!-- Panel de Filtros Mejorado -->\r\n        <div class=\"col-lg-3 col-md-4\">\r\n          <div class=\"position-sticky\" style=\"top: 20px;\">\r\n            <div class=\"card border-0 shadow-lg rounded-4 overflow-visible\">\r\n              <!-- Header del panel de filtros -->\r\n              <div class=\"bg-gradient bg-primary text-white p-4 d-flex justify-content-between align-items-start\">\r\n              <h5 class=\"mb-0 fw-bold\">\r\n                <i class=\"bi bi-funnel-fill me-2\"></i>\r\n                Filtros de Búsqueda\r\n              </h5>\r\n              <button \r\n                type=\"button\" \r\n                class=\"btn btn-sm btn-light p-1 d-flex align-items-center justify-content-center\"\r\n                style=\"width: 30px; height: 30px;\"\r\n                (click)=\"clearFilters()\"\r\n                title=\"Limpiar filtros\"\r\n              >\r\n                <i class=\"bi bi-trash text-primary\"></i>\r\n              </button>\r\n            </div>\r\n                          \r\n              <div class=\"card-body p-4\">\r\n                <form (ngSubmit)=\"applyFilters()\">\r\n                  <!-- Búsqueda de texto -->\r\n                  <div class=\"mb-4\">\r\n                    <label for=\"searchText\" class=\"form-label fw-semibold text-dark\">\r\n                      <i class=\"bi bi-search text-primary\"></i>\r\n                      Buscar por palabra clave\r\n                    </label>\r\n                    <div class=\"input-group\">\r\n                      <input\r\n                        type=\"text\"\r\n                        id=\"searchText\"\r\n                        [(ngModel)]=\"searchText\"\r\n                        name=\"searchText\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Ej: iPhone, auto, silla...\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Categorías -->\r\n                  <div class=\"mb-4\">\r\n                    <label for=\"categories\" class=\"form-label fw-semibold text-dark\">\r\n                      <i class=\"bi bi-grid-3x3-gap text-primary me-1\"></i>\r\n                      Categorías\r\n                    </label>\r\n                    <ng-select\r\n                      [items]=\"categories\"\r\n                      bindLabel=\"description\"\r\n                      bindValue=\"description\"\r\n                      [(ngModel)]=\"category\"\r\n                      name=\"categories\"\r\n                      [multiple]=\"true\"\r\n                      [closeOnSelect]=\"false\"\r\n                      placeholder=\"Selecciona categorías\"\r\n                      class=\"custom-ng-select\"\r\n                      appendTo=\"body\"\r\n                    >\r\n                    </ng-select>\r\n                  </div>\r\n\r\n                  <!-- Localidad -->\r\n                  <div class=\"mb-4\">\r\n                    <label for=\"location\" class=\"form-label fw-semibold text-dark\">\r\n                      <i class=\"bi bi-geo-alt-fill text-primary me-1\"></i>\r\n                      Ubicación\r\n                    </label>\r\n                    <ng-select\r\n                      [items]=\"locations\"\r\n                      bindLabel=\"description\"\r\n                      bindValue=\"description\"\r\n                      [(ngModel)]=\"location\"\r\n                      name=\"location\"\r\n                      [clearable]=\"true\"\r\n                      placeholder=\"Seleccionar localidad\"\r\n                      class=\"custom-ng-select\"\r\n                      appendTo=\"body\"\r\n                    >\r\n                    </ng-select>\r\n                  </div>\r\n\r\n                  <!-- Rango de precio -->\r\n                  <div class=\"mb-4\">\r\n                    <label class=\"form-label fw-semibold text-dark\">\r\n                      <i class=\"bi bi-currency-dollar text-primary me-1\"></i>\r\n                      Rango de Precio\r\n                    </label>\r\n                    <div class=\"row g-2\">\r\n                      <div class=\"col-5\">\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <span class=\"input-group-text\">$</span>\r\n                          <input\r\n                            type=\"number\"\r\n                            id=\"minPrice\"\r\n                            [(ngModel)]=\"minPrice\"\r\n                            name=\"minPrice\"\r\n                            class=\"form-control\"\r\n                            placeholder=\"Mín\"\r\n                            min=\"0\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-2 d-flex align-items-center justify-content-center\">\r\n                        <i class=\"bi bi-dash-lg text-muted\"></i>\r\n                      </div>\r\n                      <div class=\"col-5\">\r\n                        <div class=\"input-group input-group-sm\">\r\n                          <span class=\"input-group-text\">$</span>\r\n                          <input\r\n                            type=\"number\"\r\n                            id=\"maxPrice\"\r\n                            [(ngModel)]=\"maxPrice\"\r\n                            name=\"maxPrice\"\r\n                            class=\"form-control\"\r\n                            placeholder=\"Máx\"\r\n                            min=\"0\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Etiquetas -->\r\n                  <div class=\"mb-4\">\r\n                    <label for=\"tags\" class=\"form-label fw-semibold text-dark\">\r\n                      <i class=\"bi bi-tags-fill text-primary me-1\"></i>\r\n                      Etiquetas\r\n                    </label>\r\n                    <ng-select\r\n                      [items]=\"tags\"\r\n                      bindLabel=\"description\"\r\n                      bindValue=\"description\"\r\n                      [(ngModel)]=\"tag\"\r\n                      [multiple]=\"true\"\r\n                      name=\"tags\"\r\n                      [closeOnSelect]=\"false\"\r\n                      placeholder=\"Seleccionar etiquetas\"\r\n                      class=\"custom-ng-select\"\r\n                      appendTo=\"body\"\r\n                    >\r\n                    </ng-select>\r\n                  </div>\r\n\r\n                  <!-- Ordenamiento -->\r\n                  <div class=\"mb-4\">\r\n                    <label for=\"orderBy\" class=\"form-label fw-semibold text-dark\">\r\n                      <i class=\"bi bi-sort-down text-primary me-1\"></i>\r\n                      Ordenar por\r\n                    </label>\r\n                    <div class=\"d-flex gap-2\">\r\n                      <ng-select\r\n                        [items]=\"orderByOptions\"\r\n                        bindLabel=\"label\"\r\n                        bindValue=\"value\"\r\n                        [(ngModel)]=\"sortBy\"\r\n                        name=\"sortBy\"\r\n                        [clearable]=\"false\"\r\n                        placeholder=\"Ordenar por\"\r\n                        class=\"flex-grow-1 custom-ng-select\"\r\n                        appendTo=\"body\"\r\n                      >\r\n                      </ng-select>\r\n                      <div class=\"btn-group\" role=\"group\">\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"btn btn-outline-primary btn-sm\"\r\n                          (click)=\"sortDir = 'asc'\"\r\n                          [class.active]=\"sortDir === 'asc'\"\r\n                          title=\"Ascendente\"\r\n                        >\r\n                          <i class=\"bi bi-sort-up\"></i>\r\n                        </button>\r\n                        <button\r\n                          type=\"button\"\r\n                          class=\"btn btn-outline-primary btn-sm\"\r\n                          (click)=\"sortDir = 'desc'\"\r\n                          [class.active]=\"sortDir === 'desc'\"\r\n                          title=\"Descendente\"\r\n                        >\r\n                          <i class=\"bi bi-sort-down\"></i>\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Botones de acción -->\r\n                  <div class=\"d-grid gap-2\">\r\n                    <button type=\"submit\" class=\"btn btn-primary py-2 fw-semibold rounded-3\">\r\n                      <i class=\"bi bi-funnel me-2\"></i>\r\n                      Aplicar Filtros\r\n                    </button>\r\n                  </div>\r\n                </form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Área de Resultados -->\r\n        <div class=\"col-lg-9 col-md-8\">\r\n          @if (publications.length === 0) {\r\n            <div class=\"card border-0 shadow-sm rounded-4 bg-white\">\r\n              <div class=\"card-body text-center py-5\">\r\n                <div class=\"mb-4\">\r\n                  <img src=\"assets/Utils/not-found.png\" alt=\"\" class=\"img-fluid mb-3\" style=\"max-width: 200px; height: auto;\">\r\n                </div>\r\n                <h4 class=\"fw-bold text-dark mb-3\">No se encontraron publicaciones</h4>\r\n                <p class=\"text-muted mb-4\">\r\n                  Intenta ajustar tus filtros o buscar con otras palabras clave.\r\n                </p>\r\n                <button class=\"btn btn-outline-primary\" (click)=\"applyFilters()\">\r\n                  <i class=\"bi bi-arrow-clockwise me-2\"></i>\r\n                  Intentar nuevamente\r\n                </button>\r\n              </div>\r\n            </div>\r\n          } @else {\r\n            <!-- Grid de publicaciones -->\r\n            <div class=\"row g-4 mb-4\">\r\n              <div class=\"col-xl-4 col-md-6\" *ngFor=\"let pub of publications\">\r\n                <div class=\"card h-100 border-0 shadow-sm rounded-4 overflow-hidden hover-lift publication-card\" \r\n                     (click)=\"goToPublication(pub.id)\">\r\n                  <!-- Imagen del producto -->\r\n                  <div class=\"position-relative overflow-hidden\">\r\n                    <img\r\n                      [src]=\"pub.images && pub.images.length > 0 ? pub.images[0] : 'assets/not-found.jpg'\"\r\n                      class=\"card-img-top publication-image\"\r\n                      alt=\"Imagen de publicación\"\r\n                      style=\"height: 200px; object-fit: contain;\"\r\n                    />\r\n                    <!-- Badge de precio -->\r\n                    <div class=\"position-absolute top-0 end-0 m-3\">\r\n                      <span class=\"badge bg-dark bg-opacity-75 text-white fs-6 px-3 py-2 rounded-pill\">\r\n                        ${{ pub.price | decimalFormat }}\r\n                      </span>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div class=\"card-body p-3 d-flex flex-column\">\r\n                    <!-- Título -->\r\n                    <h6 class=\"card-title fw-bold text-dark mb-2 text-truncate\">\r\n                      {{ pub.title }}\r\n                    </h6>\r\n                    \r\n                    <!-- Información del vendedor -->\r\n                    <div class=\"d-flex align-items-center mb-3\">\r\n                      <div class=\"flex-grow-1\">\r\n                        <p class=\"mb-0 small fw-semibold text-secondary\">\r\n                          Por {{ pub.user.name }} {{ pub.user.surname }}\r\n                          @if (pub.user.verified) {\r\n                            <i class=\"bi bi-patch-check-fill text-info ms-1\"></i>\r\n                          }\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <!-- Etiquetas -->\r\n                    <div class=\"mb-3\">\r\n                      <span\r\n                        *ngFor=\"let tag of pub.tags; let i = index\"\r\n                        [ngClass]=\"getTagClass(tag)\"\r\n                        class=\"d-inline-block me-1 mb-1 small\"\r\n                        [style.display]=\"i < 3 ? 'inline-block' : 'none'\"\r\n                      >\r\n                        {{ tag }}\r\n                      </span>\r\n                      <span *ngIf=\"pub.tags.length > 3\" class=\"badge bg-light text-dark small\">\r\n                        +{{ pub.tags.length - 3 }}\r\n                      </span>\r\n                    </div>\r\n                    \r\n                    <!-- Ubicación -->\r\n                    <div class=\"mt-auto\">\r\n                      <p class=\"text-muted small mb-0\">\r\n                        <i class=\"bi bi-geo-alt-fill text-primary me-1\"></i>\r\n                        {{ pub.location }}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <!-- Paginación mejorada -->\r\n            <nav *ngIf=\"totalPages > 0\" class=\"d-flex justify-content-center\">\r\n              <div class=\"card border-0 shadow-sm rounded-4 p-3\">\r\n                <ul class=\"pagination pagination-lg mb-0 justify-content-center\">\r\n                  <li class=\"page-item\" [class.disabled]=\"currentPage === 1\">\r\n                    <button\r\n                      class=\"page-link border-0 rounded-3 me-1\"\r\n                      (click)=\"currentPage > 1 && changePage(currentPage - 1)\"\r\n                      [disabled]=\"currentPage === 1\"\r\n                    >\r\n                      <i class=\"bi bi-chevron-left\"></i>\r\n                      <span class=\"d-none d-sm-inline ms-1\">Anterior</span>\r\n                    </button>\r\n                  </li>\r\n                  \r\n                  <li\r\n                    class=\"page-item mx-1\"\r\n                    *ngFor=\"let p of getPages()\" \r\n                    [class.active]=\"p === currentPage\"\r\n                  >\r\n                    <button class=\"page-link border-0 rounded-3\" (click)=\"changePage(p)\">\r\n                      {{ p }}\r\n                    </button>\r\n                  </li>\r\n                  \r\n                  <li class=\"page-item\" [class.disabled]=\"currentPage === totalPages\">\r\n                    <button\r\n                      class=\"page-link border-0 rounded-3 ms-1\"\r\n                      (click)=\"currentPage < totalPages && changePage(currentPage + 1)\"\r\n                      [disabled]=\"currentPage === totalPages\"\r\n                    >\r\n                      <span class=\"d-none d-sm-inline me-1\">Siguiente</span>\r\n                      <i class=\"bi bi-chevron-right\"></i>\r\n                    </button>\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </nav>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>",
          "search.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { SearchComponent } from './search.component';\r\n\r\ndescribe('SearchComponent', () => {\r\n  let component: SearchComponent;\r\n  let fixture: ComponentFixture<SearchComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [SearchComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(SearchComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "search.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, OnInit } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { PublicationsService } from '../../services/publications.service';\r\nimport { PublicationGet } from '../../models/PublicationGet';\r\nimport { SearchDto } from '../../models/SearchDto';\r\nimport { PaginatedPublications } from '../../models/PaginatedPublications';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport { CategoryGet } from '../../models/CategoryGet';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { LocationGet } from '../../models/LocationGet';\r\nimport { TagGet } from '../../models/TagGet';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n@Component({\r\n  selector: 'app-search',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule, PipesModule, NgSelectModule],\r\n  templateUrl: './search.component.html',\r\n  styleUrl: './search.component.css'\r\n})\r\nexport class SearchComponent implements OnInit {\r\n\r\n  publications: PublicationGet[] = [];\r\n  categories: CategoryGet[] = [];\r\n  locations: LocationGet[] = [];\r\n  tags: TagGet[] = [];\r\n  searchText: string | null = null;\r\n  location: string | null = null;\r\n  minPrice: number | null = null;\r\n  maxPrice: number | null = null;\r\n  totalItems: number = 0;\r\n  category: string[] = [];\r\n  tag: string[] = [];\r\n  sortDir: string = 'desc';\r\n  sortBy: string = 'createdAt';\r\n  currentPage: number = 1;\r\n  totalPages: number = 0;\r\n  itemsPerPage: number = 12; \r\n  isLastPage: boolean = false;\r\n  orderByOptions = [\r\n    { label: 'Fecha de publicación', value: 'createdAt' },\r\n    { label: 'Precio', value: 'price' },\r\n    { label: 'Título', value: 'title' }\r\n  ];\r\n\r\n  constructor(\r\n    private publicationsService: PublicationsService,\r\n    private utilsService: UtilsService,\r\n    private route: ActivatedRoute, \r\n    private router: Router\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.route.queryParams.subscribe(params => {\r\n      this.searchText = params['searchText'] || '';\r\n      this.category = Array.isArray(params['category']) ? params['category'] : (params['category'] ? [params['category']] : []);\r\n      this.location = params['location'];\r\n      this.minPrice = params['minPrice'] ? +params['minPrice'] : null;\r\n      this.maxPrice = params['maxPrice'] ? +params['maxPrice'] : null;\r\n      this.tag = Array.isArray(params['tag']) ? params['tag'] : (params['tag'] ? [params['tag']] : []);\r\n      this.sortBy = params['sortBy'] || 'createdAt';\r\n      this.sortDir = params['sortDir'] || 'desc';\r\n      this.loadCategories();\r\n      this.loadLocations();\r\n      this.loadTags();\r\n      this.loadPublications();\r\n    });\r\n  }\r\n\r\n  loadPublications(): void {\r\n    const searchDto: SearchDto = {};\r\n\r\n    searchDto.active = true; \r\n\r\n    if (this.searchText) {\r\n      searchDto.searchTerm = this.searchText;\r\n    }\r\n\r\n    if (this.category && this.category.length > 0) {\r\n      searchDto.categories = this.category;  \r\n    }\r\n\r\n    if (this.tag && this.tag.length > 0) {\r\n      searchDto.tags = this.tag;  \r\n    }\r\n\r\n    if (this.location) {\r\n      searchDto.location = this.location;\r\n    }\r\n\r\n    if (this.minPrice !== null) {\r\n      searchDto.minPrice = this.minPrice;\r\n    }\r\n\r\n    if (this.maxPrice !== null) {\r\n      searchDto.maxPrice = this.maxPrice;\r\n    }\r\n\r\n    if (this.sortBy) {\r\n      searchDto.sortBy = this.sortBy;\r\n    }\r\n\r\n    if (this.sortDir) {\r\n      searchDto.sortDir = this.sortDir;\r\n    }\r\n\r\n    searchDto.page = this.currentPage - 1; \r\n\r\n    console.log('Search DTO:', searchDto); \r\n    console.log('publications', this.publications); \r\n    console.log(this.category); \r\n    console.log(this.tag); \r\n\r\n    this.publicationsService.getFilteredPublications(searchDto).subscribe((response: PaginatedPublications) => {\r\n      this.publications = response.content;\r\n      this.totalPages = response.totalPages || 0;\r\n      this.totalItems = response.totalElements || 0;\r\n      this.isLastPage = this.currentPage >= this.totalPages;\r\n      window.scrollTo({ top: 0, behavior: 'smooth' })\r\n    });\r\n  }\r\n\r\n  changePage(newPage: number): void {\r\n    if (newPage >= 1 && newPage <= this.totalPages) {\r\n      this.currentPage = newPage;\r\n      this.loadPublications();\r\n    }\r\n  }\r\n\r\n  getPages(): number[] {\r\n    const maxPagesToShow = 5;\r\n    let startPage = Math.max(1, this.currentPage - Math.floor(maxPagesToShow / 2));\r\n    let endPage = startPage + maxPagesToShow - 1;\r\n\r\n    if (endPage > this.totalPages) {\r\n      endPage = this.totalPages;\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  applyFilters(): void {\r\n    this.currentPage = 1; \r\n    this.loadPublications();\r\n  }\r\n\r\n  clearFilters(): void {\r\n    // Limpiar todos los filtros\r\n    this.searchText = null;\r\n    this.category = [];\r\n    this.location = null;\r\n    this.minPrice = null;\r\n    this.maxPrice = null;\r\n    this.tag = [];\r\n    this.sortBy = 'createdAt';\r\n    this.sortDir = 'desc';\r\n    this.currentPage = 1;\r\n    \r\n    // Actualizar URL sin parámetros de búsqueda\r\n    this.router.navigate([], {\r\n      relativeTo: this.route,\r\n      queryParams: {}\r\n    });\r\n    \r\n    // Cargar publicaciones sin filtros\r\n    this.loadPublications();\r\n  }\r\n\r\n  toggleSortDir(direction: string): void {\r\n    if (this.sortDir === direction) {\r\n      this.sortDir = direction === 'asc' ? 'desc' : 'asc';\r\n    } else {\r\n      this.sortDir = direction;\r\n    }\r\n    this.loadPublications(); \r\n  }\r\n\r\n  getTagClass(tag: string): string {\r\n    const tagColorMap: { [key: string]: string } = {\r\n      'Nuevo': 'bg-success',\r\n      'Usado': 'bg-danger',\r\n      'Envío incluido': 'bg-primary',\r\n      'Retiro en mano': 'bg-secondary',\r\n      'Punto de encuentro': 'bg-info',\r\n      'Precio fijo': 'bg-dark',\r\n      'Precio negociable': 'bg-warning',\r\n    };\r\n  \r\n    return `badge rounded-pill ${tagColorMap[tag] || 'bg-secondary'}`;\r\n  }\r\n\r\n  loadCategories(): void {\r\n    this.publicationsService.getCategories().subscribe({\r\n      next: (categories: CategoryGet[]) => {\r\n        this.categories = categories;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar categorías:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadLocations(): void {\r\n    this.utilsService.getLocations().subscribe({\r\n      next: (locations: LocationGet[]) => {\r\n        this.locations = locations;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar localidades:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  goToPublication(id: number): void {\r\n    this.publicationsService.addView(id).subscribe({\r\n      next: () => {\r\n        this.router.navigate(['/publication', id]).then(() => {\r\n          window.scrollTo({ top: 0, behavior: 'smooth' });\r\n        });\r\n      },\r\n    });\r\n  }\r\n\r\n  loadTags(): void {\r\n    this.utilsService.getTags().subscribe({\r\n      next: (tags: TagGet[]) => {\r\n        this.tags = tags;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al cargar etiquetas:', error);\r\n      }\r\n    });\r\n  }\r\n}"
        },
        "solve-report-modal": {
          "solve-report-modal.component.css": "",
          "solve-report-modal.component.html": "<div *ngIf=\"modalVisible\" class=\"modal fade show d-block\" tabindex=\"-1\" aria-modal=\"true\" role=\"dialog\"\r\n  style=\"background-color: rgba(0, 0, 0, 0.5);\">\r\n  <div class=\"modal-dialog modal-dialog-centered\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Resolver Reporte</h5>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"onClose()\" aria-label=\"Cerrar\"></button>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n          \r\n          <!-- Respuesta del administrador -->\r\n          <div class=\"mb-3\">\r\n            <label for=\"response\" class=\"form-label\">Respuesta del administrador <span class=\"text-danger\">*</span></label>\r\n            <textarea \r\n              id=\"response\" \r\n              rows=\"4\" \r\n              formControlName=\"response\" \r\n              class=\"form-control\"\r\n              [ngClass]=\"onValidate('response')\"\r\n              placeholder=\"Proporciona una respuesta detallada sobre la resolución del reporte...\">\r\n            </textarea>\r\n            <div class=\"invalid-feedback\">{{ showError('response') }}</div>\r\n            <small class=\"form-text text-muted\">Mínimo 10 caracteres, máximo 255 caracteres</small>\r\n          </div>\r\n\r\n          <!-- Acciones administrativas -->\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Acciones administrativas</label>\r\n            \r\n            <div class=\"form-check mb-2\">\r\n              <input \r\n                class=\"form-check-input\" \r\n                type=\"checkbox\" \r\n                id=\"banUser\" \r\n                formControlName=\"banUser\">\r\n              <label class=\"form-check-label\" for=\"banUser\">\r\n                <i class=\"fas fa-user-slash me-1\"></i>\r\n                Banear usuario\r\n              </label>\r\n            </div>\r\n\r\n            <div class=\"form-check\">\r\n              <input \r\n                class=\"form-check-input\" \r\n                type=\"checkbox\" \r\n                id=\"deletePublication\" \r\n                formControlName=\"deletePublication\">\r\n              <label class=\"form-check-label\" for=\"deletePublication\">\r\n                <i class=\"fas fa-trash me-1\"></i>\r\n                Borrar publicación\r\n              </label>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"alert alert-warning d-flex align-items-center\" \r\n               *ngIf=\"form.value.banUser || form.value.deletePublication\">\r\n            <i class=\"fas fa-exclamation-triangle me-2\"></i>\r\n            <div>\r\n              <strong>Atención:</strong> \r\n              <span *ngIf=\"form.value.banUser && form.value.deletePublication\">\r\n                Se baneará al usuario y se eliminará la publicación.\r\n              </span>\r\n              <span *ngIf=\"form.value.banUser && !form.value.deletePublication\">\r\n                Se baneará al usuario.\r\n              </span>\r\n              <span *ngIf=\"!form.value.banUser && form.value.deletePublication\">\r\n                Se eliminará la publicación.\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"onClose()\">\r\n              <i class=\"fas fa-times me-1\"></i>\r\n              Cancelar\r\n            </button>\r\n            <button type=\"submit\" class=\"btn btn-success\" [disabled]=\"form.invalid\">\r\n              <i class=\"fas fa-check me-1\"></i>\r\n              Resolver Reporte\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n",
          "solve-report-modal.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { SolveReportModalComponent } from './solve-report-modal.component';\r\n\r\ndescribe('SolveReportModalComponent', () => {\r\n  let component: SolveReportModalComponent;\r\n  let fixture: ComponentFixture<SolveReportModalComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [SolveReportModalComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(SolveReportModalComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "solve-report-modal.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, inject, Input, Output } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport Swal from 'sweetalert2';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport { SolveReportPost } from '../../models/SolveReportPost';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { PublicationsService } from '../../services/publications.service';\r\n\r\n@Component({\r\n  selector: 'app-solve-report-modal',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './solve-report-modal.component.html',\r\n  styleUrl: './solve-report-modal.component.css'\r\n})\r\nexport class SolveReportModalComponent {\r\n  @Input() reportId: number = 0;\r\n  @Input() userId: number = 0;\r\n  @Input() publicationId: number = 0;\r\n  @Output() close = new EventEmitter<void>();\r\n  @Output() resolved = new EventEmitter<void>();\r\n\r\n  modalVisible = true;\r\n  private readonly utilsService = inject(UtilsService);\r\n  private readonly userService = inject(UsersService);\r\n  private readonly publicationService = inject(PublicationsService);\r\n\r\n  form = new FormGroup({\r\n    response: new FormControl('', [Validators.required, Validators.minLength(10), Validators.maxLength(255)]),\r\n    banUser: new FormControl(false),\r\n    deletePublication: new FormControl(false)\r\n  });\r\n\r\n  onClose() {\r\n    this.modalVisible = false;\r\n    this.close.emit();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) return;\r\n\r\n    const payload: SolveReportPost = {\r\n      reportId: this.reportId,\r\n      response: this.form.value.response || ''\r\n    };\r\n\r\n    this.utilsService.solveReport(payload).subscribe({\r\n      next: () => {\r\n        this.executeAdditionalActions();\r\n      },\r\n      error: (error) => {\r\n        Swal.fire({\r\n          icon: 'error',\r\n          title: 'Error',\r\n          text: 'No se pudo resolver el reporte, intenta más tarde.',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n        console.error('Error resolving report:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  private executeAdditionalActions() {\r\n    const actions: Promise<any>[] = [];\r\n\r\n    if (this.form.value.banUser && this.userId) {\r\n      actions.push(this.userService.deleteUser(this.userId).toPromise());\r\n    }\r\n\r\n    if (this.form.value.deletePublication && this.publicationId) {\r\n      actions.push(this.publicationService.deletePublication(this.publicationId).toPromise());\r\n    }\r\n\r\n    Promise.all(actions)\r\n      .then(() => {\r\n        Swal.fire({\r\n          icon: 'success',\r\n          title: 'Éxito',\r\n          text: 'Reporte resuelto correctamente',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n        this.resolved.emit();\r\n        this.onClose();\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error executing additional actions:', error);\r\n        Swal.fire({\r\n          icon: 'warning',\r\n          title: 'Parcialmente completado',\r\n          text: 'El reporte fue resuelto, pero algunas acciones adicionales fallaron.',\r\n          timer: 3000,\r\n          showConfirmButton: false\r\n        });\r\n        this.resolved.emit();\r\n        this.onClose();\r\n      });\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control?.dirty || control?.touched),\r\n      'is-valid': control?.valid && (control?.dirty || control?.touched)\r\n    };\r\n  }\r\n\r\n  showError(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    if (control && control.errors && (control.dirty || control.touched)) {\r\n      if (control.errors['required']) return `${this.getFieldLabel(controlName)} es obligatorio.`;\r\n      if (control.errors['minlength']) return `${this.getFieldLabel(controlName)} debe tener al menos ${control.errors['minlength'].requiredLength} caracteres.`;\r\n      if (control.errors['maxlength']) return `${this.getFieldLabel(controlName)} debe tener máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  private getFieldLabel(controlName: string): string {\r\n    const labels: { [key: string]: string } = {\r\n      'response': 'La respuesta'\r\n    };\r\n    return labels[controlName] || controlName;\r\n  }\r\n\r\n}\r\n"
        },
        "subscriptions": {
          "subscriptions.component.css": "\r\n*{\r\n animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n.bg-bronce {\r\n  background: #cd7f32;\r\n}\r\n.btn-outline-bronce {\r\n  color: #cd7f32;\r\n  border-color: #cd7f32;\r\n}\r\n.btn-outline-bronce:hover {\r\n  background-color: #cd7f32;\r\n  color: white;\r\n}\r\n\r\n.bg-plata {\r\n  background: silver\r\n}\r\n.btn-outline-plata {\r\n  color: silver;\r\n  border-color: silver;\r\n}\r\n.btn-outline-plata:hover {\r\n  background-color: silver;\r\n  color: white;\r\n}\r\n\r\n.bg-oro {\r\n  background: gold;\r\n}\r\n.btn-outline-oro {\r\n  color: gold;\r\n  border-color: gold;\r\n}\r\n.btn-outline-oro:hover {\r\n  background-color: gold;\r\n  color: black;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}",
          "subscriptions.component.html": "<div class=\"fondo-gris\" style=\"min-height: 100vh;\">\r\n@if (authService.hasRole(\"PREMIUM\")) {\r\n    <div class=\"container py-5\">\r\n<div class=\"row justify-content-center\">\r\n    <div class=\"col-md-6\">\r\n    <div class=\"card shadow-sm border-0\">\r\n        <div class=\"card-header d-flex align-items-center justify-content-between bg-primary text-white\">\r\n        <div>\r\n            <i class=\"bi bi-star-fill me-2\"></i>\r\n            <strong>Suscripción Activa</strong>\r\n        </div>\r\n        <span class=\"badge bg-light text-dark\">Activa</span>\r\n        </div>\r\n        <div class=\"card-body\">\r\n        <p class=\"mb-2\">\r\n            <i class=\"bi bi-calendar-check me-2 text-success\"></i>\r\n            <strong>Inicio:</strong> {{formatDate(existingSubscription.start_date)}}\r\n        </p>\r\n        <p class=\"mb-2\">\r\n            <i class=\"bi bi-calendar-x me-2 text-danger\"></i>\r\n            <strong>Fin:</strong> {{formatDate(existingSubscription.end_date)}}\r\n        </p>\r\n        <p class=\"mb-2\">\r\n            <i class=\"bi bi-star me-2 text-warning\"></i>\r\n            <strong>Tipo de suscripción:</strong>\r\n            <ng-container [ngSwitch]=\"existingSubscription.subscription_type.description.toLowerCase()\">\r\n            <!-- Bronce -->\r\n            <i *ngSwitchCase=\"'bronce'\" class=\"bi bi-gem me-1 ms-2\" style=\"color: #cd7f32;\"> Bronce</i>\r\n            \r\n            <!-- Plata -->\r\n            <i *ngSwitchCase=\"'plata'\" class=\"bi bi-gem me-1 ms-2\" style=\"color: silver;\"> Plata</i>\r\n\r\n            <!-- Oro -->\r\n            <i *ngSwitchCase=\"'oro'\" class=\"bi bi-gem me-1 ms-2\" style=\"color: gold;\"> Oro</i>    \r\n            </ng-container>\r\n        </p>\r\n        <p class=\"text-muted\">\r\n            <i class=\"bi bi-info-circle me-2\"></i>\r\n            Luego del plazo de finalizacíon podes volver a adquirir una nueva suscripción.\r\n        </p>\r\n        </div>\r\n        \r\n        @if (isAdmin()) {\r\n          <div class=\"card-footer bg-light\">\r\n            <div class=\"text-center\">\r\n              <button class=\"btn btn-outline-secondary btn-sm\" (click)=\"openDiscountModal()\">\r\n                <i class=\"bi bi-gear me-1\"></i>\r\n                Gestionar Descuento Global\r\n              </button>\r\n            </div>\r\n          </div>\r\n        }\r\n    </div>\r\n    </div>\r\n</div>\r\n</div>\r\n}\r\n@else {\r\n<div class=\"container-fluid py-5\">\r\n  <div class=\"row justify-content-center\">\r\n    <div class=\"col-md-8 text-center\">\r\n      <h1 class=\"display-4 fw-bold\">Suscripciones</h1>\r\n      <p class=\"lead\">Elige el plan que mejor se adapte a tus necesidades para empezar a publicar tus productos</p>\r\n      \r\n      @if (currentDiscount > 0) {\r\n        <div class=\"alert alert-success d-inline-block\">\r\n          <i class=\"bi bi-tag-fill me-2\"></i>\r\n          <strong>¡Oferta especial!</strong> {{currentDiscount}}% de descuento en todos los planes\r\n        </div>\r\n      }\r\n      \r\n      @if (isAdmin()) {\r\n        <div class=\"mt-3\">\r\n          <button class=\"btn btn-outline-secondary btn-sm\" (click)=\"openDiscountModal()\">\r\n            <i class=\"bi bi-gear me-1\"></i>\r\n            Gestionar Descuento\r\n          </button>\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n\r\n<!-- Suscripciones -->\r\n<div class=\"container py-5\">\r\n  <div class=\"row justify-content-center g-4\">\r\n\r\n    <!-- Bronce -->\r\n    <div class=\"col-md-4\">\r\n      <div class=\"card border-0 shadow-sm h-100 text-center\">\r\n        <div class=\"card-header bg-bronce text-white fs-5 fw-bold\">\r\n          Suscripción Bronce\r\n          @if (currentDiscount > 0) {\r\n            <div class=\"small\">\r\n              <span class=\"badge bg-warning text-dark\">-{{currentDiscount}}%</span>\r\n            </div>\r\n          }\r\n        </div>\r\n        <div class=\"card-body\">\r\n          @if (currentDiscount > 0) {\r\n            <div class=\"mb-2\">\r\n              <span class=\"text-muted text-decoration-line-through\">${{basePrices.bronce}}</span>\r\n            </div>\r\n          }\r\n          <h1 class=\"card-title\">${{getDiscountedPrice(basePrices.bronce)}}</h1>\r\n          <h6>${{getDiscountedPrice(basePrices.bronce)}} / mes</h6>\r\n          <ul class=\"list-unstyled mt-3 mb-4\">\r\n            <li><i class=\"bi bi-check-lg text-success\"></i> 1 mes de servicio</li>\r\n            @if (currentDiscount > 0) {\r\n              <li><i class=\"bi bi-check-lg text-success\"></i> {{currentDiscount}}% de descuento aplicado</li>\r\n            } @else {\r\n              <li><i class=\"bi bi-x text-danger\"></i> Sin descuento</li>\r\n            }\r\n          </ul>\r\n          <button class=\"btn btn-outline-bronce\" (click)=\"pay('Suscripción Bronce', basePrices.bronce)\">Elegir Bronce</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Plata -->\r\n    <div class=\"col-md-4\">\r\n      <div class=\"card border-0 shadow h-100 text-center\">\r\n        <div class=\"card-header bg-plata text-white fs-5 fw-bold\">\r\n          Suscripción Plata\r\n          @if (currentDiscount > 0) {\r\n            <div class=\"small\">\r\n              <span class=\"badge bg-warning text-dark\">-{{currentDiscount}}%</span>\r\n            </div>\r\n          }\r\n        </div>\r\n        <div class=\"card-body\">\r\n          @if (currentDiscount > 0) {\r\n            <div class=\"mb-2\">\r\n              <span class=\"text-muted text-decoration-line-through\">${{basePrices.plata}}</span>\r\n            </div>\r\n          }\r\n          <h1 class=\"card-title\">${{getDiscountedPrice(basePrices.plata)}}</h1>\r\n          <h6>${{getMonthlyPrice(basePrices.plata, 6)}} / mes</h6>\r\n          <ul class=\"list-unstyled mt-3 mb-4\">\r\n            <li><i class=\"bi bi-check-lg text-success\"></i> 6 meses de servicio</li>\r\n            <li><i class=\"bi bi-check-lg text-success\"></i> Ahorro de ${{getMonthlySavings(basePrices.plata, 6)}} / mes</li>\r\n            @if (currentDiscount > 0) {\r\n              <li><i class=\"bi bi-check-lg text-success\"></i> {{currentDiscount}}% de descuento adicional</li>\r\n            }\r\n          </ul>\r\n          <button class=\"btn btn-outline-plata\" (click)=\"pay('Suscripción Plata', basePrices.plata)\">Elegir Plata</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Oro -->\r\n    <div class=\"col-md-4\">\r\n      <div class=\"card border-0 shadow-lg h-100 text-center\">\r\n        <div class=\"card-header bg-oro text-white fs-5 fw-bold\">\r\n          Suscripción Oro\r\n          @if (currentDiscount > 0) {\r\n            <div class=\"small\">\r\n              <span class=\"badge bg-warning text-dark\">-{{currentDiscount}}%</span>\r\n            </div>\r\n          }\r\n        </div>\r\n        <div class=\"card-body\">\r\n          @if (currentDiscount > 0) {\r\n            <div class=\"mb-2\">\r\n              <span class=\"text-muted text-decoration-line-through\">${{basePrices.oro}}</span>\r\n            </div>\r\n          }\r\n          <h1 class=\"card-title\">${{getDiscountedPrice(basePrices.oro)}}</h1>\r\n          <h6>${{getMonthlyPrice(basePrices.oro, 12)}} / mes</h6>\r\n          <ul class=\"list-unstyled mt-3 mb-4\">\r\n            <li><i class=\"bi bi-check-lg text-success\"></i> 12 meses de servicio</li>\r\n            <li><i class=\"bi bi-check-lg text-success\"></i> Ahorro de ${{getMonthlySavings(basePrices.oro, 12)}} / mes</li>\r\n            @if (currentDiscount > 0) {\r\n              <li><i class=\"bi bi-check-lg text-success\"></i> {{currentDiscount}}% de descuento adicional</li>\r\n            }\r\n          </ul>\r\n          <button class=\"btn btn-outline-oro\" (click)=\"pay('Oro', basePrices.oro)\">Elegir Oro</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <!-- Contenedor de Wallet -->\r\n  <div class=\"row mt-5\">\r\n    <div class=\"col-12 d-flex justify-content-center\">\r\n      <div id=\"wallet_container\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>   \r\n}\r\n\r\n\r\n@if (showDiscountModal) {\r\n  <div class=\"modal fade show d-block\" tabindex=\"-1\" style=\"background-color: rgba(0,0,0,0.5);\">\r\n    <div class=\"modal-dialog modal-dialog-centered\">\r\n      <div class=\"modal-content\">\r\n        <div class=\"modal-header\">\r\n          <h5 class=\"modal-title\">\r\n            <i class=\"bi bi-percent me-2\"></i>\r\n            Gestionar Descuento\r\n          </h5>\r\n          <button type=\"button\" class=\"btn-close\" (click)=\"closeDiscountModal()\"></button>\r\n        </div>\r\n        <div class=\"modal-body\">\r\n          <form [formGroup]=\"discountForm\" (ngSubmit)=\"updateDiscount()\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"discountInput\" class=\"form-label\">\r\n                <strong>Descuento Actual:</strong> {{currentDiscount}}%\r\n              </label>\r\n              <div class=\"input-group\">\r\n                <input \r\n                  type=\"number\" \r\n                  class=\"form-control\" \r\n                  id=\"discountInput\"\r\n                  formControlName=\"discount\"\r\n                  placeholder=\"Ingrese el nuevo descuento\"\r\n                  [class.is-invalid]=\"isDiscountInvalid\"\r\n                  [disabled]=\"isUpdatingDiscount\">\r\n                <span class=\"input-group-text\">%</span>\r\n              </div>\r\n              \r\n              @if (isDiscountInvalid) {\r\n                <div class=\"invalid-feedback d-block\">\r\n                  {{discountErrorMessage}}\r\n                </div>\r\n              }\r\n              \r\n              <div class=\"form-text\">\r\n                Ingrese un valor entre 0 y 99. Use 0 para quitar el descuento.\r\n              </div>\r\n            </div>\r\n            \r\n            @if (discountValue !== currentDiscount && discountForm.valid) {\r\n              <div class=\"alert alert-info\">\r\n                <h6 class=\"mb-2\">Vista previa de precios con descuento:</h6>\r\n                <ul class=\"list-unstyled mb-0\">\r\n                  <li><strong>Bronce:</strong> ${{getPreviewDiscountedPrice(basePrices.bronce, discountValue)}} <span class=\"text-muted\">(era ${{basePrices.bronce}})</span></li>\r\n                  <li><strong>Plata:</strong> ${{getPreviewDiscountedPrice(basePrices.plata, discountValue)}} <span class=\"text-muted\">(era ${{basePrices.plata}})</span></li>\r\n                  <li><strong>Oro:</strong> ${{getPreviewDiscountedPrice(basePrices.oro, discountValue)}} <span class=\"text-muted\">(era ${{basePrices.oro}})</span></li>\r\n                </ul>\r\n              </div>\r\n            }\r\n          </form>\r\n        </div>\r\n        <div class=\"modal-footer\">\r\n          <button type=\"button\" class=\"btn btn-secondary\" (click)=\"closeDiscountModal()\" [disabled]=\"isUpdatingDiscount\">\r\n            Cancelar\r\n          </button>\r\n          <button \r\n            type=\"button\" \r\n            class=\"btn btn-primary\" \r\n            (click)=\"updateDiscount()\"\r\n            [disabled]=\"isUpdatingDiscount || discountForm.invalid\">\r\n            @if (isUpdatingDiscount) {\r\n              <span class=\"spinner-border spinner-border-sm me-2\"></span>\r\n              Actualizando...\r\n            } @else {\r\n              <i class=\"bi bi-check-lg me-1\"></i>\r\n              Actualizar Descuento\r\n            }\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n}\r\n</div>",
          "subscriptions.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { SubscriptionsComponent } from './subscriptions.component';\r\n\r\ndescribe('SubscriptionsComponent', () => {\r\n  let component: SubscriptionsComponent;\r\n  let fixture: ComponentFixture<SubscriptionsComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [SubscriptionsComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(SubscriptionsComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "subscriptions.component.ts": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserLoged } from '../../models/UserLoged';\r\nimport { SubscriptionGet } from '../../models/SubscriptionGet';\r\nimport { SubscriptionsService } from '../../services/subscriptions.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MercadoPagoService } from '../../services/mercado-pago.service';\r\nimport { UserGet } from '../../models/UserGet';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport Swal from 'sweetalert2';\r\n\r\n@Component({\r\n  selector: 'app-subscriptions',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './subscriptions.component.html',\r\n  styleUrl: './subscriptions.component.css'\r\n})\r\nexport class SubscriptionsComponent implements OnInit {\r\n  \r\n  private readonly router = inject(Router);\r\n  private readonly fb = inject(FormBuilder);\r\n  authService = inject(AuthService);\r\n  subscriptionService = inject(SubscriptionsService);\r\n  mpService = inject(MercadoPagoService);\r\n  userService = inject(UsersService);\r\n  userEmail: string = '';\r\n\r\n  userLoged: UserLoged = new UserLoged();\r\n  user: UserGet = new UserGet();\r\n  existingSubscription: SubscriptionGet = new SubscriptionGet();\r\n\r\n  currentDiscount: number = 0;\r\n  showDiscountModal: boolean = false;\r\n  isUpdatingDiscount: boolean = false;\r\n  discountForm: FormGroup;\r\n\r\n  constructor() {\r\n    this.discountForm = this.fb.group({\r\n      discount: [0, [\r\n        Validators.required,\r\n        Validators.min(0),\r\n        Validators.max(99),\r\n        Validators.pattern(/^\\d{1,3}$/)\r\n      ]]\r\n    });\r\n  }\r\n\r\n  readonly basePrices = {\r\n    bronce: 1500,\r\n    plata: 7500,\r\n    oro: 12000\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.userLoged = this.authService.getUser();\r\n    \r\n    this.loadCurrentDiscount();\r\n    \r\n    if (this.authService.hasRole('PREMIUM')) {\r\n      this.loadSubscription(this.userLoged.id);\r\n    }\r\n\r\n    this.userService.getUserById(this.userLoged.id).subscribe({\r\n      next: (data: UserGet) => {\r\n        this.user = data;\r\n        this.userEmail = this.user.email || ''; \r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading user:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadCurrentDiscount(): void {\r\n    this.subscriptionService.getSubscriptionDiscount().subscribe({\r\n      next: (discount: number) => {\r\n        this.currentDiscount = discount;\r\n        this.discountForm.patchValue({ discount: discount });\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading discount:', error);\r\n        this.currentDiscount = 0;\r\n        this.discountForm.patchValue({ discount: 0 });\r\n      }\r\n    });\r\n  }\r\n\r\n  loadSubscription(user_id: number): void {\r\n    this.subscriptionService.getSubscription(user_id).subscribe({\r\n      next: (data: SubscriptionGet) => {\r\n        this.existingSubscription = data;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading subscription:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  formatDate(dateStr: string): string {\r\n    return dateStr ? dateStr.replace(/-/g, '/') : '';\r\n  }\r\n\r\n  getDiscountedPrice(basePrice: number): number {\r\n    if (this.currentDiscount > 0) {\r\n      return Math.round(basePrice * (1 - this.currentDiscount / 100));\r\n    }\r\n    return basePrice;\r\n  }\r\n\r\n  getMonthlyPrice(basePrice: number, months: number): number {\r\n    const discountedPrice = this.getDiscountedPrice(basePrice);\r\n    return Math.round(discountedPrice / months);\r\n  }\r\n\r\n  getMonthlySavings(basePrice: number, months: number): number {\r\n    const regularMonthlyPrice = this.getDiscountedPrice(this.basePrices.bronce);\r\n    const discountedMonthlyPrice = this.getMonthlyPrice(basePrice, months);\r\n    return regularMonthlyPrice - discountedMonthlyPrice;\r\n  }\r\n\r\n  getPreviewDiscountedPrice(basePrice: number, discount: number): number {\r\n    if (discount > 0) {\r\n      return Math.round(basePrice * (1 - discount / 100));\r\n    }\r\n    return basePrice;\r\n  }\r\n\r\n  get discountValue(): number {\r\n    return this.discountForm.get('discount')?.value || 0;\r\n  }\r\n\r\n  get discountControl() {\r\n    return this.discountForm.get('discount');\r\n  }\r\n\r\n  get isDiscountInvalid(): boolean {\r\n    return this.discountControl?.invalid && (this.discountControl?.dirty || this.discountControl?.touched) || false;\r\n  }\r\n\r\n  get discountErrorMessage(): string {\r\n    const control = this.discountControl;\r\n    if (control?.hasError('required')) {\r\n      return 'El descuento es requerido';\r\n    }\r\n    if (control?.hasError('min')) {\r\n      return 'El descuento no puede ser menor a 0';\r\n    }\r\n    if (control?.hasError('max')) {\r\n      return 'El descuento no puede ser mayor a 99';\r\n    }\r\n    if (control?.hasError('pattern')) {\r\n      return 'Ingrese solo números enteros';\r\n    }\r\n    return '';\r\n  }\r\n\r\n  isAdmin(): boolean {\r\n    return this.authService.hasRole('ADMIN');\r\n  }\r\n\r\n  openDiscountModal(): void {\r\n    this.discountForm.patchValue({ discount: this.currentDiscount });\r\n    this.showDiscountModal = true;\r\n  }\r\n\r\n  closeDiscountModal(): void {\r\n    this.showDiscountModal = false;\r\n    this.discountForm.patchValue({ discount: this.currentDiscount });\r\n    this.discountForm.markAsUntouched();\r\n  }\r\n\r\n  updateDiscount(): void {\r\n    if (this.discountForm.invalid) {\r\n      this.discountForm.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    const newDiscountValue = this.discountValue;\r\n    this.isUpdatingDiscount = true;\r\n    \r\n    this.subscriptionService.putSuscriptionDiscount(newDiscountValue).subscribe({\r\n      next: () => {\r\n        this.currentDiscount = newDiscountValue;\r\n        this.closeDiscountModal();\r\n        this.isUpdatingDiscount = false;\r\n        Swal.fire({\r\n          title: 'Descuento actualizado',\r\n          text: `El descuento se ha actualizado a ${newDiscountValue}%`,\r\n          icon: 'success',\r\n          showConfirmButton:false,\r\n          timer: 2000\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error('Error updating discount:', error);\r\n        this.isUpdatingDiscount = false;\r\n        Swal.fire({\r\n          title: 'Error al actualizar el descuento',\r\n          text: 'Por favor, intente nuevamente más tarde.',\r\n          icon: 'error',\r\n          showConfirmButton: false,\r\n          timer: 2000\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  pay(nombre: string, monto: number): void {\r\n    const email = this.userEmail;\r\n    const discountedAmount = this.getDiscountedPrice(monto);\r\n\r\n    this.mpService.createPayment(discountedAmount, nombre, email, this.userLoged.id.toString()).subscribe({\r\n      next: (response) => {\r\n        this.authService.logOut();\r\n        window.location.href = response.initPoint;\r\n      },\r\n      error: (error) => {\r\n        console.error('Error al generar la preferencia de pago:', error);\r\n      }\r\n    });\r\n  }\r\n}"
        },
        "unauthorized": {
          "unauthorized.component.css": "  .fondo-gris{\r\n    background-color: #f8f9fa;\r\n  }\r\n",
          "unauthorized.component.html": "<div class=\"fondo-gris\" style=\"min-height: 100vh;\">\r\n    <h1>401 - No Autorizado</h1>\r\n    <p>No tienes permisos para acceder a esta página.</p>\r\n\r\n    <p class=\"mt-5\"> Será redirigido a la página principal en {{timeLeft}}</p>\r\n</div>\r\n\r\n",
          "unauthorized.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { UnauthorizedComponent } from './unauthorized.component';\r\n\r\ndescribe('UnauthorizedComponent', () => {\r\n  let component: UnauthorizedComponent;\r\n  let fixture: ComponentFixture<UnauthorizedComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [UnauthorizedComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(UnauthorizedComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "unauthorized.component.ts": "import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-unauthorized',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './unauthorized.component.html',\r\n  styleUrl: './unauthorized.component.css'\r\n})\r\nexport class UnauthorizedComponent implements OnInit {\r\n\r\n  timeLeft: number = 5; // Segundos para la cuenta regresiva\r\n  intervalId: any; // Guardará el ID del intervalo\r\n\r\n  constructor(private router: Router) { }\r\n\r\n   startCountdown(): void {\r\n    this.intervalId = setInterval(() => {\r\n      if (this.timeLeft > 0) {\r\n        this.timeLeft--;\r\n      } else {\r\n        clearInterval(this.intervalId); // Detenemos el intervalo\r\n        this.router.navigate(['home']);\r\n      }\r\n    }, 1000); // Cada segundo\r\n\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.startCountdown();\r\n  }\r\n\r\n}\r\n"
        },
        "update-personal-data": {
          "update-personal-data.component.css": "",
          "update-personal-data.component.html": "<!-- Modal visible automáticamente -->\r\n<div *ngIf=\"modalVisible\" class=\"modal fade show d-block\" tabindex=\"-1\"\r\n     style=\"background-color: rgba(0, 0, 0, 0.5);\">\r\n  <div class=\"modal-dialog modal-dialog-centered\">\r\n    <div class=\"modal-content\">\r\n\r\n      <!-- Header con botón cerrar -->\r\n      <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Editar Datos Personales</h5>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"close()\" aria-label=\"Cerrar\"></button>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n          <div class=\"form-check mb-3\">\r\n            <label class=\"form-check-label\" for=\"isCompany\">¿Es empresa?</label>\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"isCompany\" formControlName=\"isCompany\">\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">{{ isCompany ? 'Nombre de empresa:' : 'Nombre:' }}</label>\r\n            <input type=\"text\" class=\"form-control\"\r\n              formControlName=\"name\"\r\n              [ngClass]=\"onValidate('name')\">\r\n            <div class=\"invalid-feedback\">{{ showError('name') }}</div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\" *ngIf=\"!isCompany\">\r\n            <label class=\"form-label\">Apellido:</label>\r\n            <input type=\"text\" class=\"form-control\"\r\n              formControlName=\"surname\"\r\n              [ngClass]=\"onValidate('surname')\">\r\n            <div class=\"invalid-feedback\">{{ showError('surname') }}</div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Email:</label>\r\n            <input type=\"email\" class=\"form-control\"\r\n              formControlName=\"email\"\r\n              [ngClass]=\"onValidate('email')\">\r\n            <div class=\"invalid-feedback\">{{ showError('email') }}</div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Ubicación:</label>\r\n            <ng-select \r\n              [items]=\"locations\"\r\n              bindLabel=\"description\"\r\n              bindValue=\"id\"\r\n              [clearable]=\"true\"\r\n              placeholder=\"Seleccione una ubicación\"\r\n              formControlName=\"location_id\"\r\n              [ngClass]=\"onValidate('location_id')\">\r\n            </ng-select>\r\n            <div class=\"invalid-feedback\">{{ showError('location_id') }}</div>\r\n          </div>\r\n\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\">Cancelar</button>\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">Guardar Cambios</button>\r\n          </div>\r\n\r\n        </form>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>\r\n",
          "update-personal-data.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { UpdatePersonalDataComponent } from './update-personal-data.component';\r\n\r\ndescribe('UpdatePersonalDataComponent', () => {\r\n  let component: UpdatePersonalDataComponent;\r\n  let fixture: ComponentFixture<UpdatePersonalDataComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [UpdatePersonalDataComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(UpdatePersonalDataComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "update-personal-data.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport Swal from 'sweetalert2';\r\nimport { PersonalDataPut } from '../../models/PersonalDataPut';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { UserGet } from '../../models/UserGet';\r\nimport { ValidatorService } from '../../services/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-update-personal-data',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule,NgSelectModule],\r\n  templateUrl: './update-personal-data.component.html',\r\n  styleUrl: './update-personal-data.component.css'\r\n})\r\nexport class UpdatePersonalDataComponent implements OnInit {\r\n\r\n  @Input() userId!: number;\r\n  @Input() userData!: UserGet;\r\n  @Output() closeModal = new EventEmitter<void>();\r\n\r\n  form!: FormGroup;\r\n  isCompany = false;\r\n  locations: any[] = [];\r\n  modalVisible = true;\r\n  lastValidSurname = '';\r\n\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UsersService,\r\n    private locationService: UtilsService,\r\n    private validatorService: ValidatorService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isCompany = this.isACompany(this.userData.surname ?? '');\r\n\r\n    this.form = this.fb.group({\r\n      name: [this.userData.name, [Validators.required, Validators.minLength(2), Validators.maxLength(15)]],\r\n      surname: [this.userData.surname ?? '', [Validators.maxLength(15)]],\r\n      email: [this.userData.email, [Validators.required, Validators.email],[this.validatorService.validateUniqueEmailExceptCurrent(this.userId)]],\r\n      location_id: [null],\r\n      isCompany: [this.isCompany]\r\n    });\r\n\r\n    this.loadLocations();\r\n    this.lastValidSurname = this.userData.surname ?? '';\r\n\r\n  this.form.get('isCompany')?.valueChanges.subscribe(value => {\r\n  this.isCompany = value;\r\n\r\n  const surnameControl = this.form.get('surname');\r\n\r\n  if (value) {\r\n    if (surnameControl?.enabled) {\r\n      this.lastValidSurname = surnameControl.value;\r\n    }\r\n    surnameControl?.disable();\r\n    surnameControl?.setValue('');\r\n  } else {\r\n    surnameControl?.enable();\r\n    surnameControl?.setValue(this.lastValidSurname);\r\n  }\r\n});\r\n  }\r\n\r\nloadLocations() {\r\n  this.locationService.getLocations().subscribe({\r\n    next: (data) => {\r\n      this.locations = data;\r\n\r\n      const matchedLocation = this.locations.find(loc => loc.description === this.userData.location);\r\n      if (matchedLocation) {\r\n        this.form.patchValue({ location_id: matchedLocation.id });\r\n      }\r\n    },\r\n    error: (error) => {\r\n      console.log('Error loading locations:', error);\r\n    }\r\n  });\r\n}\r\n\r\n  isACompany(surname: string): boolean {\r\n    if (!surname || surname === \"\") {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control.dirty || control.touched),\r\n      'is-valid': control?.valid\r\n    };\r\n  }\r\n\r\n  close() {\r\n    this.modalVisible = false;\r\n    this.closeModal.emit();\r\n  }\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.form.get(controlName);\r\n\r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo no puede estar vacío.';\r\n        case 'minlength':\r\n          return `Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'email':\r\n          return 'Formato de email inválido.';\r\n        case 'emailTaken':\r\n          return 'El email ya está en uso.';\r\n        default:\r\n          return 'Campo inválido.';\r\n      }\r\n    }\r\n\r\n    return '';\r\n  }\r\n\r\nonSubmit() {\r\n  if (this.form.invalid) return;\r\n\r\n  console.log('isCompany:', this.isCompany);\r\n  console.log('surname value:', this.form.get('surname')!.value);\r\n\r\n  const isCompanyValue = this.form.get('isCompany')!.value;\r\n  const surnameValue = this.form.get('surname')!.value;\r\n\r\n  const dto: PersonalDataPut = {\r\n    name: this.form.get('name')!.value,\r\n    email: this.form.get('email')!.value,\r\n    location_id: this.form.get('location_id')!.value,\r\n    surname: isCompanyValue ? undefined : surnameValue\r\n  };\r\n\r\n    this.userService.updatePersonalData(dto, this.userId).subscribe({\r\n      next: () => {\r\n        Swal.fire({\r\n          title: 'Datos actualizados',\r\n          text: 'Se actualizaron correctamente los datos personales',\r\n          icon: 'success',\r\n          timer: 2000,\r\n          showConfirmButton: false  \r\n        }).then(() => {\r\n          this.close();\r\n        });\r\n      },\r\n      error: () => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudieron actualizar los datos personales',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"
        },
        "update-user": {
          "update-user.component.css": "",
          "update-user.component.html": "<div class=\"modal fade show d-block\" tabindex=\"-1\"\r\n     style=\"background-color: rgba(0, 0, 0, 0.5);\">\r\n  <div class=\"modal-dialog modal-dialog-centered modal-lg\">\r\n    <div class=\"modal-content\">\r\n\r\n    <div class=\"modal-header\">\r\n        <h5 class=\"modal-title\">Editar Usuario (Admin)</h5>\r\n        <button type=\"button\" class=\"btn-close\" (click)=\"close()\" aria-label=\"Cerrar\"></button>\r\n      </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n\r\n          <div class=\"form-check mb-3\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"isCompany\" formControlName=\"isCompany\">\r\n            <label class=\"form-check-label\" for=\"isCompany\">¿Es empresa?</label>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 mb-3\">\r\n              <label class=\"form-label\">{{ isCompany ? 'Nombre de empresa:' : 'Nombre:' }}</label>\r\n              <input type=\"text\" class=\"form-control\"\r\n                formControlName=\"name\"\r\n                [ngClass]=\"onValidate('name')\">\r\n              <div class=\"invalid-feedback\">{{ showError('name') }}</div>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 mb-3\" *ngIf=\"!isCompany\">\r\n              <label class=\"form-label\">Apellido:</label>\r\n              <input type=\"text\" class=\"form-control\"\r\n                formControlName=\"surname\"\r\n                [ngClass]=\"onValidate('surname')\">\r\n              <div class=\"invalid-feedback\">{{ showError('surname') }}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row\">\r\n            <div class=\"col-md-6 mb-3\">\r\n              <label class=\"form-label\">Nombre de usuario:</label>\r\n              <input type=\"text\" class=\"form-control\" \r\n                formControlName=\"username\"\r\n                readonly\r\n                style=\"background-color: #f8f9fa; cursor: not-allowed;\">\r\n              <small class=\"text-muted\">El nombre de usuario no se puede modificar</small>\r\n            </div>\r\n\r\n            <div class=\"col-md-6 mb-3\">\r\n              <label class=\"form-label\">Email: </label>\r\n              <input type=\"email\" class=\"form-control\"\r\n                formControlName=\"email\"\r\n                [ngClass]=\"onValidate('email')\">\r\n              <div class=\"invalid-feedback\">{{ showError('email') }}</div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Ubicación: </label>\r\n            <ng-select \r\n              [items]=\"locations\"\r\n              bindLabel=\"description\"\r\n              bindValue=\"id\"\r\n              [clearable]=\"true\"\r\n              placeholder=\"Seleccione una ubicación\"\r\n              formControlName=\"location_id\"\r\n              [ngClass]=\"onValidate('location_id')\">\r\n            </ng-select>\r\n            <div class=\"invalid-feedback d-block\" *ngIf=\"form.get('location_id')?.invalid && (form.get('location_id')?.dirty || form.get('location_id')?.touched)\">\r\n              {{ showError('location_id') }}\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"mb-3\">\r\n            <label class=\"form-label\">Roles: </label>\r\n            <ng-select \r\n              [items]=\"roles\"\r\n              bindLabel=\"description\"\r\n              bindValue=\"id\"\r\n              [multiple]=\"true\"\r\n              [clearable]=\"true\"\r\n              placeholder=\"Seleccione uno o más roles\"\r\n              formControlName=\"roles\"\r\n              [ngClass]=\"onValidate('roles')\">\r\n            </ng-select>\r\n            <div class=\"invalid-feedback d-block\" *ngIf=\"form.get('roles')?.invalid && (form.get('roles')?.dirty || form.get('roles')?.touched)\">\r\n              {{ showError('roles') }}\r\n            </div>\r\n            <small class=\"text-muted\">Puede seleccionar múltiples roles</small>\r\n          </div>\r\n\r\n          <div class=\"modal-footer\">\r\n            <button type=\"button\" class=\"btn btn-secondary\" (click)=\"close()\">Cancelar</button>\r\n            <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"form.invalid\">\r\n              <i class=\"fas fa-save me-1\"></i>\r\n              Guardar Cambios\r\n            </button>\r\n          </div>\r\n\r\n        </form>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</div>",
          "update-user.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { UpdateUserComponent } from './update-user.component';\r\n\r\ndescribe('UpdateUserComponent', () => {\r\n  let component: UpdateUserComponent;\r\n  let fixture: ComponentFixture<UpdateUserComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [UpdateUserComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(UpdateUserComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "update-user.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { UtilsService } from '../../services/utils.service';\r\nimport Swal from 'sweetalert2';\r\nimport { UserUpdateAdmin } from '../../models/UserUpdateAdmin';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { UserGet } from '../../models/UserGet';\r\nimport { ValidatorService } from '../../services/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-update-user',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule, NgSelectModule],\r\n  templateUrl: './update-user.component.html',\r\n  styleUrl: './update-user.component.css'\r\n})\r\nexport class UpdateUserComponent implements OnInit {\r\n  @Input() userId!: number;\r\n  @Input() userData!: UserGet;\r\n  @Output() closeModal = new EventEmitter<void>();\r\n\r\n  form!: FormGroup;\r\n  isCompany = false;\r\n  locations: any[] = [];\r\n  roles: any[] = [];\r\n  lastValidSurname = '';\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private userService: UsersService,\r\n    private locationService: UtilsService,\r\n    private validatorService: ValidatorService,\r\n    private utilsService: UtilsService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.isCompany = this.isACompany(this.userData.surname ?? '');\r\n\r\n    this.form = this.fb.group({\r\n      name: [this.userData.name, [Validators.required, Validators.minLength(2), Validators.maxLength(50)]],\r\n      surname: [this.userData.surname ?? '', [Validators.maxLength(50)]],\r\n      username: [{value: this.userData.username, disabled: true}],\r\n      email: [this.userData.email, [Validators.required, Validators.email], [this.validatorService.validateUniqueEmailExceptCurrent(this.userId)]],\r\n      location_id: [null, [Validators.required]],\r\n      avatar_url: [this.userData.avatar_url ?? ''],\r\n      roles: [[], [Validators.required]],\r\n      isCompany: [this.isCompany]\r\n    });\r\n\r\n    this.loadLocations();\r\n    this.loadRoles();\r\n    this.lastValidSurname = this.userData.surname ?? '';\r\n\r\n    this.form.get('isCompany')?.valueChanges.subscribe(value => {\r\n      this.isCompany = value;\r\n      const surnameControl = this.form.get('surname');\r\n\r\n      if (value) {\r\n        if (surnameControl?.enabled) {\r\n          this.lastValidSurname = surnameControl.value;\r\n        }\r\n        surnameControl?.disable();\r\n        surnameControl?.setValue('');\r\n        surnameControl?.clearValidators();\r\n      } else {\r\n        surnameControl?.enable();\r\n        surnameControl?.setValue(this.lastValidSurname);\r\n        surnameControl?.setValidators([Validators.maxLength(50)]);\r\n      }\r\n      surnameControl?.updateValueAndValidity();\r\n    });\r\n  }\r\n\r\n  loadLocations() {\r\n    this.locationService.getLocations().subscribe({\r\n      next: (data) => {\r\n        this.locations = data;\r\n        const matchedLocation = this.locations.find(loc => loc.description === this.userData.location);\r\n        if (matchedLocation) {\r\n          this.form.patchValue({ location_id: matchedLocation.id });\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.log('Error loading locations:', error);\r\n      }\r\n    });\r\n  }\r\n\r\nloadRoles() {\r\n  this.utilsService.getRoles().subscribe({\r\n    next: (data) => {\r\n      this.roles = data.filter(role => role.description !== 'PREMIUM');\r\n\r\n      if (Array.isArray(this.userData.roles) && this.userData.roles.length > 0) {\r\n        const matchedRoleIds = this.roles\r\n          .filter(role => this.userData.roles.includes(role.description))\r\n          .map(role => role.id);\r\n\r\n        if (matchedRoleIds.length > 0) {\r\n          this.form.patchValue({ roles: matchedRoleIds });\r\n        }\r\n      }\r\n    },\r\n    error: (error) => {\r\n      console.log('Error loading roles:', error);\r\n    }\r\n  });\r\n}\r\n\r\n  isACompany(surname: string): boolean {\r\n    return !surname || surname === \"\";\r\n  }\r\n\r\n  onValidate(controlName: string) {\r\n    const control = this.form.get(controlName);\r\n    return {\r\n      'is-invalid': control?.invalid && (control.dirty || control.touched),\r\n      'is-valid': control?.valid && (control.dirty || control.touched)\r\n    };\r\n  }\r\n\r\n  close() {\r\n    this.closeModal.emit(); // Solo emitir el evento\r\n  }\r\n\r\n  showError(controlName: string): string {\r\n    const control = this.form.get(controlName);\r\n\r\n    if (control && control.errors) {\r\n      const [errorKey] = Object.keys(control.errors);\r\n      switch (errorKey) {\r\n        case 'required':\r\n          return 'Este campo es obligatorio.';\r\n        case 'minlength':\r\n          return `Mínimo ${control.errors['minlength'].requiredLength} caracteres.`;\r\n        case 'maxlength':\r\n          return `Máximo ${control.errors['maxlength'].requiredLength} caracteres.`;\r\n        case 'email':\r\n          return 'Formato de email inválido.';\r\n        case 'emailTaken':\r\n          return 'El email ya está en uso.';\r\n        case 'usernameTaken':\r\n          return 'El nombre de usuario ya está en uso.';\r\n        default:\r\n          return 'Campo inválido.';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched();\r\n      return;\r\n    }\r\n\r\n    const isCompanyValue = this.form.get('isCompany')!.value;\r\n    const surnameValue = this.form.get('surname')!.value;\r\n\r\n    const dto: UserUpdateAdmin = new UserUpdateAdmin(\r\n      this.form.get('name')!.value,\r\n      isCompanyValue ? '' : surnameValue,\r\n      this.form.get('email')!.value,\r\n      this.form.get('location_id')!.value,\r\n      this.form.get('roles')!.value\r\n    );\r\n\r\n    this.userService.putUser(dto, this.userId).subscribe({\r\n      next: () => {\r\n        Swal.fire({\r\n          title: 'Usuario actualizado',\r\n          text: 'Se actualizaron correctamente los datos del usuario',\r\n          icon: 'success',\r\n          timer: 2000,\r\n          showConfirmButton: false  \r\n        }).then(() => {\r\n          this.close(); // Cerrar el modal después del éxito\r\n        });\r\n      },\r\n      error: (error) => {\r\n        console.error('Error updating user:', error);\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudieron actualizar los datos del usuario',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n}"
        },
        "users-list": {
          "users-list.component.css": "\r\n.pagination .page-link {\r\n  background-color: transparent;\r\n  border: none;\r\n  color: #6c757d; \r\n  text-decoration: none;\r\n  cursor: pointer;\r\n  font-size: 0.8rem;\r\n  border-radius: 0.50rem;\r\n}\r\n\r\n.pagination .page-link:hover {\r\n  text-decoration: underline;\r\n  color: var(--bs-primary); \r\n  background-color: transparent;\r\n}\r\n\r\n.pagination .page-item.active .page-link {\r\n  background-color: #fff;\r\n  border: 1px solid var(--bs-primary);\r\n  color: var(--bs-primary);\r\n  font-weight: 600;\r\n}\r\n\r\n.pagination .page-link:focus {\r\n  box-shadow: none;\r\n}\r\n\r\n.pagination .page-item.disabled .page-link {\r\n  color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n.list-group-item{\r\n  animation: fadeInUp 0.6s ease-out;\r\n}\r\n\r\n@keyframes fadeInUp {\r\n  from {\r\n    opacity: 0;\r\n    transform: translateY(20px);\r\n  }\r\n  to {\r\n    opacity: 1;\r\n    transform: translateY(0);\r\n  }\r\n}\r\n",
          "users-list.component.html": "<div class=\"fondo-gris py-4 min-vh-100\">\r\n  <div class=\"container\">\r\n    <!-- Título -->\r\n    <div class=\"row mb-2\">\r\n      <div class=\"col-12\">\r\n        <h2 class=\"fw-bold text-primary\">Administrar Usuarios</h2>\r\n        <p class=\"text-muted\">Gestiona todas las cuentas de la plataforma</p>\r\n      </div>\r\n    </div>\r\n    <!-- Filtros -->\r\n    <div\r\n      class=\"d-flex flex-wrap gap-2 bg-white p-3 shadow justify-content-between align-items-center mb-3\"\r\n      [formGroup]=\"form\"\r\n      style=\"border-radius: 10px;\"\r\n    >\r\n      <!-- Búsqueda -->\r\n      <div class=\"position-relative flex-grow-1\" style=\"min-width: 260px; max-width: 350px;\">\r\n        <input\r\n          class=\"form-control pe-5 form-control-sm\"\r\n          type=\"text\"\r\n          placeholder=\"Nombre, email o ubicación...\"\r\n          formControlName=\"searchTerm\"\r\n          style=\"border-radius: 20px;\"\r\n        />\r\n        <span class=\"position-absolute top-50 end-0 translate-middle-y me-3 text-secondary\">\r\n          <span style=\"margin-right: 8px;\">|</span>\r\n          <i class=\"bi bi-search\"></i>\r\n        </span>\r\n      </div>\r\n\r\n      <!-- Estado -->\r\n      <div class=\"d-flex align-items-center\" style=\"gap: 5px;\">\r\n        <small class=\"me-1\">Estado</small>\r\n        <ng-select\r\n          [items]=\"statusOptions\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"active\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"min-width: 100px; font-size: 0.8rem;\"\r\n        ></ng-select>\r\n      </div>\r\n\r\n      <!-- Verificación -->\r\n      <div class=\"d-flex align-items-center\" style=\"gap: 5px;\">\r\n        <small class=\"me-1\">Verificación</small>\r\n        <ng-select\r\n          [items]=\"verifiedOptions\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"verified\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"min-width: 100px; font-size: 0.8rem;\"\r\n        ></ng-select>\r\n      </div>\r\n\r\n      <!-- Roles -->\r\n      <div class=\"d-flex align-items-center\" style=\"gap: 5px;\">\r\n        <small class=\"me-1\">Rol</small>\r\n        <ng-select\r\n          [items]=\"roleOptions\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          formControlName=\"roles\"\r\n          [multiple]=\"true\"\r\n          placeholder=\"Todos\"\r\n          class=\"ng-select-sm\"\r\n          [searchable]=\"false\"\r\n          style=\"min-width: 120px; font-size: 0.8rem;\"\r\n        ></ng-select>\r\n      </div>\r\n\r\n      <!-- Ordenar por -->\r\n      <div class=\"d-flex align-items-center\" style=\"gap: 5px;\">\r\n        <small class=\"me-1\">Ordenar por</small>\r\n        <ng-select\r\n          [items]=\"sortOptions\"\r\n          bindLabel=\"label\"\r\n          bindValue=\"value\"\r\n          [ngModel]=\"'created_at'\"\r\n          formControlName=\"sortBy\"\r\n          class=\"ng-select-sm\"\r\n          [clearable]=\"false\"\r\n          [searchable]=\"false\"\r\n          style=\"min-width: 110px; font-size: 0.8rem;\"\r\n        ></ng-select>\r\n        <button\r\n          type=\"button\"\r\n          class=\"btn btn-outline-primary btn-sm\"\r\n          title=\"Ordenar ascendente o descendente\"\r\n          (click)=\"toggleSortDirection()\"\r\n        >\r\n          <i class=\"bi\" [ngClass]=\"sortDir === 'desc' ? 'bi-arrow-up' : 'bi-arrow-down'\"></i>\r\n        </button>\r\n      </div>\r\n\r\n      <button\r\n        type=\"button\"\r\n        class=\"btn btn-outline-secondary btn-sm\"\r\n        (click)=\"clearFilters()\"\r\n        title=\"Limpiar filtros\"\r\n        style=\"width: 35px; height: 35px; display: flex; align-items: center; justify-content: center;\"\r\n      >\r\n        <i class=\"bi bi-trash\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    @if (users.length === 0) {\r\n      <div class=\"alert alert-secondary\">No hay usuarios para mostrar.</div>\r\n    } @else {\r\n      <!-- Encabezados -->\r\n      <div class=\"row fw-bold text-secondary mb-2 d-none d-md-flex align-items-center\">\r\n        <div class=\"col-2 col-sm-1 text-end\">Avatar</div>\r\n        <div class=\"col-10 col-sm-4 col-md-3 text-center\">Nombre,correo,usuario y ubicación</div>\r\n        <div class=\"col-6 col-sm-3 col-md-2 text-center\">Rol</div>\r\n        <div class=\"col-6 col-sm-2 col-md-2 text-center\">Estado</div>\r\n        <div class=\"col-6 col-sm-2 col-md-2 text-center\">Fecha de registro</div>\r\n        <div class=\"col-6 col-sm-1 col-md-1 text-center\">Acciones</div>\r\n      </div>\r\n\r\n      <!-- Lista de usuarios -->\r\n      <div class=\"list-group\">\r\n        @for (user of users; track user.id) {\r\n          @if (user.id !== currentUserId) {\r\n          <div\r\n            [class.border-success]=\"user.active\"\r\n            [class.border-danger]=\"!user.active\"\r\n            class=\"list-group-item mb-2 border rounded shadow-sm\"\r\n            style=\"cursor: pointer;\"\r\n            (click)=\"viewUserDetails(user); closeDropdown(); $event.stopPropagation()\"\r\n          >\r\n            <div class=\"row align-items-center\">\r\n              <!-- Avatar -->\r\n              <div class=\"col-2 col-sm-1 d-flex align-items-center justify-content-center\">\r\n                <ng-container *ngIf=\"user.avatar_url && user.avatar_url.trim() !== ''; else showInitials\">\r\n                  <img\r\n                    [src]=\"getAvatarUrl(user)\"\r\n                    [alt]=\"user.name + ' ' + user.surname\"\r\n                    class=\"rounded-circle\"\r\n                    style=\"width: 50px; height: 50px; object-fit: cover;\"\r\n                  />\r\n                </ng-container>\r\n                <ng-template #showInitials>\r\n                  <div\r\n                    class=\"rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-2\"\r\n                    style=\"width: 50px; height: 50px; font-size: 20px; border: 1px solid black;\"\r\n                  >\r\n                    {{ getInitials(user) }}\r\n                  </div>\r\n                </ng-template>\r\n              </div>\r\n\r\n              <!-- Nombre y correo -->\r\n              <div class=\"col-10 col-sm-4 col-md-3\">\r\n                <h6 class=\"mb-1\">\r\n                  {{ user.name }} {{ user.surname }}\r\n                  <i class=\"bi\" [class]=\"user.verified ? 'bi bi-patch-check-fill text-info' : ''\"></i>\r\n                </h6>\r\n                <small class=\"text-muted\"><i class=\"bi bi-envelope\"></i> {{ user.email }}  / {{user.username}}</small>\r\n                @if (user.location) {\r\n                  <br />\r\n                  <small class=\"text-muted\">\r\n                    <i class=\"bi bi-geo-alt text-danger\"></i> {{ user.location }}\r\n                  </small>\r\n                }\r\n              </div>\r\n\r\n              <!-- Rol -->\r\n              <div class=\"col-6 col-sm-3 col-md-2 text-center\">\r\n                <span class=\"badge mb-1\" [class]=\"getRoleBadgeClass(user.roles)\">\r\n                  {{ getRoleDisplayName(user.roles) }}\r\n                </span>\r\n              </div>\r\n\r\n              <!-- Estado -->\r\n              <div class=\"col-6 col-sm-2 col-md-2 text-center\">\r\n                <span class=\"badge\" [class]=\"user.active ? 'bg-success' : 'bg-danger'\">\r\n                  {{ user.active ? 'Activo' : 'Inactivo' }}\r\n                </span>\r\n              </div>\r\n\r\n              <!-- Fecha de registro -->\r\n              <div class=\"col-6 col-sm-2 col-md-2 text-center\">\r\n                <small class=\"text-muted\">\r\n                  <i class=\"bi bi-calendar\"></i> {{ formatDate(user.created_at) }}\r\n                </small>\r\n                <br />\r\n                <small class=\"text-muted\">\r\n                  Hace {{ getDaysByDate(user.created_at) }} días\r\n                </small>\r\n              </div>\r\n\r\n              <!-- Acciones -->\r\n              <div class=\"col-6 col-sm-1 col-md-1 text-end position-relative\">\r\n                <button\r\n                  class=\"btn btn-outline-primary btn-sm\"\r\n                  type=\"button\"\r\n                  (click)=\"toggleDropdown(user.id); $event.stopPropagation()\"\r\n                  [attr.aria-expanded]=\"dropdownOpenId === user.id\"\r\n                  title=\"Acciones\"\r\n                  style=\"width: 30px; height: 30px; align-items: center; justify-content: center;\"\r\n                >\r\n                  <i class=\"bi bi-three-dots-vertical\"></i>\r\n                </button>\r\n                <ul\r\n                  class=\"dropdown-menu dropdown-menu-end\"\r\n                  [class.show]=\"dropdownOpenId === user.id\"\r\n                  style=\"position: absolute; top: 100%; right: 0; z-index: 1000;\"\r\n                >\r\n                 <li>\r\n                    <button\r\n                      class=\"dropdown-item\"\r\n                      (click)=\"viewUserDetails(user); closeDropdown(); $event.stopPropagation()\"\r\n                    >\r\n                      <i class=\"bi bi-eye me-2\"></i> Ver más\r\n                    </button>\r\n                </li>\r\n                \r\n                  <li>\r\n                    <button class=\"dropdown-item\"\r\n                            (click)=\"editUser(user); $event.stopPropagation()\">\r\n                      <i class=\"bi bi-pencil-square me-2\"></i> Editar\r\n                    </button>\r\n                </li>\r\n                  <li>\r\n                    @if(user.verified) {\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"unverifyUser(user.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-patch-check-fill text-danger me-2\"></i> Desverificar\r\n                      </button>\r\n                    } @else {\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"verifyUser(user.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-patch-check-fill text-info me-2\"></i> Verificar\r\n                      </button>\r\n                    }\r\n                  </li>\r\n                  <li>\r\n                    @if(user.active) {\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"deleteUser(user.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-x-circle text-danger me-2\"></i> Dar de baja\r\n                      </button>\r\n                    } @else {\r\n                      <button\r\n                        class=\"dropdown-item\"\r\n                        (click)=\"activateUser(user.id); closeDropdown(); $event.stopPropagation()\"\r\n                      >\r\n                        <i class=\"bi bi-arrow-clockwise text-success me-2\"></i> Reactivar\r\n                      </button>\r\n                    }\r\n                  </li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n      }\r\n      </div>\r\n    }\r\n\r\n  <div class=\"d-flex justify-content-between align-items-center mb-3\">\r\n    <div>\r\n      <span class=\"text-muted\">Mostrando {{ users.length }} de {{ totalItems || 0 }} resultados</span>\r\n    </div>\r\n    <div class=\"d-flex align-items-center\">\r\n      <small class=\"me-2\">Mostrar</small>\r\n      <ng-select\r\n        [items]=\"[\r\n          { label: '5', value: 5 },\r\n          { label: '10', value: 10 },\r\n          { label: '25', value: 25 },\r\n          { label: '50', value: 50 }\r\n        ]\"\r\n        bindLabel=\"label\"\r\n        bindValue=\"value\"\r\n        [ngModel]=\"size\"\r\n        (ngModelChange)=\"changePageSize($event)\"\r\n        class=\"ng-select-sm\"\r\n        [clearable]=\"false\"\r\n        [searchable]=\"false\"\r\n        style=\"width: auto; min-width: 60px;\"\r\n      >\r\n      </ng-select>\r\n      <small class=\"ms-2\">por página</small>\r\n    </div>\r\n  </div>\r\n\r\n    <!-- Paginación -->\r\n    <nav *ngIf=\"totalPages > 0\" class=\"d-flex justify-content-center\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" [class.disabled]=\"page === 1\">\r\n          <small class=\"page-link\" style=\"font-size: 0.8rem\" (click)=\"page > 1 && changePage(page - 1)\">\r\n            <i class=\"bi bi-chevron-left\"></i> Anterior\r\n          </small>\r\n        </li>\r\n        <li\r\n          class=\"page-item\"\r\n          *ngFor=\"let p of getPages()\"\r\n          [class.active]=\"p === page\"\r\n        >\r\n          <span class=\"page-link\" (click)=\"changePage(p)\">{{ p }}</span>\r\n        </li>\r\n        <li class=\"page-item\" [class.disabled]=\"page === totalPages\">\r\n          <small class=\"page-link\" style=\"font-size: 0.8rem\" (click)=\"page < totalPages && changePage(page + 1)\">\r\n            Siguiente <i class=\"bi bi-chevron-right\"></i>\r\n          </small>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </div>\r\n<app-update-user\r\n  *ngIf=\"showModal && selectedUserId && selectedUserData\"\r\n  [userId]=\"selectedUserId\" \r\n  [userData]=\"selectedUserData\"\r\n  (closeModal)=\"onModalClosed()\">\r\n</app-update-user>\r\n</div>\r\n",
          "users-list.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { UsersListComponent } from './users-list.component';\r\n\r\ndescribe('UsersListComponent', () => {\r\n  let component: UsersListComponent;\r\n  let fixture: ComponentFixture<UsersListComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [UsersListComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(UsersListComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "users-list.component.ts": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { PipesModule } from '../../pipes/pipes.module';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\nimport { UserGet } from '../../models/UserGet';\r\nimport Swal from 'sweetalert2';\r\nimport { UserFilterDto } from '../../models/UserFilterDto';\r\nimport { Router } from '@angular/router';\r\nimport { UsersService } from '../../services/users.service';\r\nimport { NgSelectComponent } from '@ng-select/ng-select';\r\nimport { AuthService } from '../../services/auth.service';\r\nimport { UpdateUserComponent } from '../update-user/update-user.component';\r\n\r\n@Component({\r\n  selector: 'app-users-list',\r\n  standalone: true,\r\n  imports: [FormsModule, CommonModule, ReactiveFormsModule, PipesModule, NgSelectModule, UpdateUserComponent],\r\n  templateUrl: './users-list.component.html',\r\n  styleUrl: './users-list.component.css'\r\n})\r\nexport class UsersListComponent implements OnInit {\r\n  form: FormGroup;\r\n  users: UserGet[] = [];\r\n  totalItems = 0;\r\n  totalPages = 0;\r\n  currentUserId: number | null = null;\r\n  sortDir: 'desc' | 'asc' = 'desc';\r\n  page = 1;\r\n  size = 10;\r\n  dropdownOpenId: number | null = null;\r\n\r\n  selectedUserId: number | null = null;\r\n  selectedUserData: UserGet | null = null;\r\n  showModal = false;\r\n\r\n  private readonly userService = inject(UsersService);\r\n  private readonly router = inject(Router);\r\n  private readonly authService = inject(AuthService);\r\n\r\n  roleOptions = [\r\n    { label: 'Admin', value: 'ADMIN' },\r\n    { label: 'Premium', value: 'PREMIUM' },\r\n    { label: 'Usuario', value: 'USUARIO' },\r\n    { label: 'Moderador', value: 'MODERADOR' }\r\n  ];\r\n\r\n  statusOptions = [\r\n    { label: 'Todos', value: '' },\r\n    { label: 'Activos', value: 'true' },\r\n    { label: 'Inactivos', value: 'false' }\r\n  ];\r\n\r\n  verifiedOptions = [\r\n    { label: 'Todos', value: '' },\r\n    { label: 'Verificados', value: 'true' },\r\n    { label: 'No verificados', value: 'false' }\r\n  ];\r\n\r\n  sortOptions = [\r\n    { label: 'Fecha registro', value: 'created_at' },\r\n    { label: 'Nombre', value: 'name' },\r\n    { label: 'Apellido', value: 'surname' },\r\n    { label: 'Email', value: 'email' }\r\n  ];\r\n\r\n  constructor(private fb: FormBuilder) {\r\n    this.form = this.fb.group({\r\n      searchTerm: [''],\r\n      active: [''],\r\n      verified: [''],\r\n      roles: [[]],\r\n      location: [''],\r\n      sortBy: ['created_at'],\r\n      sortDir: ['desc']\r\n    });\r\n  }\r\n\r\n ngOnInit(): void {\r\n    this.loadUsers();\r\n    this.currentUserId = this.authService.getUser()?.id || null;\r\n\r\n    this.form.valueChanges.subscribe((values) => {\r\n      console.log('Form values changed:', values);\r\n      this.page = 1;\r\n      const searchTerm = values.searchTerm?.trim() || '';\r\n    if (searchTerm.length >= 3 || searchTerm.length === 0) {\r\n      this.loadUsers();\r\n    }\r\n    });\r\n  }\r\n\r\n  loadUsers(): void {\r\n    const formValues = this.form.value;\r\n    \r\n    const dto: UserFilterDto = {\r\n      ...formValues,\r\n      page: this.page - 1,\r\n      size: this.size,\r\n      active: formValues.active === '' ? undefined : formValues.active === 'true',\r\n      verified: formValues.verified === '' ? undefined : formValues.verified === 'true',\r\n      roles: formValues.roles?.length > 0 ? formValues.roles : undefined\r\n    };\r\n\r\n    this.userService.getFilteredUsers(dto).subscribe({\r\n      next: (res) => {\r\n        this.users = res.content;\r\n        this.totalItems = res.totalElements;\r\n        this.totalPages = res.totalPages;\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading users:', err);\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudieron cargar los usuarios',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  clearFilters(): void {\r\n    this.form.reset({\r\n      searchTerm: '',\r\n      active: '',\r\n      verified: '',\r\n      roles: [],\r\n      location: '',\r\n      sortBy: 'created_at'\r\n    });\r\n    this.sortDir = 'desc';\r\n    this.size = 10;\r\n    this.page = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  changePage(newPage: number): void {\r\n    if (newPage >= 1 && newPage <= this.totalPages) {\r\n      this.page = newPage;\r\n      this.loadUsers();\r\n    }\r\n  }\r\n\r\n  editUser(user: UserGet): void {\r\n    this.selectedUserId = user.id;\r\n    this.selectedUserData = user;\r\n    this.showModal = true; \r\n    this.closeDropdown();\r\n  }\r\n\r\n  onModalClosed(): void {\r\n    this.showModal = false;\r\n    this.selectedUserId = null;\r\n    this.selectedUserData = null;\r\n    this.loadUsers(); \r\n  }\r\n\r\n  viewUserDetails(user: UserGet): void {\r\n  Swal.fire({\r\n    title: 'Detalles del Usuario',\r\n    html: `\r\n      <div class=\"text-start\">\r\n        <!-- Sección Avatar y Nombre -->\r\n        <div class=\"d-flex align-items-center mb-3\">\r\n          ${user.avatar_url && user.avatar_url.trim() !== '' ? \r\n            `<img src=\"${this.getAvatarUrl(user)}\" alt=\"${user.name} ${user.surname}\" \r\n                  class=\"rounded-circle me-3\" style=\"width: 60px; height: 60px; object-fit: cover;\">` :\r\n            `<div class=\"rounded-circle bg-white text-dark d-flex align-items-center justify-content-center me-3\" \r\n                  style=\"width: 60px; height: 60px; font-size: 24px; border: 1px solid black;\">\r\n              ${this.getInitials(user)}\r\n             </div>`\r\n          }\r\n          <div>\r\n            <h5 class=\"mb-1\">${user.name} ${user.surname} \r\n              ${user.verified ? '<i class=\"bi bi-patch-check-fill text-info\"></i>' : ''}\r\n            </h5>\r\n            <small class=\"text-muted\">@${user.username}</small>\r\n          </div>\r\n        </div>\r\n        \r\n        <hr>\r\n        \r\n        <!-- Sección Información Personal -->\r\n        <div class=\"mb-3\">\r\n          <h6 class=\"text-primary fw-bold mb-2\">Información Personal</h6>\r\n          <p class=\"mb-1\"><strong>Email:</strong> ${user.email}</p>\r\n          ${user.location ? `<p class=\"mb-1\"><strong>Ubicación:</strong> ${user.location}</p>` : ''}\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <!-- Sección Cuenta y Permisos -->\r\n        <div class=\"mb-3\">\r\n          <h6 class=\"text-primary fw-bold mb-2\">Cuenta y Permisos</h6>\r\n          <p class=\"mb-1\"><strong>Roles:</strong> ${user.roles.join(', ')}</p>\r\n          <p class=\"mb-1\"><strong>Estado:</strong> \r\n            <span class=\"text-${user.active ? 'success' : 'danger'}\">\r\n              <i class=\"bi bi-${user.active ? 'check-circle-fill' : 'x-circle-fill'}\"></i>\r\n              ${user.active ? 'Activo' : 'Inactivo'}\r\n            </span>\r\n          </p>\r\n          <p class=\"mb-1\"><strong>Verificado:</strong> \r\n            <span class=\"text-${user.verified ? 'success' : 'danger'}\">\r\n              <i class=\"bi bi-${user.verified ? 'check-circle-fill' : 'x-circle-fill'}\"></i>\r\n              ${user.verified ? 'Sí' : 'No'}\r\n            </span>\r\n          </p>\r\n          <p class=\"mb-1\"><strong>Suscripción:</strong> \r\n            ${user.subscription && user.subscription !== 'NO' ? \r\n              `<span class=\"text-success\">\r\n                <i class=\"bi bi-check-circle-fill\"></i>\r\n                ${user.subscription}\r\n              </span>` :\r\n              `<span class=\"text-danger\">\r\n                <i class=\"bi bi-x-circle-fill\"></i>\r\n                No\r\n              </span>`\r\n            }\r\n          </p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <!-- Sección Estadísticas -->\r\n        <div class=\"mb-3\">\r\n          <h6 class=\"text-primary fw-bold mb-2\">Estadísticas</h6>\r\n          <p class=\"mb-1\"><strong>Rating:</strong> \r\n            <span class=\"badge bg-warning text-dark\">\r\n              <i class=\"bi bi-star-fill\"></i> ${user.rating}/5\r\n            </span>\r\n          </p>\r\n        </div>\r\n\r\n        <hr>\r\n\r\n        <!-- Sección Fechas -->\r\n        <div>\r\n          <h6 class=\"text-primary fw-bold mb-2\">Información de Registro</h6>\r\n          <p class=\"mb-1\"><strong>Fecha de registro:</strong> ${this.formatDate(user.created_at)}</p>\r\n          <p class=\"mb-0\"><strong>Días desde el registro:</strong> ${this.getDaysByDate(user.created_at)} días</p>\r\n        </div>\r\n      </div>\r\n    `,\r\n    showCloseButton: true,\r\n    showConfirmButton: false,\r\n    width: '650px',\r\n    customClass: {\r\n      popup: 'text-start'\r\n    }\r\n  });\r\n}\r\n\r\n  getPages(): number[] {\r\n    const maxPagesToShow = 5;\r\n    let startPage = Math.max(1, this.page - Math.floor(maxPagesToShow / 2));\r\n    let endPage = startPage + maxPagesToShow - 1;\r\n\r\n    if (endPage > this.totalPages) {\r\n      endPage = this.totalPages;\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    return pages;\r\n  }\r\n\r\n  \r\n  changePageSize(newSize: number) {\r\n    this.size = newSize;\r\n    this.page = 1;\r\n    this.loadUsers();\r\n  }\r\n\r\n  toggleSortDirection(): void {\r\n    this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\r\n    this.form.get('sortDir')?.setValue(this.sortDir);\r\n    this.loadUsers();\r\n  }\r\n\r\ngetInitials(user: any): string {\r\n  const firstLetterName = user.name ? user.name.charAt(0).toUpperCase() : '';\r\n  const firstLetterSurname = user.surname ? user.surname.charAt(0).toUpperCase() : '';\r\n  return firstLetterName + firstLetterSurname;\r\n}\r\n\r\n  formatDate(dateStr: string): string {\r\n    return dateStr ? dateStr.replace(/-/g, '/') : '';\r\n  }\r\n\r\n getDaysByDate(dateStr: string): number {\r\n  if (!dateStr) return NaN;\r\n\r\n  const [day, month, year] = dateStr.split('-').map(Number);\r\n  if (!day || !month || !year) return NaN;\r\n\r\n  const date = new Date(year, month - 1, day);\r\n  const today = new Date();\r\n  \r\n  date.setHours(0, 0, 0, 0);\r\n  today.setHours(0, 0, 0, 0);\r\n\r\n  const diffTime = today.getTime() - date.getTime();\r\n\r\n  return diffTime <= 0 ? 0 : Math.floor(diffTime / (1000 * 60 * 60 * 24));\r\n}\r\n\r\n  goToUserProfile(userId: number): void {\r\n    this.router.navigate(['/user-profile', userId]).then(() => {\r\n      window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    });\r\n  }\r\n\r\n  toggleDropdown(userId: number): void {\r\n    if (this.dropdownOpenId === userId) {\r\n      this.dropdownOpenId = null;\r\n    } else {\r\n      this.dropdownOpenId = userId;\r\n    }\r\n  }\r\n\r\n  closeDropdown(): void {\r\n    this.dropdownOpenId = null;\r\n  }\r\n\r\n  getRoleBadgeClass(roles: string[]): string {\r\n    if (roles.includes('ADMIN')) return 'bg-danger';\r\n    if (roles.includes('MODERADOR')) return 'bg-info';\r\n    if (roles.includes('PREMIUM')) return 'bg-warning';\r\n    return 'bg-secondary';\r\n  }\r\n\r\n  getRoleDisplayName(roles: string[]): string {\r\n    if (roles.includes('ADMIN')) return 'Admin';\r\n    if (roles.includes('MODERADOR')) return 'Moderador';\r\n    if (roles.includes('PREMIUM')) return 'Usuario Premium';\r\n    return 'Usuario';\r\n  }\r\n\r\n  getAvatarUrl(user: UserGet): string {\r\n    return user.avatar_url || '';\r\n  }\r\n\r\n  verifyUser(userId: number): void {\r\n    this.userService.verifyUser(userId).subscribe({\r\n      next: () => {\r\n        Swal.fire({\r\n          title: 'Éxito',\r\n          text: 'Usuario verificado correctamente',\r\n          icon: 'success',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        }).then(() => {\r\n          this.loadUsers();\r\n        });\r\n      },\r\n      error: (err) => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudo verificar al usuario',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  unverifyUser(userId: number): void {\r\n    this.userService.unverifyUser(userId).subscribe({\r\n      next: () => {\r\n        Swal.fire({\r\n          title: 'Éxito',\r\n          text: 'Usuario desverificado correctamente',\r\n          icon: 'success',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        }).then(() => {\r\n          this.loadUsers();\r\n        });\r\n      },\r\n      error: (err) => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudo desverificar al usuario',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  activateUser(userId: number): void {\r\n    this.userService.activateUser(userId).subscribe({\r\n      next: () => {\r\n        Swal.fire({\r\n          title: 'Éxito',\r\n          text: 'Usuario activado correctamente',\r\n          icon: 'success',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        }).then(() => {\r\n          this.loadUsers();\r\n        });\r\n      },\r\n      error: (err) => {\r\n        Swal.fire({\r\n          title: 'Error',\r\n          text: 'No se pudo activar al usuario',\r\n          icon: 'error',\r\n          timer: 2000,\r\n          showConfirmButton: false\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteUser(userId: number): void {\r\n    Swal.fire({\r\n      title: '¿Estás seguro?',\r\n      text: 'Estas a punto de dar de baja a este usuario y todas sus publicaciones.',\r\n      icon: 'warning',\r\n      iconColor: '#d33',\r\n      showCancelButton: true,\r\n      confirmButtonColor: '#d33',\r\n      confirmButtonText: 'Sí, dar de baja',\r\n      cancelButtonText: 'Cancelar'\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        this.userService.deleteUser(userId).subscribe({\r\n          next: () => {\r\n            Swal.fire({\r\n              title: 'Éxito',\r\n              text: 'Usuario eliminado correctamente',\r\n              icon: 'success',\r\n              timer: 2000,\r\n              showConfirmButton: false\r\n            }).then(() => {\r\n              this.loadUsers();\r\n            });\r\n          },\r\n          error: (err) => {\r\n            Swal.fire({\r\n              title: 'Error',\r\n              text: 'No se pudo eliminar al usuario',\r\n              icon: 'error',\r\n              timer: 2000,\r\n              showConfirmButton: false\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n"
        },
        "view-map": {
          "view-map.component.css": ".map-container {\r\n    margin: 1rem 0;\r\n}\r\n\r\n.map-container .leaflet-container {\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\r\n}\r\n\r\n.map-container small {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n}",
          "view-map.component.html": "<div class=\"map-container\">\r\n    <div #mapContainer style=\"height: 300px; width: 100%; border-radius: 8px; border: 1px solid #ddd;\"></div>\r\n    <div class=\"mt-2\">\r\n        <small class=\"text-muted\">\r\n        <i class=\"bi bi-info-circle\"></i>\r\n        La ubicación mostrada es aproximada para proteger la privacidad del vendedor\r\n        </small>\r\n    </div>\r\n</div>\r\n",
          "view-map.component.spec.ts": "import { ComponentFixture, TestBed } from '@angular/core/testing';\r\n\r\nimport { ViewMapComponent } from './view-map.component';\r\n\r\ndescribe('ViewMapComponent', () => {\r\n  let component: ViewMapComponent;\r\n  let fixture: ComponentFixture<ViewMapComponent>;\r\n\r\n  beforeEach(async () => {\r\n    await TestBed.configureTestingModule({\r\n      imports: [ViewMapComponent]\r\n    })\r\n    .compileComponents();\r\n\r\n    fixture = TestBed.createComponent(ViewMapComponent);\r\n    component = fixture.componentInstance;\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n});\r\n",
          "view-map.component.ts": "import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\r\nimport * as L from 'leaflet';\r\n\r\n@Component({\r\n  selector: 'app-view-map',\r\n  standalone: true,\r\n  imports: [],\r\n  templateUrl: './view-map.component.html',\r\n  styleUrl: './view-map.component.css'\r\n})\r\nexport class ViewMapComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('mapContainer', { static: false }) mapContainer!: ElementRef;\r\n  @Input() latitude!: number;\r\n  @Input() longitude!: number;\r\n  @Input() title: string = 'Ubicación aproximada';\r\n\r\n  private map!: L.Map;\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.initDisplayMap();\r\n  }\r\n\r\n  initDisplayMap(): void {\r\n    if (!this.latitude || !this.longitude) {\r\n      console.warn('Coordenadas no proporcionadas para el mapa');\r\n      return;\r\n    }\r\n\r\n    const latOffset = (Math.random() - 0.5) * 0.005; \r\n    const lngOffset = (Math.random() - 0.5) * 0.005;\r\n    \r\n    const approxLat = this.latitude + latOffset;\r\n    const approxLng = this.longitude + lngOffset; \r\n\r\n    this.map = L.map(this.mapContainer.nativeElement, {\r\n      center: [approxLat, approxLng],\r\n      zoom: 14,\r\n      scrollWheelZoom: false,\r\n      doubleClickZoom: false,\r\n      boxZoom: true,\r\n      keyboard: false,\r\n      dragging: true,\r\n      zoomControl: true\r\n    });\r\n\r\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n      attribution: '© OpenStreetMap contributors'\r\n    }).addTo(this.map);\r\n\r\n\r\n    const proximityCircle = L.circle([approxLat, approxLng], {\r\n      color: '#007bff',\r\n      fillColor: '#007bff',\r\n      fillOpacity: 0.3,\r\n      radius: 300 \r\n    }).addTo(this.map);\r\n\r\n    proximityCircle.bindPopup(`\r\n      <div style=\"text-align: center;\">\r\n        <strong>${this.title}</strong><br>\r\n        <small>Ubicación aproximada</small>\r\n      </div>\r\n    `);\r\n\r\n    this.map.fitBounds(proximityCircle.getBounds(), {\r\n      padding: [20, 20]\r\n    });\r\n  }\r\n\r\n  updateLocation(lat: number, lng: number): void {\r\n    this.latitude = lat;\r\n    this.longitude = lng;\r\n    if (this.map) {\r\n      this.map.remove();\r\n      setTimeout(() => {\r\n        this.initDisplayMap();\r\n      }, 100);\r\n    }\r\n  }\r\n}\r\n\r\n"
        }
      },
      "guards": {
        "auth.guard.spec.ts": "import { TestBed } from '@angular/core/testing';\r\nimport { CanActivateFn } from '@angular/router';\r\n\r\nimport { authGuard } from './auth.guard';\r\n\r\ndescribe('authGuard', () => {\r\n  const executeGuard: CanActivateFn = (...guardParameters) => \r\n      TestBed.runInInjectionContext(() => authGuard(...guardParameters));\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(executeGuard).toBeTruthy();\r\n  });\r\n});\r\n",
        "auth.guard.ts": "import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\n\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  //Verifico si el usuario esta logeado\r\n  if(authService.isLoggedIn()){\r\n    return true;\r\n  }\r\n  else{\r\n\r\n    //Si no lo redirige al home\r\n    router.navigate(['home'])\r\n    return false;\r\n  }\r\n  \r\n};\r\n",
        "login-block.guard.spec.ts": "import { TestBed } from '@angular/core/testing';\r\nimport { CanActivateFn } from '@angular/router';\r\n\r\nimport { loginBlockGuard } from './login-block.guard';\r\n\r\ndescribe('loginBlockGuard', () => {\r\n  const executeGuard: CanActivateFn = (...guardParameters) => \r\n      TestBed.runInInjectionContext(() => loginBlockGuard(...guardParameters));\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(executeGuard).toBeTruthy();\r\n  });\r\n});\r\n",
        "login-block.guard.ts": "import { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\nimport { inject } from '@angular/core';\r\n\r\n//Redirige al home si el usuario ya esta logueado e intenta ir al login\r\nexport const loginBlockGuard: CanActivateFn = (route, state) => {\r\n  \r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n   //Verifica si el usuario está logueado\r\n  if(authService.isLoggedIn()){\r\n\r\n    //Lo redirige a home\r\n    router.navigate(['/home']);\r\n\r\n    //No lo deja ingresar\r\n    return false;\r\n  }\r\n\r\n  //Sino lo deja acceder\r\n  return true;\r\n\r\n};\r\n",
        "role.guard.spec.ts": "import { TestBed } from '@angular/core/testing';\r\nimport { CanActivateFn } from '@angular/router';\r\n\r\nimport { roleGuard } from './role.guard';\r\n\r\ndescribe('roleGuard', () => {\r\n  const executeGuard: CanActivateFn = (...guardParameters) => \r\n      TestBed.runInInjectionContext(() => roleGuard(...guardParameters));\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(executeGuard).toBeTruthy();\r\n  });\r\n});\r\n",
        "role.guard.ts": "import { inject } from '@angular/core';\r\nimport { CanActivateFn, Router } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\nexport const roleGuard: CanActivateFn = (route, state) => {\r\n  \r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  //Rol que puede acceder al componente\r\n  const requiredRoles = route.data['roles'] as string[];\r\n  \r\n  //Ver si el usuario tiene alguno de los roles permitidos\r\n  const hasValidRole = requiredRoles.some((role) =>    \r\n    authService.getActualRoles()?.includes(role) ?? false\r\n  );\r\n\r\n  //Si tiene permisos\r\n  if (hasValidRole) {\r\n    return true;\r\n  } \r\n  \r\n  //Si no tiene permisos\r\n  else {\r\n    router.navigate(['unauthorized']);\r\n    return false;\r\n  }\r\n};\r\n"
      },
      "models": {
        "Category.ts": "export interface Category {\r\n    name: string;\r\n    image: string;\r\n}",
        "CategoryGet.ts": "export class CategoryGet {\r\n    id: number;\r\n    description: string;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.description = '';\r\n\r\n    }\r\n}",
        "ChangePassword.ts": "export interface ChangePassword {\r\n    email: string;\r\n    currentPassword: string;\r\n    newPassword: string;\r\n}",
        "ContactGet.ts": "export interface ContactGet {\r\n    id: number;\r\n    contact_type: string;\r\n    contact_value: string;\r\n    }",
        "ContactTypeGet.ts": "export interface ContactTypeGet {\r\n    id: number;\r\n    description: string; \r\n}",
        "EventGet.ts": "export interface EventGet {\r\n  id: number;\r\n  title: string;\r\n  description?: string;\r\n  image_url?: string;\r\n  user: {\r\n    id: number;\r\n    name: string;\r\n    surname: string;\r\n    username: string;\r\n    verified: boolean;\r\n    avatar_url?: string;\r\n    rating: number; \r\n  };\r\n  start_date?: string; \r\n  end_date?: string;\r\n}",
        "EventPost.ts": "export interface EventPost {\r\n  title: string;\r\n  description?: string;\r\n  image_url?: string;\r\n  created_by_user_id: number;\r\n  start_date?: string; \r\n  end_date?: string;  \r\n}",
        "Faq.ts": "export interface Faq {\r\n  id: number;\r\n  question: string;\r\n  answer: string;\r\n  isExpanded: boolean;\r\n}",
        "FavoritePost.ts": "export interface FavoritePost {\r\n    publication_id: number;\r\n    user_id: number;\r\n}",
        "LocationGet.ts": "export class LocationGet {\r\n    id: number;\r\n    description: string;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.description = '';\r\n\r\n    }\r\n}",
        "LoginUser.ts": "export class LoginUser {\r\n    email: string;\r\n    password: string;\r\n\r\n    constructor() {\r\n        this.email = \"\";\r\n        this.password = \"\";\r\n    }\r\n}\r\n",
        "PaginatedPublications.ts": "import { PublicationGet } from \"./PublicationGet\";\r\n\r\nexport interface PaginatedPublications {\r\n  content: PublicationGet[];        \r\n  totalPages: number;               \r\n  totalElements: number;           \r\n  size: number;                     \r\n  number: number;                   \r\n  first: boolean;                   \r\n  last: boolean;                    \r\n  pageable: {\r\n    pageNumber: number;            \r\n    pageSize: number;               \r\n    offset: number;                 \r\n    paged: boolean;                 \r\n    unpaged: boolean;              \r\n    sort: {                        \r\n      empty: boolean;\r\n      sorted: boolean;\r\n      unsorted: boolean;\r\n    };\r\n  };\r\n}",
        "PaginatedReports.ts": "import { ReportGet } from \"./ReportGet\";\r\n\r\nexport interface PaginatedReports {\r\n  content: ReportGet[];\r\n  totalPages: number;\r\n  totalElements: number;\r\n  size: number;\r\n  number: number;\r\n  first: boolean;\r\n  last: boolean;\r\n  empty: boolean;\r\n  numberOfElements: number;\r\n  pageable: {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n    offset: number;\r\n    paged: boolean;\r\n    unpaged: boolean;\r\n    sort: {\r\n      empty: boolean;\r\n      sorted: boolean;\r\n      unsorted: boolean;\r\n    };\r\n  };\r\n  sort: {\r\n    empty: boolean;\r\n    sorted: boolean;\r\n    unsorted: boolean;\r\n  };\r\n}",
        "PaginatedUsers.ts": "import { UserGet } from \"./UserGet\";\r\n\r\n\r\nexport interface PaginatedUsers {\r\n  content: UserGet[];\r\n  totalPages: number;\r\n  totalElements: number;\r\n  size: number;\r\n  number: number;\r\n  first: boolean;\r\n  last: boolean;\r\n  pageable: {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n    offset: number;\r\n    paged: boolean;\r\n    unpaged: boolean;\r\n    sort: {\r\n    empty: boolean;\r\n    sorted: boolean;\r\n    unsorted: boolean;\r\n    };\r\n  };\r\n}",
        "Payments.ts": "export interface PaymentRequest {\r\n  amount: number;\r\n  description: string;\r\n  payerEmail?: string;\r\n  externalReference: string;\r\n  items?: PaymentItem[];\r\n}\r\n\r\nexport interface PaymentItem {\r\n  title: string;\r\n  description: string;\r\n  quantity: number;\r\n  unitPrice: number;\r\n}\r\n\r\nexport interface PaymentResponse {\r\n  preferenceId: string;\r\n  initPoint: string;\r\n  sandboxInitPoint: string;\r\n}",
        "PersonalDataPut.ts": "export class PersonalDataPut {\r\n    name: string;\r\n    surname?: string;\r\n    email: string;\r\n    location_id: number;\r\n\r\n    constructor(name: string, email: string, location_id: number, surname?: string) {\r\n        this.name = name;\r\n        this.surname = surname;\r\n        this.email = email;\r\n        this.location_id = location_id;\r\n    }\r\n}",
        "PublicationDashboardDto.ts": "export interface LabelCountDto {\r\n  label: string;\r\n  count: number;\r\n}\r\n\r\nexport interface PublicationDashboardDto {\r\n  totalPublications: number;\r\n  activePublications: number;\r\n  inactivePublications: number;\r\n  totalViews: number;\r\n  averagePrice: number;\r\n  publicationsByCategory: LabelCountDto[];\r\n  publicationsByTag: LabelCountDto[];\r\n  publicationsByLocation: LabelCountDto[];\r\n}",
        "PublicationGet.ts": "import { ContactGet } from \"./ContactGet\";\r\n\r\nexport interface PublicationGet {\r\n    id: number;\r\n    user: {\r\n    id: number;\r\n    name: string;\r\n    surname: string;\r\n    username: string;\r\n    verified: boolean;\r\n    avatar_url: string | null;\r\n    rating: number;\r\n        };\r\n    title: string;\r\n    description: string;\r\n    price: number;\r\n    active: boolean;\r\n    location: string;\r\n    created_at: string; \r\n    categories: string[];\r\n    tags: string[];\r\n    contacts: ContactGet[];\r\n    images: string[];\r\n    latitude: string;\r\n    views: number;\r\n    longitude: string;\r\n    }",
        "PublicationPost.ts": "export interface PublicationPost {\r\n    user_id: number;\r\n    title: string;\r\n    description: string;\r\n    price: number;\r\n    location_id: number;\r\n    categories: number[];\r\n    tags: number[];\r\n    images: string[];\r\n    contacts: {\r\n    contact_type_id: number;\r\n    contact_value: string;\r\n    latitude?: number;\r\n    longitude?: number;\r\n    }[];\r\n}",
        "PublicationPut.ts": "export interface PublicationPut {\r\n    title: string;\r\n    description: string;\r\n    price: number;\r\n    location_id: number;\r\n    categories: number[];\r\n    tags: number[];\r\n    images: string[];\r\n    contacts: {\r\n    contact_type_id: number;\r\n    contact_value: string;\r\n    latitude?: number;\r\n    longitude?: number;\r\n    }[];\r\n}",
        "RatingGet.ts": "export interface RatingGet {\r\n    id: number;\r\n    rating: number;\r\n    comment: string;\r\n    rater_user: {\r\n        id: number;\r\n        name: string;\r\n        surname: string;\r\n        username: string;\r\n        verified: boolean;\r\n        rating: number;\r\n        avatar_url: string | null;\r\n    };\r\n    rated_user_id: number;\r\n    created_at: string; \r\n}",
        "RatingPost.ts": "export class RatingPost {\r\n    rater_user_id: number;\r\n    rated_user_id: number;\r\n    rating: number;         \r\n    comment: string;\r\n\r\n    constructor() {\r\n        this.rater_user_id = 0;\r\n        this.rated_user_id = 0;\r\n        this.rating = 0;\r\n        this.comment = \"\";\r\n    }\r\n}\r\n\r\n",
        "RatingPut.ts": "export interface RatingPut {\r\n    rating?: number;       \r\n    comment?: string;\r\n}",
        "RecoveryEmailPost.ts": "export class RecoveryEmailPost {\r\n    emailOrUsername: string;\r\n    constructor(emailOrUsername: string) {\r\n        this.emailOrUsername = emailOrUsername;\r\n    }\r\n}",
        "ReportFilterDto.ts": "export interface ReportFilterDto {\r\nsearchTerm?: string;\r\nstatus?: string;\r\nsortBy?: string;        \r\nsortDir?: 'asc' | 'desc';\r\npage?: number;\r\nsize?: number;\r\n}",
        "ReportGet.ts": "import { PublicationGet } from \"./PublicationGet\";\r\nimport { UserGet } from \"./UserGet\";\r\n\r\nexport interface ReportGet {\r\nid: number;\r\nreporter: UserGet;\r\npublication: PublicationGet;  \r\nreason: string;\r\nresponse: string | null;\r\nstatus: string;\r\ncreated_at: string;\r\n}",
        "ReportPost.ts": "export class ReportPost {\r\nreported_by_user_id: number;\r\npublication_id: number;\r\nreason: string;\r\n\r\nconstructor(reportedByUserId: number, publicationId: number, reason: string) {\r\n    this.reported_by_user_id = reportedByUserId;\r\n    this.publication_id = publicationId;\r\n    this.reason = reason;\r\n    }\r\n}",
        "ResetPasswordPost.ts": "export class ResetPasswordPost{\r\n    emailOrUsername: string;\r\n    code: string;\r\n    newPassword: string;\r\n    constructor(emailOrUsername: string, code: string, newPassword: string) {\r\n        this.emailOrUsername = emailOrUsername;\r\n        this.code = code;\r\n        this.newPassword = newPassword;\r\n    }\r\n}",
        "RolGet.ts": "export class RolGet {\r\n    id: number;\r\n    description: string;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.description = '';\r\n\r\n    }\r\n}",
        "SearchByUserDto.ts": "export class SearchByUserDto {\r\n    searchTerm?: string;\r\n    active?: boolean;\r\n    sortBy?: string;\r\n    sortDir?: string;\r\n    page?: number;\r\n    size?: number;\r\n}",
        "SearchDto.ts": "export class SearchDto {\r\n  searchTerm?: string;\r\n  location?: string;\r\n  minPrice?: number;\r\n  categories?: string[];\r\n  tags?: string[];\r\n  maxPrice?: number;\r\n  sortBy?: string;\r\n  sortDir?: string;\r\n  page?: number;\r\n  size?: number;\r\n  active?: boolean;\r\n}\r\n",
        "ShortUserGet.ts": "",
        "SolveReportPost.ts": "export interface SolveReportPost {\r\n    reportId: number; \r\n    response: string; \r\n}",
        "SubscriptionDashboardDto.ts": "export interface SubscriptionMonthlyCountDto {\r\n  month: string;\r\n  count: number;\r\n}\r\n\r\nexport interface SubscriptionDashboardDto {\r\n  totalSubscriptions: number;\r\n  totalRevenue: number;\r\n\r\n  withDiscount: number;\r\n  withoutDiscount: number;\r\n\r\n  activeSubscriptions: number;\r\n  inactiveSubscriptions: number;\r\n\r\n  yearAnalize: string;\r\n\r\n  subscriptionsByMonth: SubscriptionMonthlyCountDto[];\r\n}",
        "SubscriptionGet.ts": "export class SubscriptionGet { \r\n  id: number;\r\n  user: {\r\n    id: number;\r\n    name: string;\r\n    surname: string;\r\n    verified: boolean;\r\n    avatar_url?: string;\r\n    rating: number;\r\n  };\r\n  subscription_type: {\r\n    id: number;\r\n    description: string;\r\n    price: number;\r\n  };\r\n  start_date: string; \r\n  end_date: string;   \r\n  total_price: number;\r\n  discount_applied: number;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.user = {\r\n        id: 0,\r\n        name: '',\r\n        surname: '',\r\n        verified: false,\r\n        avatar_url: undefined,\r\n        rating: 0\r\n        };\r\n        this.subscription_type = {\r\n        id: 0,\r\n        description: '',\r\n        price: 0\r\n        };\r\n        this.start_date = '';\r\n        this.end_date = '';\r\n        this.total_price = 0;\r\n        this.discount_applied = 0;\r\n    }\r\n\r\n}\r\n",
        "SubscriptionPost.ts": "export class SubscriptionPost {\r\n  user_id: number;\r\n  subscription_type_id: number;\r\n  start_date: string; \r\n  end_date: string;   \r\n  total_price: number;\r\n  discount_applied: number;\r\n    constructor(\r\n        user_id: number,\r\n        subscription_type_id: number,\r\n        start_date: string, \r\n        end_date: string,   \r\n        total_price: number,\r\n        discount_applied: number\r\n    ) {\r\n        this.user_id = user_id;\r\n        this.subscription_type_id = subscription_type_id;\r\n        this.start_date = start_date;\r\n        this.end_date = end_date;\r\n        this.total_price = total_price;\r\n        this.discount_applied = discount_applied;\r\n    }\r\n}",
        "TagGet.ts": "export class TagGet {\r\n    id: number;\r\n    description: string;\r\n\r\n    constructor() {\r\n        this.id = 0;\r\n        this.description = '';\r\n\r\n    }\r\n}",
        "UserDahsboardDto.ts": "export interface LocationCountDto {\r\n  location: string;\r\n  count: number;\r\n}\r\n\r\nexport interface UserDashboardDto {\r\n  totalUsers: number;\r\n  activeUsers: number;\r\n  inactiveUsers: number;\r\n  premiumUsers: number;\r\n  standardUsers: number;\r\n  verifiedUsers: number;\r\n  unverifiedUsers: number;\r\n  usersByLocation: LocationCountDto[];\r\n}",
        "UserFilterDto.ts": "export interface UserFilterDto {\r\n  searchTerm?: string;\r\n  active?: boolean;\r\n  verified?: boolean;\r\n  roles?: string[];\r\n  location?: string;\r\n  createdFrom?: string; \r\n  createdTo?: string;   \r\n  sortBy?: string;      \r\n  sortDir?: 'asc' | 'desc'; \r\n  page?: number;        \r\n  size?: number;        \r\n}",
        "UserGet.ts": "export class UserGet {\r\n    id: number;\r\n    name: string;\r\n    surname: string;\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    active: boolean;\r\n    verified: boolean;\r\n    location: string;\r\n    avatar_url?: string;\r\n    roles: string[];\r\n    rating: number;\r\n    subscription: string;\r\n    created_at: string;\r\n    constructor() {\r\n        this.id = 0;\r\n        this.name = '';\r\n        this.surname = '';\r\n        this.username = '';\r\n        this.password = '';\r\n        this.email = '';\r\n        this.avatar_url = '';\r\n        this.location = '';\r\n        this.roles = [];\r\n        this.active = false;\r\n        this.verified = false;\r\n        this.rating = 0;\r\n        this.subscription = '';\r\n        this.created_at = '';\r\n    }\r\n}",
        "UserLoged.ts": "export class UserLoged{\r\n    id: number;\r\n    name: string;\r\n    surname: string;\r\n    roles: string[];\r\n    avatar: string;\r\n    subscription : string;\r\n    constructor(){\r\n        this.id = 0;\r\n        this.roles = [];\r\n        this.name = '';\r\n        this.surname = '';\r\n        this.avatar = '';\r\n        this.subscription = '';\r\n\r\n    }\r\n}",
        "UserPost.ts": "export class UserPost {\r\n    name: string;\r\n    surname: string;\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    location_id: number;\r\n    avatar_url?: string;\r\n    roles: number[];\r\n\r\n    constructor() {\r\n        this.name = '';\r\n        this.surname = '';\r\n        this.username = '';\r\n        this.password = '';\r\n        this.email = '';\r\n        this.avatar_url = '';\r\n        this.location_id = 0;\r\n        this.roles = [];\r\n    }\r\n}",
        "UserUpdateAdmin.ts": "export class UserUpdateAdmin {\r\n    name: string;\r\n    surname: string;\r\n    email: string;\r\n    location_id: number;\r\n    roles: number[];\r\n    constructor(\r\n        name: string = '',\r\n        surname: string = '',\r\n        email: string = '',\r\n        location_id: number = 0,\r\n        roles: number[] = []\r\n    ) {\r\n        this.name = name;\r\n        this.surname = surname;\r\n        this.email = email;\r\n        this.location_id = location_id;\r\n        this.roles = roles;\r\n    }\r\n}"
      },
      "pipes": {
        "decimal-format.pipe.spec.ts": "import { DecimalFormatPipe } from './decimal-format.pipe';\r\n\r\ndescribe('DecimalFormatPipe', () => {\r\n  it('create an instance', () => {\r\n    const pipe = new DecimalFormatPipe();\r\n    expect(pipe).toBeTruthy();\r\n  });\r\n});\r\n",
        "decimal-format.pipe.ts": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'decimalFormat',\r\n  standalone: true\r\n})\r\nexport class DecimalFormatPipe implements PipeTransform {\r\n\r\n  transform(value: number | string): string {\r\n    if (value === null || value === undefined || value === '') {\r\n      return ''; \r\n    }\r\n\r\n    let parsedValue = parseFloat(value as string); \r\n\r\n    if (isNaN(parsedValue)) {\r\n      return ''; \r\n    }\r\n\r\n    return parsedValue.toLocaleString('es-AR', { \r\n      maximumFractionDigits: 0  \r\n    });\r\n  }\r\n}\r\n",
        "pipes.module.ts": "import { NgModule } from '@angular/core';\r\nimport { DecimalFormatPipe } from './decimal-format.pipe';\r\nimport { TruncatePipe } from './truncate.pipe';\r\n\r\n@NgModule({\r\n  imports: [DecimalFormatPipe,TruncatePipe],  \r\n  exports: [DecimalFormatPipe,TruncatePipe]        \r\n})\r\nexport class PipesModule {}",
        "truncate.pipe.spec.ts": "import { TruncatePipe } from './truncate.pipe';\r\n\r\ndescribe('TruncatePipe', () => {\r\n  it('create an instance', () => {\r\n    const pipe = new TruncatePipe();\r\n    expect(pipe).toBeTruthy();\r\n  });\r\n});\r\n",
        "truncate.pipe.ts": "import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'truncate',\r\n  standalone: true\r\n})\r\nexport class TruncatePipe implements PipeTransform {\r\n  transform(value: string, limit = 100, trail = '...'): string {\r\n    if (!value) return '';\r\n    return value.length > limit ? value.substring(0, limit) + trail : value;\r\n  }\r\n\r\n}\r\n"
      },
      "services": {
        "auth.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { AuthService } from './auth.service';\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(AuthService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "auth.service.ts": "import { inject, Injectable } from '@angular/core';\r\nimport { UserLoged } from '../models/UserLoged';\r\nimport { KJUR } from 'jsrsasign';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { LoginUser } from '../models/LoginUser';\r\nimport { RecoveryEmailPost } from '../models/RecoveryEmailPost';\r\nimport { ResetPasswordPost } from '../models/ResetPasswordPost';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private readonly http: HttpClient = inject(HttpClient);\r\n  private readonly url = 'http://localhost:8080/auth/';\r\n\r\n  private currentUserSubject = new BehaviorSubject<UserLoged | null>(this.getToken() ? this.getUser() : null);\r\n  public user$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor() {}\r\n\r\n  async login(data: any): Promise<void> {\r\n    this.saveToken(data.token);\r\n    const user = this.getUser();\r\n    this.saveActualRoles(user.roles);\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  getUser(): UserLoged {\r\n    const user = new UserLoged();\r\n    const token = this.getToken();\r\n    if (!token) return user;\r\n\r\n    const decodedToken: any = KJUR.jws.JWS.parse(token);\r\n    user.id = decodedToken.payloadObj.id;\r\n    user.roles = decodedToken.payloadObj.roles;\r\n    user.name = decodedToken.payloadObj.name;\r\n    user.surname = decodedToken.payloadObj.surname;\r\n    user.avatar = decodedToken.payloadObj.avatar;\r\n    user.subscription = decodedToken.payloadObj.subscription;\r\n    return user;\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('jwtToken');\r\n  }\r\n\r\n  saveToken(token: string): void {\r\n    localStorage.setItem('jwtToken', token);\r\n  }\r\n\r\n  hasSubscription(): boolean {\r\n    const user = this.getUser();\r\n    return user.subscription !== 'NO' && user.subscription !== undefined;\r\n  }\r\n\r\n  logOut(): void {\r\n    localStorage.removeItem('jwtToken');\r\n    localStorage.removeItem('jwtRoles');\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return localStorage.getItem('jwtToken') !== null;\r\n  }\r\n\r\n  hasRole(role: string): boolean {\r\n    return this.getUser().roles.includes(role);\r\n  }\r\n\r\n  saveActualRoles(roles: string[]): void {\r\n    const header = { alg: 'HS256', typ: 'JWT' };\r\n    const payload = {\r\n      roles: roles,\r\n      exp: Math.floor(Date.now() / 1000) + (60 * 60)\r\n    };\r\n\r\n    const secret = 'your-256-bit-secret';\r\n    const token = KJUR.jws.JWS.sign('HS256', JSON.stringify(header), JSON.stringify(payload), secret);\r\n    localStorage.setItem('jwtRoles', token);\r\n  }\r\n\r\n  hasActualRoles(): boolean {\r\n    return localStorage.getItem('jwtRoles') !== null;\r\n  }\r\n\r\n  getActualRoles(): string[] | null {\r\n    const token = localStorage.getItem('jwtRoles');\r\n    if (!token) return null;\r\n\r\n    const secret = 'your-256-bit-secret';\r\n    const decodedToken: any = KJUR.jws.JWS.parse(token);\r\n    const isValid = KJUR.jws.JWS.verify(token, secret, ['HS256']);\r\n\r\n    return isValid ? decodedToken.payloadObj.roles || null : null;\r\n  }\r\n\r\n  verifyLogin(user: LoginUser): Observable<LoginUser> {\r\n    return this.http.post<LoginUser>(this.url + \"login\", user);\r\n  }\r\n\r\n  recoverPassword(email: RecoveryEmailPost): Observable<void> {\r\n    return this.http.post<void>(this.url + \"recover-password\", email);\r\n  }\r\n\r\n  resetPassword(resetDto: ResetPasswordPost): Observable<void> {\r\n    return this.http.post<void>(this.url + \"reset-password\", resetDto);\r\n  }\r\n\r\n  updateUser(user: UserLoged): void {\r\n  localStorage.setItem('user', JSON.stringify(user));\r\n}\r\n\r\n}\r\n",
        "dashboards.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { DashboardsService } from './dashboards.service';\r\n\r\ndescribe('DashboardsService', () => {\r\n  let service: DashboardsService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(DashboardsService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "dashboards.service.ts": "import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { UserDashboardDto } from '../models/UserDahsboardDto';\r\nimport { PublicationDashboardDto } from '../models/PublicationDashboardDto';\r\nimport { SubscriptionDashboardDto } from '../models/SubscriptionDashboardDto';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DashboardsService {\r\n\r\n      private readonly http: HttpClient = inject(HttpClient);\r\n      private readonly url = 'http://localhost:8080/dashboards';\r\n\r\n  getUserDashboard(from?: string, to?: string): Observable<UserDashboardDto> {\r\n    let params = new HttpParams();\r\n    \r\n    if (from) {\r\n      params = params.set('from', from);\r\n    }\r\n    \r\n    if (to) {\r\n      params = params.set('to', to);\r\n    }\r\n\r\n    return this.http.get<UserDashboardDto>(`${this.url}/users`, { params });\r\n  }\r\n\r\n  getPublicationDashboard(from?: string, to?: string): Observable<PublicationDashboardDto> {\r\n    let params = new HttpParams();\r\n\r\n    if (from) {\r\n      params = params.set('from', from);\r\n    }\r\n\r\n    if (to) {\r\n      params = params.set('to', to);\r\n    }\r\n\r\n    return this.http.get<PublicationDashboardDto>(`${this.url}/publications`, { params });\r\n  }\r\n\r\n  getSubscriptionDashboard(from?: string, to?: string): Observable<SubscriptionDashboardDto> {\r\n    let params = new HttpParams();\r\n\r\n    if (from) {\r\n      params = params.set('from', from);\r\n    }\r\n\r\n    if (to) {\r\n      params = params.set('to', to);\r\n    }\r\n\r\n    return this.http.get<SubscriptionDashboardDto>(`${this.url}/subscriptions`, { params });\r\n  } \r\n}\r\n",
        "events.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { EventsService } from './events.service';\r\n\r\ndescribe('EventsService', () => {\r\n  let service: EventsService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(EventsService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "events.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { EventPost } from '../models/EventPost';\r\nimport { Observable } from 'rxjs';\r\nimport { EventGet } from '../models/EventGet';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventsService {\r\n\r\n    private readonly http: HttpClient = inject(HttpClient);\r\n    private readonly url = 'http://localhost:8080/events';\r\n\r\n    \r\n  createEvent(event: EventPost): Observable<EventGet> {\r\n    return this.http.post<EventGet>(this.url, event);\r\n  }\r\n\r\n  getEvents(): Observable<EventGet[]> {\r\n    return this.http.get<EventGet[]>(this.url);\r\n  }\r\n\r\n  getLastEvent(): Observable<EventGet> {\r\n    return this.http.get<EventGet>(`${this.url}/last`);\r\n  }\r\n\r\n  finalizeEvent(eventId: number): Observable<boolean> {\r\n    return this.http.put<boolean>(`${this.url}/finalize/${eventId}`, {});\r\n  }\r\n  \r\n  }\r\n\r\n\r\n\r\n  \r\n",
        "favorite.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { FavoriteService } from './favorite.service';\r\n\r\ndescribe('FavoriteService', () => {\r\n  let service: FavoriteService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(FavoriteService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "favorite.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { FavoritePost } from '../models/FavoritePost';\r\nimport { Observable } from 'rxjs';\r\nimport { PublicationGet } from '../models/PublicationGet';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FavoriteService {\r\n\r\n  private readonly http: HttpClient = inject(HttpClient);\r\n  private readonly url = 'http://localhost:8080/favorites';\r\n\r\n  isFavorite(dto: FavoritePost): Observable<boolean> {\r\n    return this.http.post<boolean>(`${this.url}/is-favorite`, dto);\r\n  }\r\n\r\n  createFavorite(dto: FavoritePost): Observable<any> {\r\n    return this.http.post(`${this.url}`, dto);\r\n  }\r\n\r\n  deleteFavorite(dto: FavoritePost): Observable<any> {\r\n    return this.http.post(`${this.url}/delete`, dto);\r\n  }\r\n\r\n  getFavoritesByUser(userId : number): Observable<PublicationGet[]> {\r\n    return this.http.get<PublicationGet[]>(`${this.url}/user/${userId}`);\r\n  }\r\n  \r\n}\r\n",
        "file.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { FileService } from './file.service';\r\n\r\ndescribe('FileService', () => {\r\n  let service: FileService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(FileService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "file.service.ts": "import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class FileService {\r\n\r\n  private apiUrl = 'http://localhost:8080/files';  \r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  uploadProfilePic(userId: number, file: File): Observable<string> {\r\n    const formData = new FormData();\r\n    formData.append('file', file, file.name);\r\n\r\n    return this.http.post<string>(`${this.apiUrl}/upload/profile/${userId}`, formData, {\r\n      responseType: 'text' as 'json'  \r\n    });\r\n  }\r\n\r\n  uploadPublicationPic(publicationId: number, userId: number, photoNumber: number, file: File): Observable<string> {\r\n    const formData = new FormData();\r\n    formData.append('file', file, file.name);\r\n\r\n    return this.http.post<string>(\r\n      `${this.apiUrl}/upload/publication/${publicationId}/${userId}/${photoNumber}`, \r\n      formData, \r\n      {\r\n        responseType: 'text' as 'json'  \r\n      }\r\n    );\r\n  }\r\n\r\n  uploadEventPic(eventId: number, file: File): Observable<string> {\r\n  const formData = new FormData();\r\n  formData.append('file', file, file.name);\r\n\r\n  return this.http.post<string>(\r\n    `${this.apiUrl}/upload/event/${eventId}`,\r\n    formData,\r\n    {\r\n      responseType: 'text' as 'json'\r\n    }\r\n  );\r\n}\r\n}\r\n",
        "mercado-pago.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { MercadoPagoService } from './mercado-pago.service';\r\n\r\ndescribe('MercadoPagoService', () => {\r\n  let service: MercadoPagoService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(MercadoPagoService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "mercado-pago.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { PaymentRequest } from '../models/Payments';\r\nimport { PaymentResponse } from '../models/Payments';\r\nimport { PaymentItem } from '../models/Payments';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MercadoPagoService {\r\n\r\n    private readonly http: HttpClient = inject(HttpClient);\r\n    private readonly url = 'http://localhost:8080/payments';\r\n\r\n  createPayment(price: number,type: string , userEmail: string, userId: string): Observable<PaymentResponse> {\r\n    const paymentRequest: PaymentRequest = {\r\n      amount: price,\r\n      description: `${type}`,\r\n      payerEmail: userEmail,\r\n      externalReference: userId,\r\n      items: [\r\n        {\r\n          title: `Suscripción ${type}`,\r\n          description: 'Pago por suscripción premium en Oncativo Vende',\r\n          quantity: 1,\r\n          unitPrice: price\r\n        }\r\n      ]\r\n    };\r\n\r\n    return this.http.post<PaymentResponse>(`${this.url}/create-preference`, paymentRequest);\r\n  }\r\n\r\n  redirectToPayment(paymentResponse: PaymentResponse): void {\r\n    const paymentUrl = paymentResponse.initPoint;\r\n    window.location.href = paymentUrl;\r\n  }\r\n  \r\n}\r\n",
        "publications.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { CategoryGet } from '../models/CategoryGet';\r\nimport { PublicationGet } from '../models/PublicationGet';\r\nimport { SearchDto } from '../models/SearchDto';\r\nimport { PaginatedPublications } from '../models/PaginatedPublications';\r\nimport { PublicationPost } from '../models/PublicationPost';\r\nimport { SearchByUserDto } from '../models/SearchByUserDto';\r\nimport { PublicationPut } from '../models/PublicationPut';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PublicationsService {\r\n\r\n  private readonly http: HttpClient = inject(HttpClient);\r\n  private readonly categoriesUrl = 'http://localhost:8080/categories';\r\n  private readonly publicationsUrl = 'http://localhost:8080/publications';\r\n\r\n  getCategories(): Observable<CategoryGet[]> {    \r\n    return this.http.get<CategoryGet[]>(this.categoriesUrl);\r\n  }\r\n  \r\n  getLast10Publications(): Observable<PublicationGet[]> {\r\n    return this.http.get<PublicationGet[]>(`${this.publicationsUrl}/last10`);\r\n  }\r\n\r\n  getPublicationById(id: number): Observable<PublicationGet> {\r\n    return this.http.get<PublicationGet>(`${this.publicationsUrl}/${id}`);\r\n  }\r\n\r\n  getFilteredPublications(search: SearchDto): Observable<PaginatedPublications> {\r\n    return this.http.post<PaginatedPublications>(`${this.publicationsUrl}/filter`, search);\r\n  }\r\n\r\n  getFilteredPublicationsByUserId(search: SearchByUserDto, userId: number): Observable<PaginatedPublications> {\r\n  return this.http.post<PaginatedPublications>(`${this.publicationsUrl}/filter/user/${userId}`, search);\r\n  }\r\n\r\n  createPublication(data: PublicationPost): Observable<PublicationGet> {\r\n  return this.http.post<PublicationGet>(`${this.publicationsUrl}`, data);\r\n  }\r\n\r\n  updatePublication(id: number, data: PublicationPut): Observable<PublicationGet> {\r\n    return this.http.put<PublicationGet>(`${this.publicationsUrl}/${id}`, data);\r\n  }\r\n\r\n  addView(id: number): Observable<void> {\r\n    return this.http.post<void>(`${this.publicationsUrl}/add-view/${id}`, null);\r\n  }\r\n\r\n  deletePublication(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.publicationsUrl}/${id}`);\r\n  }\r\n\r\n  reactivatePublication(id: number): Observable<void> {\r\n    return this.http.post<void>(`${this.publicationsUrl}/reactivate/${id}`, null);\r\n  }\r\n\r\n  isSameUserPublication(publicationId: number, userId: number): Observable<boolean> {\r\n    return this.http.post<boolean>(`${this.publicationsUrl}/is-same-user/${publicationId}/${userId}`, null);\r\n  }\r\n  \r\n\r\n}\r\n",
        "rating.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { RatingService } from './rating.service';\r\n\r\ndescribe('RatingService', () => {\r\n  let service: RatingService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(RatingService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "rating.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { RatingPost } from '../models/RatingPost';\r\nimport { Observable } from 'rxjs';\r\nimport { RatingGet } from '../models/RatingGet';\r\nimport { RatingPut } from '../models/RatingPut';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RatingService {\r\n\r\n    private readonly http: HttpClient = inject(HttpClient);\r\n    private readonly url = 'http://localhost:8080/ratings';\r\n\r\n  addRating(dto: RatingPost): Observable<boolean> {\r\n    return this.http.post<boolean>(this.url, dto);\r\n  }\r\n\r\n  getRatingsByUser(userId: number): Observable<RatingGet[]> {\r\n    return this.http.get<RatingGet[]>(`${this.url}/user/${userId}`);\r\n  }\r\n\r\n  updateRating(ratingId: number, dto: RatingPut): Observable<RatingGet> {\r\n    return this.http.put<RatingGet>(`${this.url}/${ratingId}`, dto);\r\n  }\r\n\r\n  deleteRating(ratingId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.url}/${ratingId}`);\r\n  }\r\n\r\n  hasRating(ratedUserId: number, raterUserId: number): Observable<RatingGet | null> {\r\n    return this.http.get<RatingGet | null>(`${this.url}/hasrating/${ratedUserId}/${raterUserId}`);\r\n  }\r\n\r\n}\r\n",
        "subscriptions.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { SubscriptionsService } from './subscriptions.service';\r\n\r\ndescribe('SubscriptionsService', () => {\r\n  let service: SubscriptionsService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(SubscriptionsService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "subscriptions.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { SubscriptionGet } from '../models/SubscriptionGet';\r\nimport { Observable } from 'rxjs';\r\nimport { SubscriptionPost } from '../models/SubscriptionPost';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SubscriptionsService {\r\n\r\n    private readonly http: HttpClient = inject(HttpClient);\r\n    private readonly url = 'http://localhost:8080/subscriptions';\r\n\r\n    postSubscription(subscription: SubscriptionPost): Observable<SubscriptionGet> {    \r\n      return this.http.post<SubscriptionGet>(this.url , subscription);\r\n    }\r\n    getSubscription(userId: number): Observable<SubscriptionGet> {\r\n      return this.http.get<SubscriptionGet>(`${this.url}/user/${userId}`);\r\n    }\r\n\r\n    getSubscriptionDiscount(): Observable<number> {\r\n      return this.http.get<number>(`${this.url}/discount`);\r\n    }\r\n\r\n  putSuscriptionDiscount(discount: number): Observable<void> {\r\n    return this.http.put<void>(`${this.url}/discount?discount=${discount}`, null);\r\n  }\r\n\r\n}\r\n",
        "users.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { UsersService } from './users.service';\r\n\r\ndescribe('UsersService', () => {\r\n  let service: UsersService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(UsersService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "users.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { UserPost } from '../models/UserPost';\r\nimport { UserGet } from '../models/UserGet';\r\nimport { ChangePassword } from '../models/ChangePassword';\r\nimport { PersonalDataPut } from '../models/PersonalDataPut';\r\nimport { UserFilterDto } from '../models/UserFilterDto';\r\nimport { PaginatedUsers } from '../models/PaginatedUsers';\r\nimport { UserUpdateAdmin } from '../models/UserUpdateAdmin';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UsersService {\r\n\r\n  private readonly _http: HttpClient = inject(HttpClient);\r\n  public get http(): HttpClient {\r\n    return this._http;\r\n  }\r\n  private readonly url = 'http://localhost:8080/users';\r\n\r\n  postUser(user: UserPost): Observable<UserGet> {    \r\n    return this.http.post<UserGet>(this.url , user);\r\n  }\r\n\r\n  getUsers(): Observable<UserGet[]> {\r\n    return this.http.get<UserGet[]>(this.url);\r\n  }\r\n\r\n  putUser(user: UserUpdateAdmin, userId: number): Observable<UserGet> {\r\n    return this.http.put<UserGet>(`${this.url}/${userId}`, user);\r\n  }\r\n\r\n  getUserById(id: number): Observable<UserGet> {\r\n    return this.http.get<UserGet>(`${this.url}/${id}`);\r\n  }\r\n\r\n  updateAvatarUrl(userId: number, avatarUrl: string): Observable<void> {\r\n    return this.http.put<void>(`${this.url}/avatar/${userId}`, avatarUrl, {\r\n      headers: { 'Content-Type': 'text/plain' } \r\n    });\r\n  }\r\n\r\n  updatePersonalData(personalDataPut: PersonalDataPut, userId: number): Observable<UserGet> {\r\n    return this.http.put<UserGet>(`${this.url}/personal-data/${userId}`, personalDataPut);\r\n  }\r\n\r\n  changePassword(changePassword: ChangePassword): Observable<void> {\r\n    return this.http.post<void>(`${this.url}/change-password`, changePassword);\r\n  }\r\n\r\n  getFilteredUsers(search: UserFilterDto): Observable<PaginatedUsers> {\r\n    return this.http.post<PaginatedUsers>(`${this.url}/filter`, search);\r\n  }\r\n\r\n  verifyUser(userId: number): Observable<void> {\r\n    return this.http.put<void>(`${this.url}/verify/${userId}`, null);\r\n  }\r\n\r\n  unverifyUser(userId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.url}/unverify/${userId}`);\r\n  }\r\n\r\n  deleteUser(userId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.url}/${userId}`);\r\n  }\r\n\r\n  deleteUserPermanently(userId: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.url}/delete/${userId}`);\r\n  }\r\n\r\n  activateUser(userId: number): Observable<void> {\r\n    return this.http.put<void>(`${this.url}/activate/${userId}`, null);\r\n  }\r\n\r\n}\r\n",
        "utils.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { UtilsService } from './utils.service';\r\n\r\ndescribe('UtilsService', () => {\r\n  let service: UtilsService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(UtilsService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "utils.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LocationGet } from '../models/LocationGet';\r\nimport { TagGet } from '../models/TagGet';\r\nimport { ContactTypeGet } from '../models/ContactTypeGet';\r\nimport { ReportPost } from '../models/ReportPost';\r\nimport { ReportFilterDto } from '../models/ReportFilterDto';\r\nimport { PaginatedReports } from '../models/PaginatedReports';\r\nimport { SolveReportPost } from '../models/SolveReportPost';\r\nimport { RolGet } from '../models/RolGet';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtilsService {\r\n\r\n  private readonly http: HttpClient = inject(HttpClient);\r\n  private readonly locationsUrl = 'http://localhost:8080/locations';\r\n  private readonly tagsUrl = 'http://localhost:8080/tags';\r\n  private readonly contactsUrl = 'http://localhost:8080/contacts';\r\n  private readonly rolesUrl = 'http://localhost:8080/roles';\r\n  private readonly reportsUrl = 'http://localhost:8080/reports';\r\n\r\n  getLocations(): Observable<LocationGet[]> {    \r\n      return this.http.get<LocationGet[]>(this.locationsUrl);\r\n    }\r\n\r\n  getTags(): Observable<TagGet[]> {\r\n    return this.http.get<TagGet[]>(this.tagsUrl);\r\n  }\r\n\r\n  getRoles(): Observable<RolGet[]> {\r\n    return this.http.get<RolGet[]>(this.rolesUrl);\r\n  }\r\n\r\n  getContactsTypes(): Observable<ContactTypeGet[]> {\r\n    return this.http.get<ContactTypeGet[]>(`${this.contactsUrl}/types`);\r\n  }\r\n\r\n  postReport(report: ReportPost): Observable<void> {\r\n    return this.http.post<void>(this.reportsUrl, report);\r\n  }\r\n\r\n  userAlreadyReported(userId: number, publicationId: number): Observable<boolean> {\r\n    return this.http.get<boolean>(`${this.reportsUrl}/user/${userId}/publication/${publicationId}`);\r\n  }\r\n\r\n  getFilteredReports(filter: ReportFilterDto): Observable<PaginatedReports> {\r\n  return this.http.post<PaginatedReports>(`${this.reportsUrl}/filter`, filter);\r\n}\r\n\r\n solveReport(dto: SolveReportPost): Observable<boolean> {\r\n    return this.http.post<boolean>(`${this.reportsUrl}/solve`, dto);\r\n  }\r\n\r\n\r\n\r\n}\r\n",
        "validator.service.spec.ts": "import { TestBed } from '@angular/core/testing';\r\n\r\nimport { ValidatorService } from './validator.service';\r\n\r\ndescribe('ValidatorService', () => {\r\n  let service: ValidatorService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({});\r\n    service = TestBed.inject(ValidatorService);\r\n  });\r\n\r\n  it('should be created', () => {\r\n    expect(service).toBeTruthy();\r\n  });\r\n});\r\n",
        "validator.service.ts": "import { HttpClient } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { AbstractControl, AsyncValidatorFn, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { catchError, map, Observable, of } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ValidatorService {\r\n\r\n  private readonly http: HttpClient = inject(HttpClient);\r\n  private readonly urlUser = 'http://localhost:8080/validator';\r\n\r\n  validateUniqueUsername(): AsyncValidatorFn {\r\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n      return this.http.get<{ isUnique: boolean }>(`${this.urlUser}/username?username=${control.value}`).pipe(\r\n        map(response => (response.isUnique ? null : { usernameTaken: true })),\r\n        catchError(() => {\r\n          return of({ serverError: true });\r\n        })\r\n      );\r\n    };\r\n  }\r\n\r\nvalidateNotBanned(): AsyncValidatorFn {\r\n  return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n    const value = control.value;\r\n    return this.http.get<boolean>(`${this.urlUser}/not-banned?email=${value}&username=${value}`).pipe(\r\n      map(response => response ? null : { userBanned: true }),\r\n      catchError(() => of({ serverError: true }))\r\n    );\r\n  };\r\n}\r\n\r\n\r\n  validateUniqueEmail(): AsyncValidatorFn {\r\n    return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n      return this.http.get<{ isUnique: boolean }>(`${this.urlUser}/email?email=${control.value}`).pipe(\r\n        map(response => (response.isUnique ? null : { emailTaken: true })),\r\n        catchError(() => {\r\n          return of({ serverError: true });\r\n        })\r\n      );\r\n    };\r\n  }\r\n\r\nvalidateNotUniqueEmail(): AsyncValidatorFn {\r\n  return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n    return this.http.get<{ isUnique: boolean }>(`${this.urlUser}/email?email=${control.value}`).pipe(\r\n      map(response => (!response.isUnique ? null : { emailNotTaken: true })), \r\n      catchError(() => of({ serverError: true }))\r\n    );\r\n  };\r\n}\r\n\r\n  \r\n\r\nvalidateUniqueEmailExceptCurrent(userId: number): AsyncValidatorFn {\r\n  return (control: AbstractControl): Observable<ValidationErrors | null> => {\r\n    const email = control.value;\r\n\r\n    return this.http.get<{ isUnique: boolean }>(\r\n      `${this.urlUser}/email/current?email=${encodeURIComponent(email)}&userId=${userId}`\r\n    ).pipe(\r\n      map(response => response.isUnique ? null : { emailTaken: true }),\r\n      catchError(() => of({ serverError: true }))\r\n    );\r\n  };\r\n}\r\n\r\n\r\n  matchFields(field1: string, field2: string): ValidatorFn {\r\n    return (formGroup: AbstractControl): ValidationErrors | null => {\r\n      const control1 = formGroup.get(field1);\r\n      const control2 = formGroup.get(field2);\r\n\r\n      if (control1?.value !== control2?.value) {\r\n        control2?.setErrors({ notMatch: true });\r\n        return { notMatch: true };\r\n      }\r\n      \r\n      control2?.setErrors(null);\r\n      return null;\r\n    };\r\n  }\r\n\r\n}\r\n"
      }
    }
  }
}